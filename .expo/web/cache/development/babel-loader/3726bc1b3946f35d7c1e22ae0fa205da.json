{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\contactUsers\\\\ListOfAllUsers.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Avatar, ListItem, SearchBar } from \"react-native-elements\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { NavigationEvents } from 'react-navigation';\nimport { connect } from 'react-redux';\nimport { changeLoadView, changeStackScreenPropsFunction } from \"../../redux/actions/popUpActions\";\nimport { ListOfAllUsers_Texts } from \"../../languages/screens/contactUsers/ListOfAllUsers\";\nimport * as Log from \"../../genericFunctions/logFunctions\";\nimport * as Database from \"../../genericFunctions/databaseFunctions\";\nimport { genericStyles, WHITE_COLOR } from \"../../constants/genericStyles\";\nimport * as auxiliarFunctions from \"../../genericFunctions/otherFunctions\";\nimport { DEFAULT_USER_ICON } from \"../../constants/genericImages\";\nimport PouchDB from 'pouchdb-react-native';\n\nvar ListOfAllUsers = function (_Component) {\n  _inherits(ListOfAllUsers, _Component);\n\n  function ListOfAllUsers(props) {\n    var _this;\n\n    _classCallCheck(this, ListOfAllUsers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListOfAllUsers).call(this, props));\n\n    _this.loadUsers = function _callee2() {\n      var usersList, db;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              usersList = [];\n              db = new PouchDB('lithodex');\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(db.get('default').then(function _callee(database) {\n                var usersList, keysList, user, friends, friendRequests;\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        usersList = [];\n                        keysList = Object.keys(database.users);\n\n                        for (i = 0; i < keysList.length; i++) {\n                          user = database.users[keysList[i]];\n\n                          if (user.userName.toString() !== \"unauthenticated\") {\n                            usersList.push({\n                              _id: user._id,\n                              userName: user.userName,\n                              profileImage: user.information.profileImage\n                            });\n                          }\n                        }\n\n                        usersList = usersList.sort(function (a, b) {\n                          return a.userName.toLowerCase() > b.userName.toLowerCase() ? 1 : -1;\n                        });\n                        friends = database.users[_this.props.user_id].friends;\n                        friendRequests = database.users[_this.props.user_id].friendRequests;\n\n                        _this.setState({\n                          usersList: usersList,\n                          friends: friends,\n                          friendRequests: friendRequests,\n                          loading: false\n                        });\n\n                      case 7:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                });\n              }).catch(function (error) {\n                console.error(error.toString());\n\n                _this.setState({\n                  loading: false\n                });\n              }));\n\n            case 4:\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(_this.props.dispatchChangeLoadView(false));\n\n            case 6:\n              _this.props.dispatchStackScreenPropsFunction(_this.props.navigation.openDrawer);\n\n              _this.setState({\n                loadFunctionOpened: true\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.goToUserView = function (user_id) {\n      var payload = {\n        _id: user_id\n      };\n\n      _this.props.screenProps.stackNavigation.navigate({\n        key: 'UserView',\n        routeName: 'UserView',\n        params: payload\n      });\n    };\n\n    _this.setFilter = function (text) {\n      _this.setState({\n        filter_name: text\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      loadFunctionOpened: true,\n      filter_name: null,\n      usersList: null\n    };\n    return _this;\n  }\n\n  _createClass(ListOfAllUsers, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dispatchChangeLoadView(false);\n    }\n  }, {\n    key: \"renderUsers\",\n    value: function renderUsers(filter_name) {\n      var _this2 = this;\n\n      var s = this.state;\n      var p = this.props;\n      var myList = filter_name == null ? s.usersList : s.usersList.filter(function (item) {\n        return auxiliarFunctions.stringIncludesSubstring_NoStrict(item.userName, filter_name);\n      });\n      return React.createElement(FlatList, {\n        ItemSeparatorComponent: Platform.OS !== 'android' && function (_ref) {\n          var highlighted = _ref.highlighted;\n          return React.createElement(View, {\n            style: [style.separator, highlighted && {\n              marginLeft: 0\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            }\n          });\n        },\n        data: myList,\n        keyExtractor: function keyExtractor(item) {\n          return item._id.toString();\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item,\n              index = _ref2.index,\n              separators = _ref2.separators;\n          return React.createElement(TouchableHighlight, {\n            key: item.key,\n            onPress: function onPress() {\n              return _this2.goToUserView(item._id);\n            },\n            onShowUnderlay: separators.highlight,\n            onHideUnderlay: separators.unhighlight,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            }\n          }, React.createElement(ListItem, {\n            title: item.userName,\n            key: index,\n            subtitle: s.friends.hasOwnProperty(item._id) ? \"(\" + p.allMessages[1] + \")\" : s.friendRequests.made.hasOwnProperty(item._id) ? \"(\" + p.allMessages[4] + \")\" : s.friendRequests.received.hasOwnProperty(item._id) ? \"(\" + p.allMessages[5] + \")\" : null,\n            leftAvatar: React.createElement(Avatar, {\n              size: \"medium\",\n              source: item.profileImage != null ? {\n                uri: item.profileImage\n              } : DEFAULT_USER_ICON,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            }\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      });\n    }\n  }, {\n    key: \"activateLoadUsers\",\n    value: function activateLoadUsers() {\n      if (this.state.loadFunctionOpened) {\n        this.setState({\n          loadFunctionOpened: false\n        });\n        this.loadUsers();\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var s = this.state;\n      var p = this.props;\n\n      if (s.loading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'flex-start'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          }\n        }, this.activateLoadUsers(), React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          }\n        }), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          }\n        }, p.allMessages[2], \"...\")));\n      }\n\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        }\n      }, !p.loadView && React.createElement(NavigationEvents, {\n        onWillFocus: function onWillFocus(payload) {\n          return _this3.loadUsers();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }), p.loadView && this.activateLoadUsers(), React.createElement(View, {\n        style: _objectSpread({}, genericStyles.white_background_without_ScrollView, {\n          flex: 1\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        }\n      }, React.createElement(SearchBar, {\n        value: s.filter_name,\n        selectTextOnFocus: true,\n        lightTheme: true,\n        textAlign: 'center',\n        inputStyle: {\n          color: 'black',\n          backgroundColor: WHITE_COLOR\n        },\n        placeholder: p.allMessages[3],\n        placeholderTextColor: 'gray',\n        onChangeText: function onChangeText(text) {\n          return _this3.setFilter(text);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        }\n      }), React.createElement(View, {\n        style: localStyles.userPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        }\n      }, this.renderUsers(s.filter_name))));\n    }\n  }]);\n\n  return ListOfAllUsers;\n}(Component);\n\nListOfAllUsers.navigationOptions = function (_ref3) {\n  var screenProps = _ref3.screenProps;\n  return {\n    title: ListOfAllUsers_Texts[screenProps.stackNavigation.getScreenProps().language][0],\n    drawerIcon: function drawerIcon() {\n      return React.createElement(Icon, {\n        name: \"address-book\",\n        color: \"black\",\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      });\n    }\n  };\n};\n\nvar localStyles = StyleSheet.create({\n  userPicker: {\n    flex: 8,\n    flexDirection: 'column',\n    padding: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: ListOfAllUsers_Texts[state.appPreferencesReducer.language],\n    user_id: state.userReducer.user_id,\n    friends: state.userReducer.friends,\n    loadView: state.popUpReducer.loadView\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchChangeLoadView: function dispatchChangeLoadView(bool) {\n      return dispatch(changeLoadView(bool));\n    },\n    dispatchStackScreenPropsFunction: function dispatchStackScreenPropsFunction(globalFunction) {\n      return dispatch(changeStackScreenPropsFunction(globalFunction));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfAllUsers);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/contactUsers/ListOfAllUsers.js"],"names":["React","Component","Avatar","ListItem","SearchBar","Icon","NavigationEvents","connect","changeLoadView","changeStackScreenPropsFunction","ListOfAllUsers_Texts","Log","Database","genericStyles","WHITE_COLOR","auxiliarFunctions","DEFAULT_USER_ICON","PouchDB","ListOfAllUsers","props","loadUsers","usersList","db","get","then","database","keysList","Object","keys","users","i","length","user","userName","toString","push","_id","profileImage","information","sort","a","b","toLowerCase","friends","user_id","friendRequests","setState","loading","catch","error","console","dispatchChangeLoadView","dispatchStackScreenPropsFunction","navigation","openDrawer","loadFunctionOpened","goToUserView","payload","screenProps","stackNavigation","navigate","key","routeName","params","setFilter","text","filter_name","state","s","p","myList","filter","item","stringIncludesSubstring_NoStrict","Platform","OS","highlighted","style","separator","marginLeft","index","separators","highlight","unhighlight","hasOwnProperty","allMessages","made","received","uri","flex","alignItems","justifyContent","flexDirection","activateLoadUsers","lightGray_background","loadView","white_background_without_ScrollView","color","backgroundColor","localStyles","userPicker","renderUsers","navigationOptions","title","getScreenProps","language","drawerIcon","StyleSheet","create","padding","mapStateToProps","appPreferencesReducer","userReducer","popUpReducer","mapDispatchToProps","dispatch","bool","globalFunction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, StyleSheet, TextInput, ScrollView, TouchableHighlight,\n\t\tActivityIndicator, FlatList} from 'react-native'\n\nimport { Avatar, ListItem, SearchBar} from \"react-native-elements\"\n\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport { NavigationEvents } from 'react-navigation'\n\nimport { connect } from 'react-redux'\nimport { changeLoadView, changeStackScreenPropsFunction } from '../../redux/actions/popUpActions'\nimport { ListOfAllUsers_Texts } from '../../languages/screens/contactUsers/ListOfAllUsers'\n\nimport * as Log          from '../../genericFunctions/logFunctions'\nimport * as Database     from '../../genericFunctions/databaseFunctions'\nimport { genericStyles, WHITE_COLOR } from '../../constants/genericStyles'\n\nimport * as auxiliarFunctions from '../../genericFunctions/otherFunctions'\nimport {DEFAULT_USER_ICON} from '../../constants/genericImages'\n\nimport PouchDB from 'pouchdb-react-native'\n\n\nclass ListOfAllUsers extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tloading:            true, // Variable que determina si se están cargando los usuarios desde la base de datos\n\t\t\tloadFunctionOpened: true, // Indica si se puede ingresar a la función loadUsers\n\t\t\tfilter_name:        null, // Almacenará el la cadena de caracteres que ingrese el usuario para filtrar la búsqueda de usuarios\n\t\t\tusersList:          null, // Lista de todos los usuarios que están almacenados en la base de datos\n\t\t}\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle: ListOfAllUsers_Texts[screenProps.stackNavigation.getScreenProps().language][0],\n\t\tdrawerIcon: () => (<Icon  name=\"address-book\"  color=\"black\"  size={20}/>)\n\t});\n\n\t// Cargamos todos los usuarios desde la base de datos y los almacenamos en una variable de estado local\n\tloadUsers = async() => {\n\t\tvar usersList = [];\n\t\tconst db = new PouchDB('lithodex');\n\n\t\tawait db.get('default')\n\t\t\t.then(async(database) => {  \n\t\t\t\t// Aquí obtenemos la lista de usuarios en total, sólo manteniendo las propiedades necesarias de cada uno, para no sobrecargar la memoria\n\t\t\t\tvar usersList = [];\n\t\t\t\tvar keysList  = Object.keys(database.users);\n\t\t\t\tfor (i = 0; i < keysList.length; i++){\n\t\t\t\t\tlet user = database.users[keysList[i]];\n\t\t\t\t\tif (user.userName.toString() !== \"unauthenticated\"){\n\t\t\t\t\t\tusersList.push({_id: user._id, userName: user.userName, profileImage: user.information.profileImage})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Ordenamos la lista de usuarios\n\t\t\t\tusersList = usersList.sort((a, b) => (a.userName.toLowerCase() > b.userName.toLowerCase()) ? 1 : -1);\n\t\t\t\t\n\t\t\t\t// Identificadores de usuario de los amigos del actual\n\t\t\t\tlet friends = database.users[this.props.user_id].friends; \n\n\t\t\t\t// Identificadores de usuario de los que han recibido/realizado una solicitud respecto al usuario actual\n\t\t\t\tlet friendRequests = database.users[this.props.user_id].friendRequests; \n\n\t\t\t\tthis.setState({usersList, friends, friendRequests, loading: false});\n\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.error(error.toString()); \n\t\t\t\tthis.setState({loading: false})\n\t\t\t})\n\t\tawait this.props.dispatchChangeLoadView(false);\n\t\t// Esto hace que el botón de tres líneas que está en la parte derecha de la cabecera pueda abrir el DrawerNavigator\n\t\tthis.props.dispatchStackScreenPropsFunction(this.props.navigation.openDrawer);\n\t\tthis.setState({loadFunctionOpened: true});\n\t}\n\n\t// Por si acaso desmontamos esta vista antes de que a la función de cargar desde la base de datos le dé tiempo\n\t// de despachar esta variable como falsa\n\tcomponentWillUnmount(){\n\t\tthis.props.dispatchChangeLoadView(false);\n\t}\n\n\t// Para ir a la vista del usuario que se va a examinar\n\tgoToUserView = (user_id) => {\n\t\tlet payload = {_id: user_id}\n\t\tthis.props.screenProps.stackNavigation.navigate({key: 'UserView', routeName: 'UserView', params: payload});\n\t}\n\n\t// Una vez que se cambia el texto en el que se filtran los nombres, se invoca este procedimiento\n\tsetFilter = (text) => {\n\t\tthis.setState({filter_name: text})\n\t}\n\n\t// Función para mostrar los usuarios como una lista de botones\n\trenderUsers (filter_name) {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\t\tlet myList = (filter_name == null) ? s.usersList : s.usersList.filter(item => auxiliarFunctions.stringIncludesSubstring_NoStrict(item.userName,filter_name));\n\n\t\treturn (\n\t\t\t<FlatList\n\t\t\t\tItemSeparatorComponent = {Platform.OS !== 'android' && (({ highlighted }) => (\n\t\t\t\t\t<View // Esto aparentemente servirá cuando trabajemos con iOS\n\t\t\t\t\t\tstyle = {[\n\t\t\t\t\t\t\tstyle.separator,\n\t\t\t\t\t\t\thighlighted && { marginLeft: 0 }\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\tdata         = {myList} // Arreglo con los elementos que queremos listar\n\t\t\t\tkeyExtractor = {(item) => item._id.toString()} // Sirve para indicarle que lo que debe usar como \"key\" por cada elemento es el atributo \"_id\"\n\t\t\t\trenderItem   = {({ item, index, separators }) => (\n\t\t\t\t\t<TouchableHighlight\n\t\t\t\t\t\tkey            = {item.key}\n\t\t\t\t\t\tonPress        = {() => this.goToUserView(item._id)}\n\t\t\t\t\t\tonShowUnderlay = {separators.highlight}\n\t\t\t\t\t\tonHideUnderlay = {separators.unhighlight}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\ttitle      = {item.userName}\n\t\t\t\t\t\t\tkey        = {index}\n\t\t\t\t\t\t\t// Mensajes: \"Amigos\" \"Solicitud de amistad enviada\" \"Solicitud de amistad pendiente\"\n\t\t\t\t\t\t\tsubtitle   = {(s.friends.hasOwnProperty(item._id)) ? (\"(\"+p.allMessages[1]+\")\") :\n\t\t\t\t\t\t\t\t\t\t  ( (s.friendRequests.made.hasOwnProperty(item._id)) ? (\"(\"+p.allMessages[4]+\")\") :\n\t\t\t\t\t\t\t\t\t\t  \t(s.friendRequests.received.hasOwnProperty(item._id)) ? (\"(\"+p.allMessages[5]+\")\") : null\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\tleftAvatar = {\n\t\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\t\tsize   = \"medium\"\n\t\t\t\t\t\t\t\t\tsource = {(item.profileImage != null) ? {uri: item.profileImage} : DEFAULT_USER_ICON}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t)}\n\t\t\t/>\n\t\t)\n\t}\n\n\t// Sirve para activar la función que lee desde la base de datos. Esto es útil cuando estamos emulando la aplicación y refrescamos la página\n\t// en caliente, ya que hacer eso volverá a colocar this.state.loading en su valor inicial (true) pero este componente ya estará montado, por lo que \n\t// no se activará el NavigationEvents onWillFocus, y en consecuencia la vista se quedará pegada en \"Cargando\"\n\tactivateLoadUsers(){\n\t\tif (this.state.loadFunctionOpened){\n\t\t\tthis.setState({loadFunctionOpened: false});\n\t\t\tthis.loadUsers();\n\t\t}\n\t\treturn(<View/>)\n\t}\n\n\t// Lo que se le mostrará al usuario\n\trender() {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Caso en que todavía no se ha cargado la información desde la base de datos\n\t\tif (s.loading){\n\t\t\treturn(\n\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'flex-start'}}>\n\t\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n\t\t\t\t\t\t{this.activateLoadUsers()}\n\t\t\t\t\t\t<ActivityIndicator size = \"large\" color = \"#0000ff\" />\n\t\t\t\t\t\t{/*Mensaje: \"Cargando\"*/}\n\t\t\t\t\t\t<Text>{p.allMessages[2]}...</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\t/// Caso en que ya se han cargado los usuarios\n\t\treturn (\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t{/* Caso en que regresamos de otra vista del DrawerNavigator*/}\n\t\t\t\t{(!p.loadView) && <NavigationEvents onWillFocus = {payload => this.loadUsers()}/>}\n\n\t\t\t\t{/*Caso en que regresamos de una vista del StackNavigator*/}\n\t\t\t\t{p.loadView && this.activateLoadUsers()}\n\n\t\t\t\t{/*Parte en la que el usuario ve la lista de otros usuarios*/}\n\t\t\t\t<View style = {{...genericStyles.white_background_without_ScrollView, flex: 1}}>\n\n\t\t\t\t\t{/*Aquí el usuario puede filtrar la búsqueda del otro usuario a buscar*/}\n\t\t\t\t\t<SearchBar\n\t\t\t\t\t\tvalue                  = {s.filter_name}\n\t\t\t\t\t\tselectTextOnFocus      = {true}\n\t\t\t\t\t\tlightTheme             = {true}\n\t\t\t\t\t\ttextAlign              = {'center'} \n\t\t\t\t\t\tinputStyle             = {{color: 'black', backgroundColor: WHITE_COLOR}}\n\t\t\t\t\t\tplaceholder            = {p.allMessages[3]} // Mensaje: \"Buscar usuarios...\"\n\t\t\t\t\t\tplaceholderTextColor   = {'gray'}\n\t\t\t\t\t\tonChangeText           = {text => this.setFilter(text)}\n\t\t\t\t\t/>\n\n\t\t\t\t\t{/*En esta parte debe mostrarse la lista de usuarios*/}\n\t\t\t\t\t<View style = {localStyles.userPicker}>\n\t\t\t\t\t\t{this.renderUsers(s.filter_name)}\n\t\t\t\t\t</View>\n\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t); \n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla\nconst localStyles = StyleSheet.create({\n\n\t// Formato para mostrar un usuario (no la lista completa, sino uno específico)\n\tuserPicker: {\n\t\tflex:          8,\n\t\tflexDirection: 'column',\n\t\tpadding:       10,\n\t},\n\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: ListOfAllUsers_Texts[state.appPreferencesReducer.language], \n\t\tuser_id:     state.userReducer.user_id,\n\t\tfriends:     state.userReducer.friends,\n\t\tloadView:    state.popUpReducer.loadView,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchChangeLoadView: (bool) => dispatch(changeLoadView(bool)),\n\t\tdispatchStackScreenPropsFunction: (globalFunction) => dispatch(changeStackScreenPropsFunction(globalFunction)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfAllUsers);"]},"metadata":{},"sourceType":"module"}