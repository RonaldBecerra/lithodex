{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHANGE_USER_ID, CHANGE_USER_PROFILE_IMAGE, CHANGE_USER_PRIVILEGES, CHANGE_SYNC_HANDLER } from \"../reduxTypes\";\nimport { UNAUTHENTICATED_ID, SERVER_URL } from \"../../constants/appConstants\";\nimport PouchDB from 'pouchdb-react-native';\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\nvar initialState = {\n  user_id: UNAUTHENTICATED_ID,\n  profileImage: null,\n  privileges: 0,\n  localDB: new PouchDB(UNAUTHENTICATED_ID),\n  remoteDB: null,\n  syncHandler: null\n};\n\nvar userReducer = function userReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHANGE_USER_ID:\n      if (action.payload == UNAUTHENTICATED_ID) {\n        return _objectSpread({}, state, {\n          user_id: UNAUTHENTICATED_ID,\n          localDB: new PouchDB(UNAUTHENTICATED_ID),\n          remoteDB: null\n        });\n      }\n\n      return _objectSpread({}, state, {\n        user_id: action.payload,\n        localDB: new PouchDB(action.payload),\n        remoteDB: new PouchDB(SERVER_URL + action.payload)\n      });\n\n    case CHANGE_SYNC_HANDLER:\n      return _objectSpread({}, state, {\n        syncHandler: action.payload\n      });\n\n    case CHANGE_USER_PROFILE_IMAGE:\n      return _objectSpread({}, state, {\n        profileImage: action.payload\n      });\n\n    case CHANGE_USER_PRIVILEGES:\n      return _objectSpread({}, state, {\n        privileges: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/redux/reducers/userReducer.js"],"names":["CHANGE_USER_ID","CHANGE_USER_PROFILE_IMAGE","CHANGE_USER_PRIVILEGES","CHANGE_SYNC_HANDLER","UNAUTHENTICATED_ID","SERVER_URL","PouchDB","plugin","require","default","initialState","user_id","profileImage","privileges","localDB","remoteDB","syncHandler","userReducer","state","action","type","payload"],"mappings":";;;;;;AAGA,SAASA,cAAT,EAAyBC,yBAAzB,EAAoDC,sBAApD,EAA4EC,mBAA5E;AACA,SAASC,kBAAT,EAA6BC,UAA7B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AAEAA,OAAO,CAACC,MAAR,CAAeC,OAAO,CAAC,8BAAD,CAAP,CAAwCC,OAAvD;AAEA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAOP,kBADM;AAEpBQ,EAAAA,YAAY,EAAE,IAFM;AAGpBC,EAAAA,UAAU,EAAI,CAHM;AAIpBC,EAAAA,OAAO,EAAO,IAAIR,OAAJ,CAAYF,kBAAZ,CAJM;AAKpBW,EAAAA,QAAQ,EAAM,IALM;AAMpBC,EAAAA,WAAW,EAAG;AANM,CAArB;;AASA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AAGC,SAAKpB,cAAL;AACC,UAAImB,MAAM,CAACE,OAAP,IAAkBjB,kBAAtB,EAAyC;AACxC,iCACIc,KADJ;AAECP,UAAAA,OAAO,EAAMP,kBAFd;AAGCU,UAAAA,OAAO,EAAM,IAAIR,OAAJ,CAAYF,kBAAZ,CAHd;AAICW,UAAAA,QAAQ,EAAK;AAJd;AAMA;;AAED,+BACIG,KADJ;AAECP,QAAAA,OAAO,EAAGQ,MAAM,CAACE,OAFlB;AAGCP,QAAAA,OAAO,EAAG,IAAIR,OAAJ,CAAYa,MAAM,CAACE,OAAnB,CAHX;AAICN,QAAAA,QAAQ,EAAE,IAAIT,OAAJ,CAAYD,UAAU,GAAGc,MAAM,CAACE,OAAhC;AAJX;;AAQD,SAAKlB,mBAAL;AACC,+BACIe,KADJ;AAECF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAFrB;;AAMD,SAAKpB,yBAAL;AACC,+BACIiB,KADJ;AAECN,QAAAA,YAAY,EAAEO,MAAM,CAACE;AAFtB;;AAMD,SAAKnB,sBAAL;AACC,+BACIgB,KADJ;AAECL,QAAAA,UAAU,EAAEM,MAAM,CAACE;AAFpB;;AAMD;AACC,aAAOH,KAAP;AA3CF;AA6CA,CA9CD;;AAgDA,eAAeD,WAAf","sourcesContent":["/* Aquí colocamos todos los reductores que tienen que ver con cambiar algún parámetro del usuario\r\nque actualmente está usando la aplicación en el dispositivo */\r\n\r\nimport { CHANGE_USER_ID, CHANGE_USER_PROFILE_IMAGE, CHANGE_USER_PRIVILEGES, CHANGE_SYNC_HANDLER } from '../reduxTypes';\r\nimport { UNAUTHENTICATED_ID, SERVER_URL } from '../../constants/appConstants'\r\nimport PouchDB from 'pouchdb-react-native'\r\n\r\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\r\n\r\nconst initialState = {\r\n\tuser_id:      UNAUTHENTICATED_ID,\r\n\tprofileImage: null,\r\n\tprivileges:   0,\r\n\tlocalDB:      new PouchDB(UNAUTHENTICATED_ID),\r\n\tremoteDB:     null,\r\n\tsyncHandler:  null, // Función que sincroniza la base de datos local con la remota. Esto permite hacer \"this.props.syncHandler.cancel()\"\r\n};\r\n\r\nconst userReducer = (state = initialState, action) => {\r\n\tswitch (action.type){\r\n\r\n\t\t// Caso en que cambia el usuario que está activo en la aplicación\r\n\t\tcase CHANGE_USER_ID:\r\n\t\t\tif (action.payload == UNAUTHENTICATED_ID){\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\t\tuser_id:     UNAUTHENTICATED_ID,\r\n\t\t\t\t\tlocalDB:     new PouchDB(UNAUTHENTICATED_ID),\r\n\t\t\t\t\tremoteDB:    null,\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tuser_id:  action.payload,\r\n\t\t\t\tlocalDB:  new PouchDB(action.payload),\r\n\t\t\t\tremoteDB: new PouchDB(SERVER_URL + action.payload),\r\n\t\t\t}\r\n\r\n\t\t// Para cambiar la función que sincroniza la base de datos local con la remota\r\n\t\tcase CHANGE_SYNC_HANDLER:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tsyncHandler: action.payload\r\n\t\t\t}\r\n\r\n\t\t// Para cambiar la imagen de perfil del usuario que está activo en la aplicación\r\n\t\tcase CHANGE_USER_PROFILE_IMAGE:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tprofileImage: action.payload,\r\n\t\t\t}\r\n\r\n\t\t// Para cambiar los privilegios del usuario que está activo en la aplicación\r\n\t\tcase CHANGE_USER_PRIVILEGES:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tprivileges: action.payload,\r\n\t\t\t}\r\n\r\n\t\t// Caso por defecto, que se utiliza si el tipo de la acción no coincide con ninguno de los establecidos aquí\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default userReducer;"]},"metadata":{},"sourceType":"module"}