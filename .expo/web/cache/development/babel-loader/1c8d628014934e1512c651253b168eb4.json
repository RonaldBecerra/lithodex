{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\Login.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Button as ButtonWithIcon, CheckBox } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport { changeUser, changeUserProfileImage, changeUserPrivileges, changeSyncHandler } from \"../redux/actions/userActions\";\nimport { Login_Texts } from \"../languages/screens/Login\";\nimport { genericStyles, DARK_GRAY_COLOR } from \"../constants/genericStyles\";\nimport { REMOTE_GENERIC_LITHODEX, LOCAL_LITHODEX, UNAUTHENTICATED_ID, DEFAULT_DOCUMENT_ID, USERNAMES_DOCUMENT_ID, OUTCROPS_DOCUMENT_ID, CORES_DOCUMENT_ID } from \"../constants/appConstants\";\nimport * as Database from \"../genericFunctions/databaseFunctions\";\nimport PouchDB from 'pouchdb-react-native';\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\n\nvar Login = function (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.onChangeUserName = function (text) {\n      _this.setState({\n        userName: text\n      });\n    };\n\n    _this.onChangePassword = function (text) {\n      _this.setState({\n        password: text\n      });\n    };\n\n    _this.verifyUserExistence = function _callee(userName, password) {\n      var currentUser, returnedValue, genericLithodex;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentUser = null;\n              returnedValue = {\n                userAndPasswordMatch: false\n              };\n              genericLithodex = new PouchDB(REMOTE_GENERIC_LITHODEX);\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(genericLithodex.get(USERNAMES_DOCUMENT_ID).then(function (document) {\n                var currentUser = document.userNames[userName];\n\n                if (currentUser != null && currentUser.password == password) {\n                  returnedValue = {\n                    userAndPasswordMatch: true,\n                    _id: currentUser._id\n                  };\n                }\n              }).catch(function (error) {\n                console.error(error.toString());\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\", returnedValue);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.acceptSettings = function _callee7() {\n      var s, p, result, syncHandlerProv, profileImage, privileges, localLithodex, unauthenticatedDB;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              s = _this.state;\n              p = _this.props;\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(_this.verifyUserExistence(s.userName, s.password));\n\n            case 4:\n              result = _context7.sent;\n\n              if (result.userAndPasswordMatch) {\n                _context7.next = 9;\n                break;\n              }\n\n              Alert.alert(p.allMessages[8], p.allMessages[0]);\n              _context7.next = 30;\n              break;\n\n            case 9:\n              _context7.next = 11;\n              return _regeneratorRuntime.awrap(p.dispatchUser(result._id));\n\n            case 11:\n              _context7.next = 13;\n              return _regeneratorRuntime.awrap(_this.props.localDB.replicate.from(_this.props.remoteDB));\n\n            case 13:\n              syncHandlerProv = _context7.sent;\n              _context7.next = 16;\n              return _regeneratorRuntime.awrap(_this.props.localDB.get(DEFAULT_DOCUMENT_ID).then(function _callee2(document) {\n                return _regeneratorRuntime.async(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        profileImage = document.information.profileImage;\n                        privileges = document.privileges;\n\n                      case 2:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                });\n              }).catch(function (error) {\n                console.error(error.toString());\n\n                _this.props.localDB.destroy();\n\n                p.dispatchUser(UNAUTHENTICATED_ID);\n                p.navigation.goBack();\n              }));\n\n            case 16:\n              localLithodex = new PouchDB(LOCAL_LITHODEX);\n              localLithodex.get(DEFAULT_DOCUMENT_ID).then(function (document) {\n                document.currentUser = {\n                  _id: result._id,\n                  privileges: privileges,\n                  profileImage: profileImage\n                };\n                return localLithodex.put(_objectSpread({}, document, {\n                  _rev: document._rev\n                }));\n              }).catch(function (error) {\n                console.error(error.toString());\n\n                _this.props.localDB.destroy();\n\n                p.dispatchUser(UNAUTHENTICATED_ID);\n                p.navigation.goBack();\n              });\n\n              if (!(_this.props.user_id !== UNAUTHENTICATED_ID)) {\n                _context7.next = 30;\n                break;\n              }\n\n              p.dispatchProfileImage(profileImage);\n              p.dispatchUserPrivileges(privileges);\n              syncHandlerProv.cancel();\n              _context7.next = 24;\n              return _regeneratorRuntime.awrap(_this.props.localDB.replicate.to(_this.props.remoteDB));\n\n            case 24:\n              syncHandlerProv = _context7.sent;\n              syncHandlerProv.cancel();\n              p.dispatchSyncHandler(PouchDB.sync(_this.props.localDB, _this.props.remoteDB, {\n                live: true,\n                retry: true\n              }).on('change', function (change) {\n                console.log(\"La conexión cambió\");\n              }).on('paused', function (info) {\n                console.log(\"La replicación está en pausa\");\n              }).on('active', function (info) {\n                Database.exportLogEntries(_id, false);\n              }).on('error', function (err) {\n                console.log(\"Ocurrió un error que no debería haber pasado\");\n              }));\n\n              if (s.acquireInformation) {\n                unauthenticatedDB = new PouchDB(UNAUTHENTICATED_ID);\n                unauthenticatedDB.get(OUTCROPS_DOCUMENT_ID).then(function _callee4(unauthenticated_document) {\n                  return _regeneratorRuntime.async(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return _regeneratorRuntime.awrap(this.props.localDB.get(OUTCROPS_DOCUMENT_ID).then(function _callee3(user_document) {\n                            return _regeneratorRuntime.async(function _callee3$(_context3) {\n                              while (1) {\n                                switch (_context3.prev = _context3.next) {\n                                  case 0:\n                                    _context3.next = 2;\n                                    return _regeneratorRuntime.awrap(_objectSpread({}, user_document.objects, {}, unauthenticated_document.objects));\n\n                                  case 2:\n                                    user_document.objects = _context3.sent;\n                                    return _context3.abrupt(\"return\", this.props.localDB.put(_objectSpread({}, user_document, {\n                                      _rev: user_document._rev\n                                    })));\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context3.stop();\n                                }\n                              }\n                            }, null, this);\n                          }).catch(function (error) {\n                            console.error(error.toString());\n                          }));\n\n                        case 2:\n                          unauthenticated_document.objects = {};\n                          return _context4.abrupt(\"return\", unauthenticatedDB.put(_objectSpread({}, unauthenticated_document, {\n                            _rev: unauthenticated_document._rev\n                          })));\n\n                        case 4:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, null, this);\n                }).catch(function (error) {\n                  console.error(error.toString());\n                });\n                unauthenticatedDB.get(CORES_DOCUMENT_ID).then(function _callee6(unauthenticated_document) {\n                  return _regeneratorRuntime.async(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return _regeneratorRuntime.awrap(this.props.localDB.get(CORES_DOCUMENT_ID).then(function _callee5(user_document) {\n                            return _regeneratorRuntime.async(function _callee5$(_context5) {\n                              while (1) {\n                                switch (_context5.prev = _context5.next) {\n                                  case 0:\n                                    _context5.next = 2;\n                                    return _regeneratorRuntime.awrap(_objectSpread({}, user_document.objects, {}, unauthenticated_document.objects));\n\n                                  case 2:\n                                    user_document.objects = _context5.sent;\n                                    return _context5.abrupt(\"return\", this.props.localDB.put(_objectSpread({}, user_document, {\n                                      _rev: user_document._rev\n                                    })));\n\n                                  case 4:\n                                  case \"end\":\n                                    return _context5.stop();\n                                }\n                              }\n                            }, null, this);\n                          }).catch(function (error) {\n                            console.error(error.toString());\n                          }));\n\n                        case 2:\n                          unauthenticated_document.objects = {};\n                          return _context6.abrupt(\"return\", unauthenticatedDB.put(_objectSpread({}, unauthenticated_document, {\n                            _rev: unauthenticated_document._rev\n                          })));\n\n                        case 4:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, null, this);\n                }).catch(function (error) {\n                  console.error(error.toString());\n                });\n              }\n\n              Alert.alert(p.allMessages[8], p.allMessages[7] + s.userName + \"'\");\n              p.navigation.goBack();\n\n            case 30:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    };\n\n    _this.refuseSettings = function () {\n      _this.props.navigation.goBack();\n    };\n\n    _this.keyboardDidShow = _this.keyboardDidShow.bind(_assertThisInitialized(_this));\n    _this.keyboardDidHide = _this.keyboardDidHide.bind(_assertThisInitialized(_this));\n    _this.state = {\n      userName: null,\n      password: null,\n      acquireInformation: false,\n      keyboardAvailable: false\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidShowListener.remove();\n      this.keyboardDidHideListener.remove();\n    }\n  }, {\n    key: \"keyboardDidShow\",\n    value: function keyboardDidShow() {\n      this.setState({\n        keyboardAvailable: true\n      });\n    }\n  }, {\n    key: \"keyboardDidHide\",\n    value: function keyboardDidHide() {\n      this.setState({\n        keyboardAvailable: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        }\n      }, React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        }\n      }, React.createElement(View, {\n        style: localStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1,\n          color: 'red',\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        }\n      }, \"*\", React.createElement(Text, {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        }\n      }, \" \", p.allMessages[1])), React.createElement(TextInput, {\n        defaultValue: s.userName,\n        selectTextOnFocus: true,\n        textAlign: 'center',\n        style: genericStyles.textInput,\n        onChangeText: function onChangeText(text) {\n          return _this2.onChangeUserName(text);\n        },\n        autoCapitalize: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        }\n      })), React.createElement(View, {\n        style: localStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1,\n          color: 'red',\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        }\n      }, \"*\", React.createElement(Text, {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        }\n      }, \" \", p.allMessages[2])), React.createElement(TextInput, {\n        defaultValue: s.password,\n        selectTextOnFocus: true,\n        textAlign: 'center',\n        secureTextEntry: true,\n        style: genericStyles.textInput,\n        onChangeText: function onChangeText(text) {\n          return _this2.onChangePassword(text);\n        },\n        autoCapitalize: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingTop: 50,\n          paddingBottom: 30,\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        }\n      }, React.createElement(CheckBox, {\n        title: p.allMessages[6],\n        checked: s.acquireInformation,\n        onPress: function onPress() {\n          _this2.setState({\n            acquireInformation: !s.acquireInformation\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        }\n      })))), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingRight: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[3],\n        color: DARK_GRAY_COLOR,\n        onPress: s.keyboardAvailable ? Keyboard.dismiss : this.refuseSettings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingLeft: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[4],\n        icon: {\n          name: 'check'\n        },\n        onPress: s.keyboardAvailable ? Keyboard.dismiss : this.acceptSettings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        }\n      }))));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nLogin.navigationOptions = function (_ref) {\n  var screenProps = _ref.screenProps;\n  return {\n    title: Login_Texts[screenProps.language][5],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader)\n  };\n};\n\nvar localStyles = StyleSheet.create({\n  row_instructions_textInput: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 10,\n    paddingTop: 30,\n    paddingBottom: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: Login_Texts[state.appPreferencesReducer.language],\n    localDB: state.userReducer.localDB,\n    remoteDB: state.userReducer.remoteDB,\n    syncHandler: state.userReducer.syncHandler\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchUser: function dispatchUser(user_id) {\n      return dispatch(changeUser(user_id));\n    },\n    dispatchProfileImage: function dispatchProfileImage(image) {\n      return dispatch(changeUserProfileImage(image));\n    },\n    dispatchUserPrivileges: function dispatchUserPrivileges(privileges) {\n      return dispatch(changeUserPrivileges(privileges));\n    },\n    dispatchSyncHandler: function dispatchSyncHandler(syncFunction) {\n      return dispatch(changeSyncHandler(syncFunction));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/Login.js"],"names":["React","Component","Button","ButtonWithIcon","CheckBox","connect","changeUser","changeUserProfileImage","changeUserPrivileges","changeSyncHandler","Login_Texts","genericStyles","DARK_GRAY_COLOR","REMOTE_GENERIC_LITHODEX","LOCAL_LITHODEX","UNAUTHENTICATED_ID","DEFAULT_DOCUMENT_ID","USERNAMES_DOCUMENT_ID","OUTCROPS_DOCUMENT_ID","CORES_DOCUMENT_ID","Database","PouchDB","plugin","require","default","Login","props","onChangeUserName","text","setState","userName","onChangePassword","password","verifyUserExistence","currentUser","returnedValue","userAndPasswordMatch","genericLithodex","get","then","document","userNames","_id","catch","error","console","toString","acceptSettings","s","state","p","result","Alert","alert","allMessages","dispatchUser","localDB","replicate","from","remoteDB","syncHandlerProv","profileImage","information","privileges","destroy","navigation","goBack","localLithodex","put","_rev","user_id","dispatchProfileImage","dispatchUserPrivileges","cancel","to","dispatchSyncHandler","sync","live","retry","on","change","log","info","exportLogEntries","err","acquireInformation","unauthenticatedDB","unauthenticated_document","user_document","objects","refuseSettings","keyboardDidShow","bind","keyboardDidHide","keyboardAvailable","keyboardDidShowListener","Keyboard","addListener","keyboardDidHideListener","remove","lightGray_background","white_background_with_ScrollView","localStyles","row_instructions_textInput","flex","color","fontWeight","textInput","paddingTop","paddingBottom","flexDirection","alignItems","justifyContent","down_buttons","paddingRight","dismiss","paddingLeft","name","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","StyleSheet","create","padding","mapStateToProps","appPreferencesReducer","userReducer","syncHandler","mapDispatchToProps","dispatch","image","syncFunction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, StyleSheet, TextInput, Button as ButtonNoIcon, \n\t\tScrollView, Alert, ActivityIndicator, Keyboard} from 'react-native';\n\nimport {Button as ButtonWithIcon, CheckBox} from 'react-native-elements'\n\nimport { connect } from 'react-redux'\nimport { changeUser, changeUserProfileImage, changeUserPrivileges, changeSyncHandler } from '../redux/actions/userActions'\n\nimport { Login_Texts } from '../languages/screens/Login'\nimport { genericStyles, DARK_GRAY_COLOR }  from '../constants/genericStyles'\nimport { REMOTE_GENERIC_LITHODEX, LOCAL_LITHODEX, UNAUTHENTICATED_ID, DEFAULT_DOCUMENT_ID,\n\t\t USERNAMES_DOCUMENT_ID, OUTCROPS_DOCUMENT_ID, CORES_DOCUMENT_ID} from '../constants/appConstants'\n\nimport * as Database from '../genericFunctions/databaseFunctions'\n\nimport PouchDB from 'pouchdb-react-native'\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\n\n\nclass Login extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.keyboardDidShow = this.keyboardDidShow.bind(this)\n\t\tthis.keyboardDidHide = this.keyboardDidHide.bind(this)\n\n\t\tthis.state = {\n\t\t\tuserName: null,\n\t\t\tpassword: null,\n\t\t\tacquireInformation: false, // Determina si hay que adquirir la información del usuario no autenticado\n\n\t\t\t// Determina si el teclado está visible. Esto lo pusimos porque no queremos que los botones de \"Aceptar\" y \"Cancelar\" de la parte inferior cierren la vista cuando el teclado está visible\n\t\t\tkeyboardAvailable: false,\n\t\t}\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle:           Login_Texts[screenProps.language][5],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t}\n\t});\n\n\t// Aquí inicializamos los escuchas que determinan si el teclado se está mostrando o no\n\tcomponentDidMount(){\n\t\tthis.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n\t\tthis.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n\t}\n\n\t// Quitamos los escuchas cuando salimos de esta ventana\n\tcomponentWillUnmount() {\n\t\tthis.keyboardDidShowListener.remove();\n\t\tthis.keyboardDidHideListener.remove();\n\t}\n\n\t// Caso en que el teclado se está mostrando\n\tkeyboardDidShow() {\n\t\tthis.setState({keyboardAvailable: true});\n\t}\n\n\t// Caso en que el teclado se ocultó\n\tkeyboardDidHide() {\n\t\tthis.setState({keyboardAvailable: false});\n\t}\n\n\t// Procedimiento para actualizar el nombre de usuario\n\tonChangeUserName = (text) => {\n\t\tthis.setState({userName: text});\t\n\t}\n\n\t// Procedimiento para actualizar la contraseña\n\tonChangePassword = (text) => {\t\n\t\tthis.setState({password: text});\n\t}\n\n\t// Función para verificar si el par (nombre de usuario, contraseña) existe en la base de datos\n\tverifyUserExistence = async(userName,password) =>{\n\t\tvar currentUser = null;\n\t\tvar returnedValue = {userAndPasswordMatch: false};\n\n\t\tconst genericLithodex = new PouchDB(REMOTE_GENERIC_LITHODEX);\n\t\tawait genericLithodex.get(USERNAMES_DOCUMENT_ID)\n\t\t\t.then(function(document){       \n\n\t\t\t\t// Buscamos el usuario que coincida con el nombre de usuario provisto\n\t\t\t\tlet currentUser = document.userNames[userName];\n\n\t\t\t\tif ((currentUser != null) && (currentUser.password == password)){\n\t\t\t\t\treturnedValue = {\n\t\t\t\t\t\tuserAndPasswordMatch: true,\n\t\t\t\t\t\t_id: currentUser._id,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}).catch(function (error){\n\t\t\t\tconsole.error(error.toString())\n\t\t\t});\n\t\treturn returnedValue;\n\t}\n\n\t// Se activa cuando el usuario le da al botón de \"Aceptar\", y determina si hay que añadir un nuevo estrato, o se modifica uno ya existente\n\tacceptSettings = async() => {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tvar result = await this.verifyUserExistence(s.userName,s.password);\n\n\t\tif (!result.userAndPasswordMatch){\n\t\t\t// Alerta: \"Usuario o contraseña incorrectos\"\n\t\t\tAlert.alert(p.allMessages[8], p.allMessages[0]);\n\t\t}\n\t\telse{\n\t\t\t// Tenemos que hacer que el usuario actual en Redux sea el que se ingresó\n\t\t\tawait p.dispatchUser(result._id);\n\n\t\t\t// Al haber despachado el usuario ya podemos invocar sus respectivas bases de datos\n\t\t\t// Hacemos que la local adquiera todo lo salvado en la remota\n\t\t\t// Nótese que esta replicación es unidireccional: remota => local.\n\t\t\tvar syncHandlerProv = await this.props.localDB.replicate.from(this.props.remoteDB); \n\n\t\t\t// Necesitamos estas dos variables para luego almacenarlas en la base de datos genérica local y también para despacharlas a la Tienda Redux.\n\t\t\t// Las obtenemos de la base de datos del usuario.\n\t\t\tlet profileImage, privileges; \n\t\t\tawait this.props.localDB.get(DEFAULT_DOCUMENT_ID)\n\t\t\t\t.then(async(document) => {\n\t\t\t\t\tprofileImage = document.information.profileImage;\n\t\t\t\t\tprivileges   = document.privileges;\n\t\t\t\t}).catch(error => {\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\tthis.props.localDB.destroy(); // Como la replicación fue remota => local, esto sólo destruye la base de datos local\n\t\t\t\t\tp.dispatchUser(UNAUTHENTICATED_ID);\n\t\t\t\t\tp.navigation.goBack();\n\t\t\t\t})\n\n\t\t\t// En la base de datos genérica local tenemos que actualizar la información del usuario actual\n\t\t\tconst localLithodex = new PouchDB(LOCAL_LITHODEX); \n\t\t\tlocalLithodex.get(DEFAULT_DOCUMENT_ID)\n\t\t\t\t.then(document => {\n\t\t\t\t\tdocument.currentUser = {_id: result._id, privileges, profileImage};\n\t\t\t\t\treturn localLithodex.put({...document, _rev: document._rev});\n\t\t\t\t}).catch(error => {\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\tthis.props.localDB.destroy(); // Como la replicación fue remota => local, esto sólo destruye la base de datos local\n\t\t\t\t\tp.dispatchUser(UNAUTHENTICATED_ID);\n\t\t\t\t\tp.navigation.goBack();\n\t\t\t\t})\n\n\t\t\tif (this.props.user_id !== UNAUTHENTICATED_ID){\n\t\t\t\t// Despachamos las dos variables ya mencionadas a la Tienda Redux\n\t\t\t\tp.dispatchProfileImage(profileImage); // Imagen de perfil\n\t\t\t\tp.dispatchUserPrivileges(privileges); // Privilegios del usuario\n\n\t\t\t\t// Ahora trasnferimos a la base remota del usuario todo lo que se pudo haber mantenido en una local del usuario y que no \n\t\t\t\t// se llegó a replicar quizás por problemas de conexión\n\t\t\t\tsyncHandlerProv.cancel();\n\t\t\t\tsyncHandlerProv = await this.props.localDB.replicate.to(this.props.remoteDB);\n\t\t\t\tsyncHandlerProv.cancel();\n\n\t\t\t\t// Si todo lo anterior se hizo correctamente, ahora sí establecemos una sincronización bidireccional,\n\t\t\t\t// la cual guardamos en la Tienda Redux para poder cancelarla cuando queramos cerrar sesión haciendo \"this.props.syncHandler.cancel()\"\n\t\t\t\tp.dispatchSyncHandler(\n\t\t\t\t\tPouchDB.sync(this.props.localDB,this.props.remoteDB, {\n\t\t\t\t\t\tlive: true,\n\t\t\t\t\t\tretry: true\n\t\t\t\t\t}).on('change', function (change) {\n\t\t\t\t\t\tconsole.log(\"La conexión cambió\");\n\t\t\t\t\t}).on('paused', function (info) {\n\t\t\t\t\t\tconsole.log(\"La replicación está en pausa\");\n\t\t\t\t\t}).on('active', function (info) {\n\t\t\t\t\t\t// Cada vez que la replicación esté activa nuevamente tenemos que transferir las entradas necesarias del log\n\t\t\t\t\t\tDatabase.exportLogEntries(_id, false);\n\t\t\t\t\t}).on('error', function (err) {\n\t\t\t\t\t\tconsole.log(\"Ocurrió un error que no debería haber pasado\");\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\t// Caso en que tenemos que transferirle al usuario autenticado lo que realizó el no autenticado\n\t\t\t\tif (s.acquireInformation){\n\t\t\t\t\tconst unauthenticatedDB = new PouchDB(UNAUTHENTICATED_ID);\n\n\t\t\t\t\t// Adquirimos los afloramientos del usuario no autenticado\n\t\t\t\t\tunauthenticatedDB.get(OUTCROPS_DOCUMENT_ID)\n\t\t\t\t\t\t.then(async function(unauthenticated_document){\n\t\t\t\t\t\t\tawait this.props.localDB.get(OUTCROPS_DOCUMENT_ID)\n\t\t\t\t\t\t\t\t.then(async function(user_document){\n\t\t\t\t\t\t\t\t\tuser_document.objects = await {...user_document.objects, ...unauthenticated_document.objects};\n\t\t\t\t\t\t\t\t\treturn this.props.localDB.put({...user_document, _rev: user_document._rev});\n\t\t\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tunauthenticated_document.objects = {};\n\t\t\t\t\t\t\treturn unauthenticatedDB.put({...unauthenticated_document, _rev: unauthenticated_document._rev});\n\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t})\n\n\t\t\t\t\t// Adquirimos los núcleos del usuario no autenticado\n\t\t\t\t\tunauthenticatedDB.get(CORES_DOCUMENT_ID)\n\t\t\t\t\t\t.then(async function(unauthenticated_document){\n\t\t\t\t\t\t\tawait this.props.localDB.get(CORES_DOCUMENT_ID)\n\t\t\t\t\t\t\t\t.then(async function(user_document){\n\t\t\t\t\t\t\t\t\tuser_document.objects = await {...user_document.objects, ...unauthenticated_document.objects};\n\t\t\t\t\t\t\t\t\treturn this.props.localDB.put({...user_document, _rev: user_document._rev});\n\t\t\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tunauthenticated_document.objects = {};\n\t\t\t\t\t\t\treturn unauthenticatedDB.put({...unauthenticated_document, _rev: unauthenticated_document._rev});\n\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t// Alerta: \"Se ha iniciado sesión como '<Nombre de usuario>'\"\n\t\t\t\tAlert.alert(p.allMessages[8], p.allMessages[7]+s.userName+\"'\");\n\t\t\t\tp.navigation.goBack();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Procedimiento para el caso en que el usuario le da al botón de Cancelar\n\trefuseSettings = () => {\n\t\tthis.props.navigation.goBack();\n\t}\n\n\t// Lo que se muestra al usuario en total en esta ventana\n\trender (){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\n\t\t\t\t{/*En esta parte el usuario ingresa el nombre de usuario y la contraseña*/}\n\t\t\t\t<View style = {genericStyles.white_background_with_ScrollView}>\n\t\t\t\t\t\n\t\t\t\t\t<ScrollView>\n\n\t\t\t\t\t\t{/*Ingresar el nombre de usuario*/}\n\t\t\t\t\t\t<View style = {localStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t{/*Mensaje: \"Nombre de usuario :  \"*/}\n\t\t\t\t\t\t\t<Text style = {{flex: 1, color: 'red', fontWeight: 'bold'}}>*\n\t\t\t\t\t\t\t\t<Text style = {{color: 'black'}}> {p.allMessages[1]}</Text>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<TextInput \n\t\t\t\t\t\t\t\tdefaultValue      = {s.userName}\n\t\t\t\t\t\t\t\tselectTextOnFocus = {true}\n\t\t\t\t\t\t\t\ttextAlign         = {'center'} \n\t\t\t\t\t\t\t\tstyle             = {genericStyles.textInput}\n\t\t\t\t\t\t\t\tonChangeText      = {text => this.onChangeUserName(text)}\n\t\t\t\t\t\t\t\tautoCapitalize    = \"none\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{/*Ingresar la contraseña*/}\n\t\t\t\t\t\t<View style = {localStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t{/*Mensaje: \"Contraseña : \"*/}\n\t\t\t\t\t\t\t<Text style = {{flex: 1, color: 'red', fontWeight: 'bold'}}>*\n\t\t\t\t\t\t\t\t<Text style = {{color: 'black'}}> {p.allMessages[2]}</Text>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\t\tdefaultValue      = {s.password}\n\t\t\t\t\t\t\t\tselectTextOnFocus = {true}\n\t\t\t\t\t\t\t\ttextAlign         = {'center'} \n\t\t\t\t\t\t\t\tsecureTextEntry   = {true}\n\t\t\t\t\t\t\t\tstyle             = {genericStyles.textInput}\n\t\t\t\t\t\t\t\tonChangeText      = {text => this.onChangePassword(text)}\n\t\t\t\t\t\t\t\tautoCapitalize    = \"none\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<View style = {{paddingTop: 50, paddingBottom: 30, flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n\t\t\t\t\t\t\t<CheckBox // Cuadro que le permite al usuario determinar si quiere llevarse la información que había guardado como usuario no autenticado\n\t\t\t\t\t\t\t\ttitle   = {p.allMessages[6]} // Mensaje: \"Adquirir información del usuario no autenticado\"\n\t\t\t\t\t\t\t\tchecked = {s.acquireInformation}\n\t\t\t\t\t\t\t\tonPress = {() => {this.setState({acquireInformation: !s.acquireInformation})}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t</ScrollView>\n\n\t\t\t\t</View>\n\n\t\t\t\t{/*//Vista de los botones para darle Aceptar o Cancelar*/}\n\t\t\t\t<View style = {genericStyles.down_buttons}>\n\n\t\t\t\t\t<View style = {{paddingRight: 25}}>\n\t\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\ttitle   = {p.allMessages[3]} // Mensaje: \"Cancelar\"\n\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\tonPress = {s.keyboardAvailable ? Keyboard.dismiss : this.refuseSettings}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\n\t\t\t\t\t<View style = {{paddingLeft: 25}}>\n\t\t\t\t\t\t<ButtonWithIcon\n\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\ttitle   = {p.allMessages[4]} /// Mensaje: \"Aceptar\"\n\t\t\t\t\t\t\ticon    = {{name: 'check'}}\n\t\t\t\t\t\t\tonPress = {s.keyboardAvailable ? Keyboard.dismiss : this.acceptSettings}\t\t\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla \nconst localStyles = StyleSheet.create({\n\n\t// Estilo de cada una de las dos filas de esta vista: la primera para ingresar el nombre de usuario, y la segunda para ingresar la contraseña\n\trow_instructions_textInput: {\n\t\tflex:           1,\n\t\tflexDirection:  'row',\n\t\tjustifyContent: 'center',\n\t\talignItems:     'center',\n\t\tpadding:        10,\n\t\tpaddingTop:     30,\n\t\tpaddingBottom:  10,\n\t},\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: Login_Texts[state.appPreferencesReducer.language],\n\t\tlocalDB:     state.userReducer.localDB,\n\t\tremoteDB:    state.userReducer.remoteDB,\n\t\tsyncHandler: state.userReducer.syncHandler,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchUser: (user_id) => dispatch(changeUser(user_id)),\n\t\tdispatchProfileImage: (image) => dispatch(changeUserProfileImage(image)),\n\t\tdispatchUserPrivileges: (privileges) => dispatch(changeUserPrivileges(privileges)),\n\t\tdispatchSyncHandler: (syncFunction) => dispatch(changeSyncHandler(syncFunction)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)"]},"metadata":{},"sourceType":"module"}