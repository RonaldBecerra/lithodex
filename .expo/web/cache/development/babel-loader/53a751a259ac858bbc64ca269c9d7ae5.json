{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\objectsOfStudy\\\\ObjectScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Button as ButtonWithIcon } from 'react-native-elements';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { connect } from 'react-redux';\nimport { changeLoadView, changeGammaRay_Extract, changeStackScreenPropsFunction, changeStratumComponentPermission } from \"../../redux/actions/popUpActions\";\nimport { ObjectScreen_Texts } from \"../../languages/screens/objectsOfStudy/ObjectScreen\";\nimport ViewShot, { captureRef } from 'react-native-view-shot';\nimport * as ExpoMediaLibrary from 'expo-media-library';\nimport * as ExpoFileSystem from 'expo-file-system';\nimport CameraRoll from \"@react-native-community/cameraroll\";\nimport * as Permissions from 'expo-permissions';\nimport * as D from \"../../constants/Dimensions\";\nimport { genericStyles, LIGHTGRAY_COLOR, DARK_GRAY_COLOR } from \"../../constants/genericStyles\";\nimport { OUTCROPS_DOCUMENT_ID, CORES_DOCUMENT_ID } from \"../../constants/appConstants\";\nimport * as Components from \"../../components\";\nimport * as Log from \"../../genericFunctions/logFunctions\";\nimport * as Database from \"../../genericFunctions/databaseFunctions\";\nimport * as auxiliarFunctions from \"../../genericFunctions/otherFunctions\";\nimport { createLayerListForShot, createGammaRayValuesProvisional, getStratumsIndexes, riseLayer, lowerLayer } from \"../../genericFunctions/plotFunctions\";\nimport _ from \"lodash\";\nvar UP_DOWN_BUTTONS_WIDTH = 80;\nvar NUMBER_VERTICAL_GR_SEGMENTS = 7;\nvar SPACES_TO_SHOW = 41.5;\nvar ADDITIONAL_SPACES_VERTICAL_RULE = 100;\n\nvar ObjectScreen = function (_Component) {\n  _inherits(ObjectScreen, _Component);\n\n  function ObjectScreen(props) {\n    var _this;\n\n    _classCallCheck(this, ObjectScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ObjectScreen).call(this, props));\n\n    _this.openInitLimitPreview = function () {\n      if (_this.props.enteringComponentEnabled) {\n        _this.props.dispatchEnteringPermission(false);\n\n        _this.setState({\n          initLimitPreviewVisible: true\n        });\n      }\n    };\n\n    _this.closeInitLimitPreview = function () {\n      _this.props.dispatchEnteringPermission(true);\n\n      _this.setState({\n        initLimitPreviewVisible: false,\n        maxCapturedHeight: [null, null]\n      });\n    };\n\n    _this.stablishInitLimit = function () {\n      var s = _this.state;\n      var p = _this.props;\n\n      if (s.maxCapturedHeight[0] == null) {\n        Alert.alert(p.allMessages[4], p.allMessages[5]);\n      } else if (s.maxCapturedHeight[0] > s.potentialMaxHeight[0] || s.maxCapturedHeight[0] < s.potentialMinHeight[0]) {\n        Alert.alert(p.allMessages[4], p.allMessages[6]);\n      } else {\n        _this.setState({\n          userStablishedInitLimit: true\n        }, function () {\n          _this.refs.verticalScrollView.scrollTo({\n            y: (s.potentialMaxHeight[0] - s.maxCapturedHeight[0]) * s.factor,\n            animated: false\n          });\n\n          _this.closeInitLimitPreview();\n        });\n      }\n    };\n\n    _this.openTakeShotPreview = function () {\n      if (_this.props.enteringComponentEnabled) {\n        _this.props.dispatchEnteringPermission(false);\n\n        var maxCapturedHeight = _.cloneDeep(_this.state.potentialMaxHeight);\n\n        var minCapturedHeight = _.cloneDeep(_this.state.potentialMinHeight);\n\n        _this.setState({\n          maxCapturedHeight: maxCapturedHeight,\n          minCapturedHeight: minCapturedHeight,\n          takeShotPreviewVisible: true\n        });\n      }\n    };\n\n    _this.finishTakingShot = function () {\n      _this.props.dispatchEnteringPermission(true);\n\n      _this.setState({\n        takingShot: false,\n        plotViewVisible: false,\n        takeShotPreviewVisible: false,\n        verticalRule_ForShot: null,\n        layerList_ForShot: null,\n        gammaRayValues_ForShot: {},\n        maxCapturedHeight: [null, null],\n        minCapturedHeight: [null, null]\n      });\n    };\n\n    _this.takeShot = function _callee2() {\n      var s, p, auxiliarTakeShot, limitsAreTheSame, object, _object;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              s = _this.state;\n              p = _this.props;\n\n              auxiliarTakeShot = function auxiliarTakeShot(p) {\n                _this.setState({\n                  loading: false\n                }, function () {\n                  _this.refs.viewShot.capture().then(function _callee(uri) {\n                    var _await$Permissions$as, status, asset;\n\n                    return _regeneratorRuntime.async(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA_ROLL));\n\n                          case 2:\n                            _await$Permissions$as = _context.sent;\n                            status = _await$Permissions$as.status;\n\n                            if (!(status == 'granted')) {\n                              _context.next = 13;\n                              break;\n                            }\n\n                            _context.next = 7;\n                            return _regeneratorRuntime.awrap(ExpoMediaLibrary.createAssetAsync(uri));\n\n                          case 7:\n                            asset = _context.sent;\n                            ExpoFileSystem.deleteAsync(uri);\n                            Alert.alert(p.allMessages[4], p.allMessages[7]);\n\n                            _this.finishTakingShot();\n\n                            _context.next = 15;\n                            break;\n\n                          case 13:\n                            Alert.alert(p.allMessages[4], p.allMessages[8]);\n\n                            _this.setState({\n                              takingShot: false\n                            });\n\n                          case 15:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    });\n                  }).catch(function (error) {\n                    console.error(error.toString());\n                  });\n                });\n              };\n\n              if (!(s.maxCapturedHeight[0] == null || s.minCapturedHeight[0] == null)) {\n                _context2.next = 7;\n                break;\n              }\n\n              Alert.alert(p.allMessages[4], p.allMessages[5]);\n              _context2.next = 42;\n              break;\n\n            case 7:\n              if (!(s.maxCapturedHeight[0] > s.potentialMaxHeight[0])) {\n                _context2.next = 11;\n                break;\n              }\n\n              Alert.alert(p.allMessages[4], p.allMessages[9]);\n              _context2.next = 42;\n              break;\n\n            case 11:\n              if (!(s.minCapturedHeight[0] < s.potentialMinHeight[0])) {\n                _context2.next = 15;\n                break;\n              }\n\n              Alert.alert(p.allMessages[4], p.allMessages[10]);\n              _context2.next = 42;\n              break;\n\n            case 15:\n              if (!(s.maxCapturedHeight[0] <= s.minCapturedHeight[0])) {\n                _context2.next = 19;\n                break;\n              }\n\n              Alert.alert(p.allMessages[4], p.allMessages[11]);\n              _context2.next = 42;\n              break;\n\n            case 19:\n              _this.setState({\n                loading: true,\n                takingShot: true,\n                plotViewVisible: true,\n                takeShotPreviewVisible: false\n              });\n\n              _context2.next = 22;\n              return _regeneratorRuntime.awrap(_this.loadObjectInfo(false));\n\n            case 22:\n              limitsAreTheSame = s.minCapturedHeight[0] == s.potentialMinHeight[0] && s.maxCapturedHeight[0] == s.potentialMaxHeight[0];\n\n              if (!limitsAreTheSame) {\n                _context2.next = 34;\n                break;\n              }\n\n              _context2.next = 26;\n              return _regeneratorRuntime.awrap({\n                verticalRule_ForShot: s.verticalRule,\n                layerList_ForShot: JSON.parse(JSON.stringify(_this.state.layerList))\n              });\n\n            case 26:\n              object = _context2.sent;\n\n              if (!s.gammaRayIsRendered) {\n                _context2.next = 31;\n                break;\n              }\n\n              _context2.next = 30;\n              return _regeneratorRuntime.awrap(JSON.parse(JSON.stringify(s.gammaRayValues)));\n\n            case 30:\n              object.gammaRayValues_ForShot = _context2.sent;\n\n            case 31:\n              _this.setState(object, function () {\n                auxiliarTakeShot(p);\n              });\n\n              _context2.next = 42;\n              break;\n\n            case 34:\n              _context2.next = 36;\n              return _regeneratorRuntime.awrap({\n                verticalRule_ForShot: _this.createVerticalRule(s.minCapturedHeight[0], s.maxCapturedHeight[0]),\n                layerList_ForShot: createLayerListForShot(s.minCapturedHeight[0], s.maxCapturedHeight[0], JSON.parse(JSON.stringify(_this.state.layerList)), s.unit, D.SIZE_OF_UNIT / s.scale[0])\n              });\n\n            case 36:\n              _object = _context2.sent;\n\n              if (!s.gammaRayIsRendered) {\n                _context2.next = 41;\n                break;\n              }\n\n              _context2.next = 40;\n              return _regeneratorRuntime.awrap(createGammaRayValuesProvisional(s.minCapturedHeight[0], s.maxCapturedHeight[0], JSON.parse(JSON.stringify(s.gammaRayValues)), s.unit));\n\n            case 40:\n              _object.gammaRayValues_ForShot = _context2.sent;\n\n            case 41:\n              _this.setState(_object, function () {\n                auxiliarTakeShot(p);\n              });\n\n            case 42:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.onChangeNumericValue = function _callee3(variableName, text) {\n      var result, object;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              object = {};\n\n              if (!auxiliarFunctions.isValidDecimalNumber(text)) {\n                _context3.next = 5;\n                break;\n              }\n\n              result = text != \"-\" ? [parseFloat(text), text] : [null, \"-\"];\n              _context3.next = 10;\n              break;\n\n            case 5:\n              if (text == \" \" || text == \"\") {} else {\n                Alert.alert(_this.props.allMessages[4], _this.props.allMessages[22]);\n              }\n\n              object[variableName] = [0, \"0\"];\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(_this.setState(object));\n\n            case 9:\n              result = [null, null];\n\n            case 10:\n              object[variableName] = result;\n\n              _this.setState(object);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    };\n\n    _this.editObjectInfo = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!_this.canNavigate()) {\n                _context4.next = 5;\n                break;\n              }\n\n              _this.props.dispatchEnteringPermission(false);\n\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(_this.loadObjectInfo(false));\n\n            case 4:\n              _this.props.navigation.navigate({\n                key: 'ObjectForm',\n                routeName: 'ObjectForm',\n                params: _objectSpread({}, _this.state, {\n                  returnToObjectScreen: true\n                })\n              });\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    };\n\n    _this.addNewStratum = function _callee5() {\n      var _this$state, _id, unit, layerList, scale, baseHeight, isCore, payload;\n\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!_this.canNavigate()) {\n                _context5.next = 7;\n                break;\n              }\n\n              _this.props.dispatchEnteringPermission(false);\n\n              _context5.next = 4;\n              return _regeneratorRuntime.awrap(_this.loadObjectInfo(false));\n\n            case 4:\n              _this$state = _this.state, _id = _this$state._id, unit = _this$state.unit, layerList = _this$state.layerList, scale = _this$state.scale, baseHeight = _this$state.baseHeight, isCore = _this$state.isCore;\n              payload = {\n                _id: _id,\n                unit: unit,\n                layerList: layerList,\n                scale: scale,\n                baseHeight: baseHeight,\n                isCore: isCore\n              };\n\n              _this.props.navigation.navigate({\n                key: 'ObjectStratumForm',\n                routeName: 'ObjectStratumForm',\n                params: payload\n              });\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    };\n\n    _this.update_StratumsRendered_VerticalRule = function _callee6() {\n      var s, verticalRule, _this$state2, minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered, _await$_this$getLayer, _this$state3, minHeightGammaRay_rendered, maxHeightGammaRay_rendered, minHeightForVerticalRule, maxHeightForVerticalRule;\n\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              s = _this.state;\n              _this$state2 = _this.state, minIndexStratums = _this$state2.minIndexStratums, maxIndexStratums = _this$state2.maxIndexStratums, minHeightStratums_rendered = _this$state2.minHeightStratums_rendered, maxHeightStratums_rendered = _this$state2.maxHeightStratums_rendered;\n              _context6.next = 4;\n              return _regeneratorRuntime.awrap(_this.getLayerList_Limits(minHeightStratums_rendered, maxHeightStratums_rendered));\n\n            case 4:\n              _await$_this$getLayer = _context6.sent;\n              minIndexStratums = _await$_this$getLayer.minIndexStratums;\n              maxIndexStratums = _await$_this$getLayer.maxIndexStratums;\n              minHeightStratums_rendered = _await$_this$getLayer.minHeightStratums_rendered;\n              maxHeightStratums_rendered = _await$_this$getLayer.maxHeightStratums_rendered;\n\n              if (s.isCore) {\n                _this$state3 = _this.state, minHeightGammaRay_rendered = _this$state3.minHeightGammaRay_rendered, maxHeightGammaRay_rendered = _this$state3.maxHeightGammaRay_rendered;\n                minHeightForVerticalRule = auxiliarFunctions.min(minHeightGammaRay_rendered, minHeightStratums_rendered);\n                maxHeightForVerticalRule = auxiliarFunctions.max(maxHeightGammaRay_rendered, maxHeightStratums_rendered);\n                verticalRule = _this.createVerticalRule(minHeightForVerticalRule, maxHeightForVerticalRule, s.potentialMaxHeight[0] - maxHeightForVerticalRule, minHeightForVerticalRule - s.potentialMinHeight[0]);\n              } else {\n                verticalRule = _this.createVerticalRule(minHeightStratums_rendered, maxHeightStratums_rendered, s.potentialMaxHeight[0] - maxHeightStratums_rendered, minHeightStratums_rendered - s.potentialMinHeight[0]);\n              }\n\n              _this.setState({\n                verticalRule: verticalRule,\n                minIndexStratums: minIndexStratums,\n                maxIndexStratums: maxIndexStratums,\n                minHeightStratums_rendered: minHeightStratums_rendered,\n                maxHeightStratums_rendered: maxHeightStratums_rendered\n              });\n\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    };\n\n    _this.getLayerList_Limits = function _callee7(bottom, top) {\n      var s, minHeightStratums_rendered, maxHeightStratums_rendered, indexesStratums, minIndexStratums, maxIndexStratums;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              s = _this.state;\n              minHeightStratums_rendered = maxHeightStratums_rendered = null;\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(getStratumsIndexes(bottom, top, JSON.parse(JSON.stringify(s.layerList)), s.unit, D.SIZE_OF_UNIT / s.scale[0]));\n\n            case 4:\n              indexesStratums = _context7.sent;\n              minIndexStratums = indexesStratums[0];\n              maxIndexStratums = indexesStratums[1];\n\n              if (minIndexStratums != null && maxIndexStratums != null) {\n                minHeightStratums_rendered = s.layerList[minIndexStratums].lowerLimit[s.unit][0];\n                maxHeightStratums_rendered = s.layerList[maxIndexStratums].upperLimit[s.unit][0];\n              }\n\n              return _context7.abrupt(\"return\", {\n                minIndexStratums: minIndexStratums,\n                maxIndexStratums: maxIndexStratums,\n                minHeightStratums_rendered: minHeightStratums_rendered,\n                maxHeightStratums_rendered: maxHeightStratums_rendered\n              });\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    };\n\n    _this.removeLastLayer = function () {\n      var s = _this.state;\n      var p = _this.props;\n\n      var remove = function remove(s, p) {\n        var keyToRemove;\n        var array = s.layerList;\n        s.numberLayers -= 1;\n        var absoluteMinHeightStratums, absoluteMaxHeightStratums, potentialMinHeightStratums, potentialMaxHeightStratums;\n        absoluteMinHeightStratums = absoluteMaxHeightStratums = potentialMinHeightStratums = potentialMaxHeightStratums = null;\n\n        if (s.isCore) {\n          keyToRemove = array[array.length - 1].key;\n          array.pop();\n\n          if (s.numberLayers != 0) {\n            absoluteMinHeightStratums = potentialMinHeightStratums = s.layerList[s.numberLayers - 1].lowerLimit[s.unit][0];\n          } else {\n            absoluteMinHeightStratums = potentialMinHeightStratums = s.baseHeight[s.unit][0];\n          }\n\n          var potentialMinHeight = auxiliarFunctions.repairNumber(auxiliarFunctions.min(potentialMinHeightStratums, s.potentialMinHeightGammaRay), 20);\n          var absoluteMinHeight = auxiliarFunctions.repairNumber(auxiliarFunctions.min(absoluteMinHeightStratums, s.absoluteMinHeightGammaRay), 20)[0];\n\n          _this.setState({\n            layerList: array,\n            absoluteMinHeight: absoluteMinHeight,\n            potentialMinHeight: potentialMinHeight,\n            potentialMinHeightStratums: potentialMinHeightStratums,\n            absoluteMinHeightStratums: absoluteMinHeightStratums\n          }, function () {\n            _this.update_StratumsRendered_VerticalRule();\n          });\n        } else {\n          keyToRemove = array[0].key;\n          array.shift();\n          potentialMaxHeight = s.numberLayers != 0 ? _.cloneDeep(s.layerList[0].upperLimit[s.unit]) : _.cloneDeep(s.potentialMinHeight);\n          absoluteMaxHeight = absoluteMaxHeightStratums = potentialMaxHeightStratums = potentialMaxHeight[0];\n\n          _this.setState({\n            layerList: array,\n            absoluteMaxHeight: absoluteMaxHeight,\n            absoluteMaxHeightStratums: absoluteMaxHeightStratums,\n            potentialMaxHeightStratums: potentialMaxHeightStratums,\n            potentialMaxHeight: potentialMaxHeight\n          }, function () {\n            _this.update_StratumsRendered_VerticalRule();\n          });\n        }\n\n        Database.saveLayerList(p.user_id, s._id, array, s.isCore, p.localDB, keyToRemove, 2);\n      };\n\n      if (s.numberLayers > 0 && s.stratumsAreAvailable) {\n        Alert.alert(p.allMessages[4], s.isCore ? p.allMessages[12] : p.allMessages[13], [{\n          text: p.allMessages[14],\n          onPress: function onPress() {\n            return remove(s, p);\n          }\n        }, {\n          text: p.allMessages[15]\n        }]);\n      }\n    };\n\n    _this.getGammaRayValues_Extract = function _callee8(topHeight) {\n      var s, minHeightGammaRay_rendered, maxHeightGammaRay_rendered, len_MinusOne;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              s = _this.state;\n              _context8.next = 3;\n              return _regeneratorRuntime.awrap(_this.props.dispatchGammaRay_Extract(createGammaRayValuesProvisional(topHeight - SPACES_TO_SHOW * s.scale[0], topHeight, JSON.parse(JSON.stringify(s.gammaRayValues)), s.unit)));\n\n            case 3:\n              minHeightGammaRay_rendered = maxHeightGammaRay_rendered = null;\n\n              if (_this.props.gammaRayValues_Extract.numberMeasurements > 0) {\n                len_MinusOne = _this.props.gammaRayValues_Extract.numberMeasurements - 1;\n                minHeightGammaRay_rendered = s.unit == 0 ? _this.props.gammaRayValues_Extract.xValuesMeters[len_MinusOne] : _this.props.gammaRayValues_Extract.xValuesFeet[len_MinusOne];\n                maxHeightGammaRay_rendered = s.unit == 0 ? _this.props.gammaRayValues_Extract.xValuesMeters[0] : _this.props.gammaRayValues_Extract.xValuesFeet[0];\n              }\n\n              return _context8.abrupt(\"return\", {\n                minHeightGammaRay_rendered: minHeightGammaRay_rendered,\n                maxHeightGammaRay_rendered: maxHeightGammaRay_rendered\n              });\n\n            case 6:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    };\n\n    _this.determine_LimitExceeded = function (_ref, kind) {\n      var layoutMeasurement = _ref.layoutMeasurement,\n          contentOffset = _ref.contentOffset,\n          contentSize = _ref.contentSize;\n      var s = _this.state;\n      var aF = auxiliarFunctions;\n      var top, bottom, previousTop, previousBottom;\n\n      if (s.isCore) {\n        top = aF.max(s.maxHeightGammaRay_rendered, s.maxHeightStratums_rendered);\n        bottom = aF.min(s.minHeightGammaRay_rendered, s.minHeightStratums_rendered);\n\n        if (s.maxHeightGammaRay_rendered != null && s.maxHeightStratums_rendered != null) {\n          if (s.maxHeightGammaRay_rendered < top) {\n            if (s.maxHeightGammaRay_rendered < s.potentialMaxHeightGammaRay) {\n              top = s.maxHeightGammaRay_rendered;\n            }\n          } else if (s.maxHeightStratums_rendered < top && s.maxHeightStratums_rendered < s.potentialMaxHeightStratums) {\n            top = s.maxHeightStratums_rendered;\n          }\n\n          if (s.minHeightGammaRay_rendered > bottom) {\n            if (s.minHeightGammaRay_rendered > s.potentialMinHeightGammaRay) {\n              bottom = s.potentialMinHeightGammaRay_rendered;\n            }\n          } else if (s.minHeightStratums_rendered > bottom && s.minHeightStratums_rendered > s.potentialMinHeightStratums) {\n            bottom = s.minHeightStratums_rendered;\n          }\n        }\n\n        previousTop = top;\n        previousBottom = bottom;\n      } else {\n        top = previousTop = s.maxHeightStratums_rendered;\n        bottom = previousBottom = s.minHeightStratums_rendered;\n      }\n\n      var currentLocation = layoutMeasurement.height + contentOffset.y;\n      var limitWasExceeded = false;\n      var nonContiguous = false;\n\n      if (currentLocation - 300 <= (s.potentialMaxHeight[0] - top) * s.factor) {\n        bottom = aF.max(top - 15 * s.scale[0], s.potentialMinHeight[0]);\n        top = aF.min(bottom + SPACES_TO_SHOW * s.scale[0], s.potentialMaxHeight[0]);\n\n        if ((s.potentialMaxHeight[0] - top) * s.factor > contentOffset.y - 5 && (kind == 1 || s.userStablishedInitLimit)) {\n          nonContiguous = limitWasExceeded = true;\n        } else {\n          if (_this.state.inmediateTopLoadEnabled) {\n            _this.setState({\n              inmediateTopLoadEnabled: false\n            });\n\n            limitWasExceeded = true;\n          }\n        }\n      } else if (currentLocation + 300 >= (s.potentialMaxHeight[0] - bottom) * s.factor) {\n          top = aF.min(bottom + 15 * s.scale[0], s.potentialMaxHeight[0]);\n          bottom = aF.max(top - SPACES_TO_SHOW * s.scale[0], s.potentialMinHeight[0]);\n\n          if ((s.potentialMaxHeight[0] - bottom) * s.factor < contentOffset.y - 5 && (kind == 1 || s.userStablishedInitLimit)) {\n            nonContiguous = limitWasExceeded = true;\n          } else {\n            if (_this.state.inmediateBottomLoadEnabled) {\n              _this.setState({\n                inmediateBottomLoadEnabled: false\n              });\n\n              limitWasExceeded = true;\n            }\n          }\n        }\n\n      _this.setState({\n        userStablishedInitLimit: false\n      });\n\n      if (limitWasExceeded) {\n        if (nonContiguous) {\n          top = aF.min(s.potentialMaxHeight[0] - (contentOffset.y - 5) / s.factor + SPACES_TO_SHOW / 2 * s.scale[0], s.potentialMaxHeight[0]);\n          bottom = aF.max(top - SPACES_TO_SHOW * s.scale[0], s.potentialMinHeight[0]);\n        }\n\n        if (top != previousTop && bottom != previousBottom) {\n          _this.loadMoreData(bottom, top);\n        }\n      }\n    };\n\n    _this.loadMoreData = function _callee9(bottom, top) {\n      var s, aF, _this$state4, minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered, minHeightForVerticalRule, maxHeightForVerticalRule, _await$_this$getLayer2, _this$state5, minHeightGammaRay_rendered, maxHeightGammaRay_rendered, _await$_this$getGamma;\n\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              s = _this.state;\n              aF = auxiliarFunctions;\n              _this$state4 = _this.state, minIndexStratums = _this$state4.minIndexStratums, maxIndexStratums = _this$state4.maxIndexStratums, minHeightStratums_rendered = _this$state4.minHeightStratums_rendered, maxHeightStratums_rendered = _this$state4.maxHeightStratums_rendered;\n\n              if (!s.stratumsAreAvailable) {\n                _context9.next = 11;\n                break;\n              }\n\n              _context9.next = 6;\n              return _regeneratorRuntime.awrap(_this.getLayerList_Limits(bottom, top));\n\n            case 6:\n              _await$_this$getLayer2 = _context9.sent;\n              minIndexStratums = _await$_this$getLayer2.minIndexStratums;\n              maxIndexStratums = _await$_this$getLayer2.maxIndexStratums;\n              minHeightStratums_rendered = _await$_this$getLayer2.minHeightStratums_rendered;\n              maxHeightStratums_rendered = _await$_this$getLayer2.maxHeightStratums_rendered;\n\n            case 11:\n              if (!s.isCore) {\n                _context9.next = 24;\n                break;\n              }\n\n              _this$state5 = _this.state, minHeightGammaRay_rendered = _this$state5.minHeightGammaRay_rendered, maxHeightGammaRay_rendered = _this$state5.maxHeightGammaRay_rendered;\n\n              if (!s.gammaRayIsRendered) {\n                _context9.next = 19;\n                break;\n              }\n\n              _context9.next = 16;\n              return _regeneratorRuntime.awrap(_this.getGammaRayValues_Extract(top));\n\n            case 16:\n              _await$_this$getGamma = _context9.sent;\n              minHeightGammaRay_rendered = _await$_this$getGamma.minHeightGammaRay_rendered;\n              maxHeightGammaRay_rendered = _await$_this$getGamma.maxHeightGammaRay_rendered;\n\n            case 19:\n              minHeightForVerticalRule = aF.max(aF.min(minHeightGammaRay_rendered, minHeightStratums_rendered) - s.additionalHeightVerticalRule, s.potentialMinHeight[0]);\n              maxHeightForVerticalRule = aF.min(aF.max(maxHeightGammaRay_rendered, maxHeightStratums_rendered) + s.additionalHeightVerticalRule, s.potentialMaxHeight[0]);\n\n              _this.setState({\n                minHeightGammaRay_rendered: minHeightGammaRay_rendered,\n                maxHeightGammaRay_rendered: maxHeightGammaRay_rendered\n              });\n\n              _context9.next = 26;\n              break;\n\n            case 24:\n              minHeightForVerticalRule = aF.max(minHeightStratums_rendered - s.additionalHeightVerticalRule, s.potentialMinHeight[0]);\n              maxHeightForVerticalRule = aF.min(maxHeightStratums_rendered + s.additionalHeightVerticalRule, s.potentialMaxHeight[0]);\n\n            case 26:\n              _this.setState({\n                verticalRule: _this.createVerticalRule(minHeightForVerticalRule, maxHeightForVerticalRule, s.potentialMaxHeight[0] - maxHeightForVerticalRule, minHeightForVerticalRule - s.potentialMinHeight[0]),\n                minIndexStratums: minIndexStratums,\n                maxIndexStratums: maxIndexStratums,\n                minHeightStratums_rendered: minHeightStratums_rendered,\n                maxHeightStratums_rendered: maxHeightStratums_rendered,\n                inmediateBottomLoadEnabled: true,\n                inmediateTopLoadEnabled: true\n              });\n\n            case 27:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      });\n    };\n\n    _this.keyboardDidShow = _this.keyboardDidShow.bind(_assertThisInitialized(_this));\n    _this.keyboardDidHide = _this.keyboardDidHide.bind(_assertThisInitialized(_this));\n\n    if (!_this.props.navigation.getParam('isCore')) {\n      SPACES_TO_SHOW = 100;\n    }\n\n    _this.state = _objectSpread({}, _this.props.navigation.state.params, {\n      loading: true,\n      loadFunctionOpened: true,\n      stratumsAreAvailable: false,\n      keyboardAvailable: false,\n      unitMessage: _this.props.navigation.getParam('unit') == 0 ? _this.props.allMessages[35] : _this.props.allMessages[36],\n      verticalRule: null,\n      gammaRaySuperiorLabels: null,\n      initLimitPreviewVisible: false,\n      userStablishedInitLimit: false,\n      imageFormat: \"jpg\",\n      takingShot: false,\n      plotViewVisible: false,\n      takeShotPreviewVisible: false,\n      minCapturedHeight: [null, null],\n      maxCapturedHeight: [null, null],\n      layerList_ForShot: null,\n      gammaRayValues_ForShot: {},\n      verticalRule_ForShot: null\n    });\n    return _this;\n  }\n\n  _createClass(ObjectScreen, [{\n    key: \"loadObjectInfo\",\n    value: function loadObjectInfo() {\n      var _this2 = this;\n\n      var setRenderValues,\n          _args11 = arguments;\n      return _regeneratorRuntime.async(function loadObjectInfo$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              setRenderValues = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : true;\n              _context11.next = 3;\n              return _regeneratorRuntime.awrap(this.props.localDB.get(this.state.isCore ? CORES_DOCUMENT_ID : OUTCROPS_DOCUMENT_ID).then(function _callee10(document) {\n                var s, aF, verticalRule, minHeightForVerticalRule, factor, additionalHeightVerticalRule, stratumsAreAvailable, numberLayers, minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered, absoluteMinHeightStratums, absoluteMaxHeightStratums, potentialMinHeightStratums, potentialMaxHeightStratums, _potentialMaxHeight, potentialMinHeight, _absoluteMaxHeight, absoluteMinHeight, thereIsGammaRay, gammaRayIsRendered, absoluteMinHeightGammaRay, absoluteMaxHeightGammaRay, potentialMinHeightGammaRay, potentialMaxHeightGammaRay, minHeightGammaRay_rendered, maxHeightGammaRay_rendered, len_MinusOne, top, _await$_this2$getGamm, bottom, _await$_this2$getLaye, _bottom, _await$_this2$getLaye2;\n\n                return _regeneratorRuntime.async(function _callee10$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        _this2.setState(_objectSpread({}, document.objects[_this2.state._id]));\n\n                        if (!setRenderValues) {\n                          _context10.next = 72;\n                          break;\n                        }\n\n                        s = _this2.state;\n                        aF = auxiliarFunctions;\n                        verticalRule = null;\n                        minHeightForVerticalRule = null;\n                        factor = D.SIZE_OF_UNIT / s.scale[0];\n                        additionalHeightVerticalRule = ADDITIONAL_SPACES_VERTICAL_RULE * s.scale[0];\n                        _context10.next = 10;\n                        return _regeneratorRuntime.awrap(_this2.setState({\n                          factor: factor,\n                          additionalHeightVerticalRule: additionalHeightVerticalRule\n                        }));\n\n                      case 10:\n                        stratumsAreAvailable = s.showInfo || s.showLithology || s.showStructure || s.showFossils || s.showPictures || s.showNotes;\n                        numberLayers = s.layerList.length;\n                        absoluteMinHeightStratums = absoluteMaxHeightStratums = potentialMinHeightStratums = potentialMaxHeightStratums = minIndexStratums = maxIndexStratums = minHeightStratums_rendered = maxHeightStratums_rendered = null;\n                        _potentialMaxHeight = [null, null];\n                        potentialMinHeight = [null, null];\n                        _absoluteMaxHeight = null;\n                        absoluteMinHeight = null;\n\n                        if (!s.isCore) {\n                          _context10.next = 56;\n                          break;\n                        }\n\n                        _potentialMaxHeight = _.cloneDeep(s.baseHeight[s.unit]);\n                        _absoluteMaxHeight = _potentialMaxHeight[0];\n                        thereIsGammaRay = s.gammaRayValues.hasOwnProperty('xValuesMeters') && s.gammaRayValues.xValuesMeters.length > 0;\n                        gammaRayIsRendered = s.showGammaRay && thereIsGammaRay;\n                        absoluteMinHeightGammaRay = absoluteMaxHeightGammaRay = potentialMinHeightGammaRay = potentialMaxHeightGammaRay = minHeightGammaRay_rendered = maxHeightGammaRay_rendered = null;\n\n                        if (thereIsGammaRay) {\n                          len_MinusOne = s.gammaRayValues.numberMeasurements - 1;\n                          absoluteMinHeightGammaRay = s.unit == 0 ? s.gammaRayValues.xValuesMeters[len_MinusOne] : s.gammaRayValues.xValuesFeet[len_MinusOne];\n                          absoluteMaxHeightGammaRay = s.unit == 0 ? s.gammaRayValues.xValuesMeters[0] : s.gammaRayValues.xValuesFeet[0];\n                        }\n\n                        if (!gammaRayIsRendered) {\n                          _context10.next = 34;\n                          break;\n                        }\n\n                        potentialMinHeightGammaRay = absoluteMinHeightGammaRay;\n                        potentialMaxHeightGammaRay = absoluteMaxHeightGammaRay;\n\n                        _this2.createGammaRaySuperiorLabels();\n\n                        top = s.unit == 0 ? s.gammaRayValues.xValuesMeters[0] : s.gammaRayValues.xValuesFeet[0];\n                        _context10.next = 31;\n                        return _regeneratorRuntime.awrap(_this2.getGammaRayValues_Extract(top));\n\n                      case 31:\n                        _await$_this2$getGamm = _context10.sent;\n                        minHeightGammaRay_rendered = _await$_this2$getGamm.minHeightGammaRay_rendered;\n                        maxHeightGammaRay_rendered = _await$_this2$getGamm.maxHeightGammaRay_rendered;\n\n                      case 34:\n                        if (!(numberLayers != 0)) {\n                          _context10.next = 48;\n                          break;\n                        }\n\n                        absoluteMinHeightStratums = s.layerList[numberLayers - 1].lowerLimit[s.unit][0];\n                        absoluteMaxHeightStratums = s.layerList[0].upperLimit[s.unit][0];\n\n                        if (!stratumsAreAvailable) {\n                          _context10.next = 48;\n                          break;\n                        }\n\n                        potentialMinHeightStratums = absoluteMinHeightStratums;\n                        potentialMaxHeightStratums = absoluteMaxHeightStratums;\n                        bottom = gammaRayIsRendered ? minHeightGammaRay_rendered : _potentialMaxHeight[0] - SPACES_TO_SHOW * s.scale[0];\n                        _context10.next = 43;\n                        return _regeneratorRuntime.awrap(_this2.getLayerList_Limits(bottom, _potentialMaxHeight[0]));\n\n                      case 43:\n                        _await$_this2$getLaye = _context10.sent;\n                        minIndexStratums = _await$_this2$getLaye.minIndexStratums;\n                        maxIndexStratums = _await$_this2$getLaye.maxIndexStratums;\n                        minHeightStratums_rendered = _await$_this2$getLaye.minHeightStratums_rendered;\n                        maxHeightStratums_rendered = _await$_this2$getLaye.maxHeightStratums_rendered;\n\n                      case 48:\n                        absoluteMinHeight = aF.repairNumber(aF.min(absoluteMinHeightStratums, absoluteMinHeightGammaRay), 20)[0];\n                        potentialMinHeight = aF.repairNumber(aF.min(potentialMinHeightStratums, potentialMinHeightGammaRay), 20);\n\n                        if (potentialMinHeight[0] == null) {\n                          potentialMinHeight = _.cloneDeep(_potentialMaxHeight);\n                        }\n\n                        minHeightForVerticalRule = aF.max(aF.min(minHeightStratums_rendered, minHeightGammaRay_rendered) - additionalHeightVerticalRule, potentialMinHeight[0]);\n                        verticalRule = _this2.createVerticalRule(minHeightForVerticalRule, _absoluteMaxHeight, 0, minHeightForVerticalRule - potentialMinHeight[0]);\n\n                        _this2.setState({\n                          gammaRayIsRendered: gammaRayIsRendered,\n                          absoluteMinHeightGammaRay: absoluteMinHeightGammaRay,\n                          absoluteMaxHeightGammaRay: absoluteMaxHeightGammaRay,\n                          potentialMinHeightGammaRay: potentialMinHeightGammaRay,\n                          potentialMaxHeightGammaRay: potentialMaxHeightGammaRay,\n                          minHeightGammaRay_rendered: minHeightGammaRay_rendered,\n                          maxHeightGammaRay_rendered: maxHeightGammaRay_rendered\n                        });\n\n                        _context10.next = 71;\n                        break;\n\n                      case 56:\n                        potentialMinHeight = _.cloneDeep(s.baseHeight[s.unit]);\n                        _potentialMaxHeight = numberLayers > 0 ? _.cloneDeep(s.layerList[0].upperLimit[s.unit]) : _.cloneDeep(potentialMinHeight);\n\n                        if (!(numberLayers != 0 && stratumsAreAvailable)) {\n                          _context10.next = 71;\n                          break;\n                        }\n\n                        absoluteMinHeight = potentialMinHeight[0];\n                        _absoluteMaxHeight = _potentialMaxHeight[0];\n                        _bottom = _absoluteMaxHeight - SPACES_TO_SHOW * s.scale[0];\n                        _context10.next = 64;\n                        return _regeneratorRuntime.awrap(_this2.getLayerList_Limits(_bottom, _absoluteMaxHeight));\n\n                      case 64:\n                        _await$_this2$getLaye2 = _context10.sent;\n                        minIndexStratums = _await$_this2$getLaye2.minIndexStratums;\n                        maxIndexStratums = _await$_this2$getLaye2.maxIndexStratums;\n                        minHeightStratums_rendered = _await$_this2$getLaye2.minHeightStratums_rendered;\n                        maxHeightStratums_rendered = _await$_this2$getLaye2.maxHeightStratums_rendered;\n                        minHeightForVerticalRule = aF.max(minHeightStratums_rendered - additionalHeightVerticalRule, potentialMinHeight[0]);\n                        verticalRule = _this2.createVerticalRule(minHeightForVerticalRule, _absoluteMaxHeight, 0, minHeightForVerticalRule - absoluteMinHeight);\n\n                      case 71:\n                        _this2.setState({\n                          verticalRule: verticalRule,\n                          absoluteMaxHeight: _absoluteMaxHeight,\n                          absoluteMinHeight: absoluteMinHeight,\n                          potentialMaxHeight: _potentialMaxHeight,\n                          potentialMinHeight: potentialMinHeight,\n                          stratumsAreAvailable: stratumsAreAvailable,\n                          numberLayers: numberLayers,\n                          minIndexStratums: minIndexStratums,\n                          maxIndexStratums: maxIndexStratums,\n                          minHeightStratums_rendered: minHeightStratums_rendered,\n                          maxHeightStratums_rendered: maxHeightStratums_rendered,\n                          absoluteMinHeightStratums: absoluteMinHeightStratums,\n                          absoluteMaxHeightStratums: absoluteMaxHeightStratums,\n                          potentialMinHeightStratums: potentialMinHeightStratums,\n                          potentialMaxHeightStratums: potentialMaxHeightStratums,\n                          inmediateBottomLoadEnabled: true,\n                          inmediateTopLoadEnabled: false,\n                          unitMessage: s.unit == 0 ? _this2.props.allMessages[35] : _this2.props.allMessages[36],\n                          loading: false\n                        });\n\n                      case 72:\n                        _context10.next = 74;\n                        return _regeneratorRuntime.awrap(_this2.props.dispatchChangeLoadView(false));\n\n                      case 74:\n                        _this2.props.dispatchStackScreenPropsFunction(_this2.openInitLimitPreview);\n\n                        _this2.setState({\n                          loadFunctionOpened: true\n                        });\n\n                      case 76:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n      this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n      Log.log_action(10, this.props.user_id, this.state.isCore, this.state._id);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidShowListener.remove();\n      this.keyboardDidHideListener.remove();\n      this.props.dispatchGammaRay_Extract({});\n      this.props.dispatchChangeLoadView(false);\n      this.props.dispatchStackScreenPropsFunction(function () {});\n    }\n  }, {\n    key: \"canNavigate\",\n    value: function canNavigate() {\n      return !(this.state.plotViewVisible || this.state.takeShotPreviewVisible) && this.props.enteringComponentEnabled;\n    }\n  }, {\n    key: \"keyboardDidShow\",\n    value: function keyboardDidShow() {\n      this.setState({\n        keyboardAvailable: true\n      });\n    }\n  }, {\n    key: \"keyboardDidHide\",\n    value: function keyboardDidHide() {\n      this.setState({\n        keyboardAvailable: false\n      });\n    }\n  }, {\n    key: \"riseLayerPosition\",\n    value: function riseLayerPosition(layer, i) {\n      var _this3 = this;\n\n      if (i > 0) {\n        var li = riseLayer(this.state.layerList, layer, i);\n        this.setState({\n          layerList: li\n        }, function () {\n          _this3.update_StratumsRendered_VerticalRule();\n        });\n        Database.saveLayerList(this.props.user_id, this.state._id, li, this.state.isCore, this.props.localDB);\n      }\n    }\n  }, {\n    key: \"lowerLayerPosition\",\n    value: function lowerLayerPosition(layer, i) {\n      var _this4 = this;\n\n      if (i < this.state.numberLayers - 1) {\n        var li = lowerLayer(this.state.layerList, layer, i);\n        this.setState({\n          layerList: li\n        }, function () {\n          _this4.update_StratumsRendered_VerticalRule();\n        });\n        Database.saveLayerList(this.props.user_id, this.state._id, li, this.state.isCore, this.props.localDB);\n      }\n    }\n  }, {\n    key: \"createVerticalRule\",\n    value: function createVerticalRule(potentialMinHeight, potentialMaxHeight) {\n      var superiorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var inferiorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var s = this.state;\n      var totalHeight = 0;\n\n      if (potentialMinHeight != null && potentialMaxHeight != null) {\n        totalHeight = (potentialMaxHeight - potentialMinHeight) * s.factor;\n      }\n\n      var added = s.showCarbonatesRule ? 0 : s.isCore ? 5 : 0;\n      superiorSpace = superiorSpace == null ? 0 : superiorSpace * s.factor;\n      inferiorSpace = inferiorSpace == null ? added : inferiorSpace * s.factor + added;\n      var integer = parseInt(totalHeight / 65);\n      var numberOfDivisions = totalHeight != 0 ? integer + 1 : 0;\n      var lastIndex, difference;\n      var array = [];\n      var ruleView;\n\n      if (s.isCore) {\n        for (i = 0; i < numberOfDivisions; i++) {\n          array.push({\n            value: parseFloat(-1 * s.scale[0] * parseFloat(i) + potentialMaxHeight).toFixed(2)\n          });\n        }\n\n        lastIndex = array.length - 1;\n        ruleView = React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 665\n          }\n        }, array.map(function (item, i) {\n          return React.createElement(View, {\n            style: {\n              flexDirection: 'row',\n              justifyContent: 'flex-end'\n            },\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 667\n            }\n          }, React.createElement(View, {\n            style: {\n              height: item.value != potentialMaxHeight ? 45 : 10,\n              paddingRight: 5,\n              flexDirection: 'column',\n              justifyContent: 'flex-start'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 668\n            }\n          }, React.createElement(Text, {\n            style: {\n              fontSize: 12\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 669\n            }\n          }, item.value, s.unit == 0 ? \"m\" : \"ft\")), React.createElement(View, {\n            style: {\n              borderTopColor: 'black',\n              borderTopWidth: 1,\n              flexDirection: 'row',\n              width: 10,\n              paddingTop: i == lastIndex ? 15 : D.SIZE_OF_UNIT - 1\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 671\n            }\n          }));\n        }));\n      } else {\n        difference = totalHeight - integer * 65;\n\n        for (i = 0; i < numberOfDivisions; i++) {\n          array.unshift({\n            value: parseFloat(s.scale[0] * parseFloat(i) + potentialMinHeight).toFixed(2)\n          });\n        }\n\n        lastIndex = array.length - 1;\n        ruleView = React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687\n          }\n        }, difference > 0 && React.createElement(View, {\n          style: {\n            paddingTop: difference\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 689\n          }\n        }), array.map(function (item, i) {\n          return React.createElement(View, {\n            style: {\n              flexDirection: 'row',\n              justifyContent: 'flex-end'\n            },\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 693\n            }\n          }, React.createElement(View, {\n            style: {\n              height: item.value != potentialMinHeight ? 45 : 10,\n              paddingRight: 5,\n              flexDirection: 'column',\n              justifyContent: 'flex-start'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 694\n            }\n          }, React.createElement(Text, {\n            style: {\n              fontSize: 12\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 695\n            }\n          }, item.value, s.unit == 0 ? \"m\" : \"ft\")), React.createElement(View, {\n            style: {\n              borderTopColor: 'black',\n              borderTopWidth: 1,\n              flexDirection: 'row',\n              width: 10,\n              paddingTop: i == lastIndex ? 25 : D.SIZE_OF_UNIT - 1\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 697\n            }\n          }));\n        }));\n      }\n\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 706\n        }\n      }, React.createElement(View, {\n        style: {\n          height: superiorSpace\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708\n        }\n      }), React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709\n        }\n      }, ruleView, React.createElement(View, {\n        style: {\n          height: totalHeight + 1,\n          flexDirection: 'column',\n          borderWidth: 0.5,\n          borderColor: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712\n        }\n      })), React.createElement(View, {\n        style: {\n          height: inferiorSpace\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716\n        }\n      }));\n    }\n  }, {\n    key: \"createGammaRaySuperiorLabels\",\n    value: function createGammaRaySuperiorLabels() {\n      var s = this.state;\n\n      if (s.gammaRayValues && s.gammaRayValues.hasOwnProperty('yValues')) {\n        var separation = 3 * (D.GAMMA_RAY_WIDTH + 40) / (4 * NUMBER_VERTICAL_GR_SEGMENTS);\n        var array = [];\n        var scaler = s.gammaRayValues.maxYValue - s.gammaRayValues.minYValue || 1;\n        var div = scaler / NUMBER_VERTICAL_GR_SEGMENTS;\n\n        for (i = 0; i < NUMBER_VERTICAL_GR_SEGMENTS + 1; i++) {\n          array.push((div * i + s.gammaRayValues.minYValue).toFixed(2));\n        }\n\n        var returnedView = React.createElement(View, {\n          style: {\n            flexDirection: 'column',\n            height: 40\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 740\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 741\n          }\n        }, array.map(function (item, i) {\n          return React.createElement(View, {\n            style: {\n              flexDirection: 'column',\n              justifyContent: 'flex-end'\n            },\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 743\n            }\n          }, React.createElement(View, {\n            style: {\n              width: separation,\n              height: 40,\n              flexDirection: 'row',\n              justifyContent: 'flex-start',\n              alignItems: 'flex-start',\n              paddingTop: 12\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 745\n            }\n          }, React.createElement(Text, {\n            style: {\n              fontSize: 10,\n              opacity: 0.8,\n              transform: [{\n                rotate: \"90deg\"\n              }]\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 755\n            }\n          }, item)));\n        })));\n        this.setState({\n          gammaRaySuperiorLabels: returnedView\n        });\n      }\n    }\n  }, {\n    key: \"objectInformationHeader\",\n    value: function objectInformationHeader() {\n      var _this5 = this;\n\n      var takingShot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var s = this.state;\n      var p = this.props;\n      var completeShot = false;\n\n      if (takingShot) {\n        var minLimitMatches = this.state.minCapturedHeight[0] == s.absoluteMinHeight;\n        var maxLimitMatches = this.state.maxCapturedHeight[0] == s.absoluteMaxHeight;\n        completeShot = minLimitMatches && maxLimitMatches;\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806\n        }\n      }, !takingShot && React.createElement(View, {\n        style: localStyles.objectInfo_header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809\n        }\n      }, React.createElement(View, {\n        style: localStyles.objectInfo_header_text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: 'bold',\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812\n        }\n      }, s.name), React.createElement(Text, {\n        style: {\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815\n        }\n      }, p.allMessages[16], \": 1:\", s.scale[0]), React.createElement(Text, {\n        style: {\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817\n        }\n      }, p.allMessages[17], \": \", s.unit == 0 ? s.baseHeight[0][0] + \" m\" : s.baseHeight[1][0] + \" ft\")), s.stratumsAreAvailable && React.createElement(View, {\n        style: {\n          flex: 0.3,\n          padding: 10,\n          width: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821\n        }\n      }, React.createElement(ButtonNoIcon, {\n        title: \"+\",\n        onPress: function onPress() {\n          return _this5.addNewStratum();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 822\n        }\n      })), s.stratumsAreAvailable && React.createElement(View, {\n        style: {\n          flex: 0.3,\n          padding: 10,\n          width: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826\n        }\n      }, React.createElement(ButtonNoIcon, {\n        title: \"-\",\n        onPress: this.removeLastLayer,\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827\n        }\n      }))), takingShot && React.createElement(View, {\n        style: _objectSpread({}, localStyles.objectInfo_header, {\n          height: 75,\n          paddingTop: 15\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 835\n        }\n      }, React.createElement(View, {\n        style: _objectSpread({}, localStyles.objectInfo_header_text, {\n          alignItems: 'center'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontWeight: 'bold',\n          fontSize: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840\n        }\n      }, s.isCore ? p.allMessages[2] : p.allMessages[3], \" \", s.name), s.locationInWords != null && s.locationInWords != \"\" && s.locationInWords != \" \" && React.createElement(Text, {\n        style: {\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        }\n      }, p.allMessages[18], \": \", s.locationInWords), React.createElement(View, {\n        style: {\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850\n        }\n      }, \"(\", completeShot ? p.allMessages[19] : p.allMessages[20], \")\")), React.createElement(Text, {\n        style: {\n          fontSize: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        }\n      }, p.allMessages[16], \": 1:\", s.scale[0]))));\n    }\n  }, {\n    key: \"graphicsColumnHeader\",\n    value: function graphicsColumnHeader(space) {\n      var takingShot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var s = this.state;\n      var p = this.props;\n      var conditionGammaRay = false;\n\n      if (s.showGammaRay) {\n        var gammaRayValues = takingShot ? this.state.gammaRayValues_ForShot : s.gammaRayValues;\n      }\n\n      function header_aux(headerWidth, message) {\n        return React.createElement(View, {\n          style: _objectSpread({}, localStyles.field_section, {\n            width: headerWidth\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 876\n          }\n        }, React.createElement(Text, {\n          style: {\n            fontWeight: 'bold'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 877\n          }\n        }, message));\n      }\n\n      if (!s.isCore || !s.showGammaRay || s.minHeightGammaRay == null || gammaRayValues) {\n        if (s.showGammaRay) {\n          conditionGammaRay = gammaRayValues.hasOwnProperty('xValuesMeters') && gammaRayValues.xValuesMeters.length > 0;\n\n          if (takingShot && conditionGammaRay) {\n            var maxHeightGammaRay = s.unit == 0 ? gammaRayValues.xValuesMeters[0] : gammaRayValues.xValuesFeet[0];\n\n            if ((this.state.maxCapturedHeight[0] - maxHeightGammaRay) * s.factor > 40) {\n              conditionGammaRay = false;\n            }\n          }\n        }\n\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 898\n          }\n        }, React.createElement(View, {\n          style: _objectSpread({}, localStyles.graphicColumn_header, {\n            paddingLeft: space\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 900\n          }\n        }, s.showGammaRay && header_aux(D.GAMMA_RAY_WIDTH, p.allMessages[21]), s.showInfo && header_aux(D.STRATUM_INFORMATION_WIDTH, p.allMessages[22]), s.showLithology && header_aux(D.LITHOLOGY_PICKER_WIDTH, p.allMessages[23]), s.showStructure && header_aux(D.STRUCTURE_PICKER_WIDTH, p.allMessages[24]), s.showFossils && header_aux(D.FOSSIL_PICKER_WIDTH, p.allMessages[25]), s.showPictures && header_aux(D.IMAGE_PICKER_WIDTH, p.allMessages[26]), s.showNotes && header_aux(D.NOTE_WRITER_WIDTH, p.allMessages[27])), React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            paddingLeft: space\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 925\n          }\n        }, s.isCore && s.showGammaRay && React.createElement(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 928\n          }\n        }, React.createElement(View, {\n          style: {\n            height: conditionGammaRay ? 35 : 25,\n            paddingLeft: D.GAMMA_RAY_WIDTH - conditionGammaRay * (3 * (D.GAMMA_RAY_WIDTH + 40) / 4 + 16)\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 929\n          }\n        }, !takingShot && s.gammaRaySuperiorLabels, takingShot && conditionGammaRay && this.state.gammaRaySuperiorLabels), React.createElement(View, {\n          style: {\n            height: 2\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 945\n          }\n        })), s.showLithology && s.showNoCarbonatesRule && React.createElement(View, {\n          style: {\n            paddingLeft: s.showInfo * D.STRATUM_INFORMATION_WIDTH + 50 - (s.isCore && s.showGammaRay && conditionGammaRay) * (D.GAMMA_RAY_WIDTH - 3 * (D.GAMMA_RAY_WIDTH + 40) / 4 - 16 + (D.GAMMA_RAY_WIDTH * (3 / 4 + 3 / (4 * NUMBER_VERTICAL_GR_SEGMENTS) - 1) + 30 * (1 + 1 / NUMBER_VERTICAL_GR_SEGMENTS)))\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 952\n          }\n        }, s.showGammaRay && conditionGammaRay && React.createElement(View, {\n          style: {\n            height: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 969\n          }\n        }), React.createElement(p.noCarbonatesRule, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 971\n          }\n        }))));\n      }\n    }\n  }, {\n    key: \"renderStratums\",\n    value: function renderStratums() {\n      var _this6 = this;\n\n      var takingShot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var state = this.state;\n      var layerList = takingShot ? this.state.layerList_ForShot : this.state.layerList;\n\n      var buttonMoveStratum = function buttonMoveStratum(rise, buttonSize, item, i) {\n        return React.createElement(View, {\n          style: {\n            alignItems: 'center',\n            justifyContent: 'center',\n            paddingRight: rise ? 8 : 0,\n            paddingLeft: rise ? 0 : 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 989\n          }\n        }, React.createElement(ButtonWithIcon, {\n          onPress: rise ? function () {\n            return _this6.riseLayerPosition(item, i);\n          } : function () {\n            return _this6.lowerLayerPosition(item, i);\n          },\n          type: \"outline\",\n          icon: React.createElement(Icon, {\n            name: rise ? \"arrow-up\" : \"arrow-down\",\n            size: buttonSize,\n            color: \"black\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 995\n            }\n          }),\n          raised: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 990\n          }\n        }));\n      };\n\n      if (layerList) {\n        return layerList.map(function (item, i) {\n          return React.createElement(View, {\n            key: item.key + '_row',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1005\n            }\n          }, state.maxIndexStratums <= i && i <= state.minIndexStratums && React.createElement(View, {\n            style: localStyles.container_row,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1007\n            }\n          }, (!state.isCore || !state.showGammaRay) && !takingShot && React.createElement(View, {\n            style: {\n              width: UP_DOWN_BUTTONS_WIDTH,\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'center',\n              height: item.shownHeight[state.unit]\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1012\n            }\n          }, item.shownHeight[state.unit] >= 39 && buttonMoveStratum(true, 15, item, i), item.shownHeight[state.unit] >= 39 && buttonMoveStratum(false, 15, item, i), item.shownHeight[state.unit] >= 30 && item.shownHeight[state.unit] < 39 && buttonMoveStratum(true, item.shownHeight[state.unit] * 0.2, item, i), item.shownHeight[state.unit] >= 30 && item.shownHeight[state.unit] < 39 && buttonMoveStratum(false, item.shownHeight[state.unit] * 0.2, item, i)), state.showInfo && React.createElement(Components.StratumInformation, {\n            height: item.shownHeight[state.unit],\n            stratumName: item.name,\n            Object_id: state._id,\n            thickness: item.thickness,\n            lowerLimit: item.lowerLimit,\n            upperLimit: item.upperLimit,\n            width: D.STRATUM_INFORMATION_WIDTH,\n            index: i,\n            stratum_key: item.key,\n            unit: state.unit,\n            baseHeight: state.baseHeight,\n            navigation: _this6.props.navigation,\n            scale: state.scale,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1023\n            }\n          }), state.showLithology && React.createElement(Components.LithologyPicker, {\n            height: item.shownHeight[state.unit],\n            stratumName: item.name,\n            Object_id: _this6.state._id,\n            index: i,\n            stratum_key: item.key,\n            data: item.lithology_data,\n            width: D.LITHOLOGY_PICKER_WIDTH,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1042\n            }\n          }), state.showStructure && React.createElement(Components.StructurePicker, {\n            height: item.shownHeight[state.unit],\n            stratumName: item.name,\n            Object_id: state._id,\n            index: i,\n            stratum_key: item.key,\n            data: item.structure_data,\n            width: D.STRUCTURE_PICKER_WIDTH,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1055\n            }\n          }), state.showFossils && React.createElement(Components.FossilPicker, {\n            height: item.shownHeight[state.unit],\n            stratumName: item.name,\n            Object_id: state._id,\n            index: i,\n            stratum_key: item.key,\n            navigation: _this6.props.navigation,\n            data: item.fossil_data,\n            width: D.FOSSIL_PICKER_WIDTH,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1068\n            }\n          }), state.showPictures && React.createElement(Components.ImagePicker, {\n            height: item.shownHeight[state.unit],\n            stratumName: item.name,\n            Object_id: state._id,\n            index: i,\n            stratum_key: item.key,\n            data: item.image_data,\n            width: D.IMAGE_PICKER_WIDTH,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1082\n            }\n          }), state.showNotes && React.createElement(Components.NoteWriter, {\n            height: item.shownHeight[state.unit],\n            Object_id: state._id,\n            index: i,\n            stratum_key: item.key,\n            data: item.note_data,\n            width: D.NOTE_WRITER_WIDTH,\n            isCore: state.isCore,\n            takingShot: takingShot,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1095\n            }\n          })), (state.maxIndexStratums > i || i > state.minIndexStratums) && React.createElement(View, {\n            style: {\n              height: item.shownHeight[state.unit]\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1109\n            }\n          }));\n        });\n      }\n    }\n  }, {\n    key: \"renderGammaRay_Stratums\",\n    value: function renderGammaRay_Stratums() {\n      var takingShot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var state = this.state;\n\n      if (takingShot) {\n        return React.createElement(View, {\n          style: localStyles.container_row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1122\n          }\n        }, state.gammaRayIsRendered && this.state.gammaRayValues_ForShot.hasOwnProperty('xValuesMeters') && React.createElement(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1124\n          }\n        }, React.createElement(Components.GammaRayPlot, {\n          gammaRayValues: this.state.gammaRayValues_ForShot,\n          superiorLabels: state.gammaRaySuperiorLabels,\n          topHeightCore: state.maxCapturedHeight[0],\n          width: D.GAMMA_RAY_WIDTH,\n          unit: state.unit,\n          scale: state.scale,\n          key: 0,\n          numberVSegments: NUMBER_VERTICAL_GR_SEGMENTS,\n          takingShot: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1125\n          }\n        })), state.showGammaRay && !state.gammaRayValues.hasOwnProperty('xValuesMeters') && React.createElement(View, {\n          style: {\n            width: D.GAMMA_RAY_WIDTH\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1139\n          }\n        }), React.createElement(View, {\n          style: localStyles.container_column,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1141\n          }\n        }, this.renderStratums(true)));\n      }\n\n      return React.createElement(View, {\n        style: localStyles.container_row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1150\n        }\n      }, state.showGammaRay && React.createElement(Components.GammaRayPlot, {\n        gammaRayValues: {},\n        topHeightCore: state.potentialMaxHeight[0],\n        width: D.GAMMA_RAY_WIDTH,\n        unit: state.unit,\n        scale: state.scale,\n        key: 0,\n        numberVSegments: NUMBER_VERTICAL_GR_SEGMENTS,\n        takingShot: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152\n        }\n      }), React.createElement(View, {\n        style: localStyles.container_column,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1163\n        }\n      }, this.renderStratums(false)));\n    }\n  }, {\n    key: \"graphicsColumnFooter\",\n    value: function graphicsColumnFooter(space) {\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1177\n        }\n      }, s.showLithology && s.showCarbonatesRule && React.createElement(View, {\n        style: {\n          flexDirection: 'column',\n          paddingLeft: -0.5 + space + (s.isCore && s.showGammaRay) * D.GAMMA_RAY_WIDTH + s.showInfo * D.STRATUM_INFORMATION_WIDTH + 50 + D.LITHOLOGY_ADDING_TERM / 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180\n        }\n      }, React.createElement(p.carbonatesRule, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189\n        }\n      })), React.createElement(View, {\n        style: {\n          height: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1193\n        }\n      }));\n    }\n  }, {\n    key: \"graphicsColumn\",\n    value: function graphicsColumn(takingShot) {\n      var _this7 = this;\n\n      var s = this.state;\n      var p = this.props;\n      var excess = s.isCore ? 115 : 101;\n      var verticalRule_width = s.isCore ? 110 : 95;\n\n      if (takingShot) {\n        var _space = excess;\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1346\n          }\n        }, React.createElement(Modal, {\n          visible: this.state.plotViewVisible,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1347\n          }\n        }, React.createElement(ScrollView, {\n          horizontal: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1348\n          }\n        }, React.createElement(ScrollView, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1349\n          }\n        }, React.createElement(ViewShot, {\n          style: localStyles.white_background,\n          ref: \"viewShot\",\n          options: {\n            format: s.imageFormat,\n            quality: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1350\n          }\n        }, this.objectInformationHeader(true), React.createElement(View, {\n          style: localStyles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1357\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1358\n          }\n        }, React.createElement(View, {\n          style: localStyles.container_column,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1359\n          }\n        }, this.graphicsColumnHeader(_space, true), React.createElement(View, {\n          style: {\n            paddingTop: 5,\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1364\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1365\n          }\n        }, React.createElement(View, {\n          style: {\n            width: verticalRule_width\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1367\n          }\n        }, s.verticalRule_ForShot), this.renderGammaRay_Stratums(true))), this.graphicsColumnFooter(_space)))))))));\n      }\n\n      var space = s.showGammaRay ? excess : excess + UP_DOWN_BUTTONS_WIDTH;\n      return React.createElement(View, {\n        style: localStyles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1394\n        }\n      }, React.createElement(ScrollView, {\n        horizontal: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1396\n        }\n      }, React.createElement(View, {\n        style: localStyles.container_column,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1397\n        }\n      }, this.graphicsColumnHeader(space), React.createElement(ScrollView, {\n        ref: \"verticalScrollView\",\n        style: {\n          paddingTop: 5\n        },\n        onScroll: function onScroll(_ref2) {\n          var nativeEvent = _ref2.nativeEvent;\n\n          _this7.determine_LimitExceeded(nativeEvent, 0);\n        },\n        onMomentumScrollEnd: function onMomentumScrollEnd(_ref3) {\n          var nativeEvent = _ref3.nativeEvent;\n\n          _this7.determine_LimitExceeded(nativeEvent, 1);\n        },\n        onScrollToTop: function onScrollToTop() {\n          return _this7.setState({\n            inmediateTopLoadEnabled: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1402\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1409\n        }\n      }, React.createElement(View, {\n        style: {\n          width: verticalRule_width\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410\n        }\n      }, (s.stratumsAreAvailable || s.gammaRayIsRendered) && s.verticalRule), (s.stratumsAreAvailable || s.showGammaRay) && this.renderGammaRay_Stratums())), this.graphicsColumnFooter(space))));\n    }\n  }, {\n    key: \"modalStructure\",\n    value: function modalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView) {\n      var s = this.state;\n      var p = this.props;\n      var anObjectIsShown = s.numberLayers != 0 && s.stratumsAreAvailable || s.gammaRayIsRendered;\n\n      function header(message) {\n        return React.createElement(View, {\n          style: genericStyles.modalHeader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1438\n          }\n        }, React.createElement(Text, {\n          style: {\n            justifyContent: 'center',\n            alignItems: 'center',\n            fontSize: 17,\n            fontWeight: 'bold'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1439\n          }\n        }, message));\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1445\n        }\n      }, React.createElement(Modal, {\n        animationType: \"fade\",\n        transparent: false,\n        visible: boolVisible && this.props.navigation.isFocused(),\n        onRequestClose: function onRequestClose() {\n          return cancelFunction();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1446\n        }\n      }, anObjectIsShown && React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1454\n        }\n      }, header(headerMessage), mainView, React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1459\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingRight: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1460\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[28],\n        color: DARK_GRAY_COLOR,\n        onPress: s.keyboardAvailable ? Keyboard.dismiss : function () {\n          cancelFunction();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1461\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingLeft: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1469\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[29],\n        icon: {\n          name: 'check'\n        },\n        onPress: s.keyboardAvailable ? Keyboard.dismiss : function () {\n          acceptFunction();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1470\n        }\n      })))), !anObjectIsShown && React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1483\n        }\n      }, header(headerMessage), React.createElement(View, {\n        style: _objectSpread({}, genericStyles.white_background_without_ScrollView, {\n          justifyContent: 'center'\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1485\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1487\n        }\n      }, p.allMessages[32])), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1491\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[30],\n        color: DARK_GRAY_COLOR,\n        onPress: function onPress() {\n          cancelFunction();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1492\n        }\n      })))));\n    }\n  }, {\n    key: \"numericField\",\n    value: function numericField(mainMessage, variable, variableName, maximumMessage, minimumMessage) {\n      var _this8 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        style: genericStyles.instructionsAboveTextInputs,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1512\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1,\n          color: 'red',\n          fontWeight: 'bold',\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1513\n        }\n      }, \"*\", React.createElement(Text, {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1514\n        }\n      }, \" \", mainMessage)), maximumMessage && React.createElement(View, {\n        style: _objectSpread({}, genericStyles.simple_center, {\n          paddingTop: minimumMessage ? 5 : 0\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1519\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1,\n          paddingBottom: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1520\n        }\n      }, p.allMessages[34], \":   \", s.potentialMaxHeight[1], \" \", s.unitMessage)), minimumMessage && React.createElement(View, {\n        style: genericStyles.simple_center,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1526\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1,\n          paddingBottom: 3\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1527\n        }\n      }, p.allMessages[37], \":   \", s.potentialMinHeight[1], \" \", s.unitMessage)), React.createElement(TextInput, {\n        value: variable[1],\n        selectTextOnFocus: true,\n        textAlign: 'center',\n        style: _objectSpread({}, genericStyles.textInput, {\n          width: '70%'\n        }),\n        placeholder: p.allMessages[38],\n        onChangeText: function onChangeText(text) {\n          return _this8.onChangeNumericValue(variableName, text);\n        },\n        keyboardType: \"phone-pad\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1530\n        }\n      }));\n    }\n  }, {\n    key: \"initialLimitPreview\",\n    value: function initialLimitPreview() {\n      var s = this.state;\n      var p = this.props;\n      var boolVisible = s.initLimitPreviewVisible;\n      var cancelFunction = this.closeInitLimitPreview;\n      var acceptFunction = this.stablishInitLimit;\n      var headerMessage = p.allMessages[31];\n      var mainView = React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1554\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1555\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: '11%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1556\n        }\n      }, this.numericField(p.allMessages[33], s.maxCapturedHeight, 'maxCapturedHeight', true, true))));\n      return this.modalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView);\n    }\n  }, {\n    key: \"takeShotPreview\",\n    value: function takeShotPreview() {\n      var _this9 = this;\n\n      var s = this.state;\n      var p = this.props;\n      var boolVisible = s.takeShotPreviewVisible;\n      var cancelFunction = this.finishTakingShot;\n      var acceptFunction = this.takeShot;\n      var headerMessage = p.allMessages[39];\n      var mainView = React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1580\n        }\n      }, React.createElement(View, {\n        style: _objectSpread({}, genericStyles.white_background_with_ScrollView, {\n          flex: 1\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1582\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1583\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingTop: s.isCore ? '3%' : '10%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1584\n        }\n      }, this.numericField(p.allMessages[40], s.maxCapturedHeight, 'maxCapturedHeight', true, false), this.numericField(p.allMessages[41], s.minCapturedHeight, 'minCapturedHeight', false, true), React.createElement(View, {\n        style: _objectSpread({}, genericStyles.row_instructions_textInput, {\n          paddingTop: 30\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1593\n        }\n      }, React.createElement(View, {\n        style: {\n          justifyContent: 'flex-end'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1594\n        }\n      }, React.createElement(Text, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1596\n        }\n      }, p.allMessages[42], \": \")), React.createElement(View, {\n        style: {\n          justifyContent: 'flex-start'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1598\n        }\n      }, React.createElement(Picker, {\n        selectedValue: s.imageFormat,\n        style: {\n          height: 30,\n          width: 100,\n          flex: 1\n        },\n        onValueChange: function onValueChange(itemValue, itemIndex) {\n          return _this9.setState({\n            imageFormat: itemValue\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1599\n        }\n      }, React.createElement(Picker.Item, {\n        label: p.allMessages[43],\n        value: \"jpg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1604\n        }\n      }), React.createElement(Picker.Item, {\n        label: p.allMessages[44],\n        value: \"png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1605\n        }\n      }))))))), s.gammaRayIsRendered && React.createElement(View, {\n        style: {\n          paddingLeft: '5%',\n          paddingRight: '5%',\n          paddingTop: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1614\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          color: 'red',\n          fontSize: 13\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1616\n        }\n      }, p.allMessages[45]), React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontSize: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1619\n        }\n      }, p.allMessages[46], \" (\", s.scale[1], \") \", p.allMessages[47], auxiliarFunctions.repairNumber(SPACES_TO_SHOW * s.scale[0], 20)[1], \" \", s.unitMessage, p.allMessages[48])), React.createElement(View, {\n        style: _objectSpread({}, genericStyles.smallRow, {\n          flex: 0.04\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1625\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          color: 'blue'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1627\n        }\n      }, p.allMessages[49], \":  \", auxiliarFunctions.repairNumber(s.maxCapturedHeight[0] - s.minCapturedHeight[0], 20)[1], \" \", s.unitMessage)));\n      return this.modalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView);\n    }\n  }, {\n    key: \"activateLoadObjectInfo\",\n    value: function activateLoadObjectInfo() {\n      if (this.state.loadFunctionOpened) {\n        this.setState({\n          loadFunctionOpened: false\n        });\n        this.loadObjectInfo();\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1647\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this10 = this;\n\n      var s = this.state;\n      var p = this.props;\n\n      if (this.state.loading || this.props.loadView) {\n        return React.createElement(View, {\n          style: genericStyles.simple_center,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1658\n          }\n        }, !this.state.takingShot && this.activateLoadObjectInfo(), React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1660\n          }\n        }), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1662\n          }\n        }, s.takingShot ? p.allMessages[50] : p.allMessages[51], \"...\"));\n      }\n\n      var informationIsRendered = s.gammaRayIsRendered || s.stratumsAreAvailable;\n      return React.createElement(View, {\n        style: localStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1669\n        }\n      }, this.initialLimitPreview(), this.takeShotPreview(), React.createElement(View, {\n        style: localStyles.white_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1674\n        }\n      }, this.objectInformationHeader(), informationIsRendered && this.graphicsColumn(this.state.takingShot), !informationIsRendered && React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1678\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1680\n        }\n      }, p.allMessages[32]))), React.createElement(View, {\n        style: _objectSpread({}, genericStyles.down_buttons, {\n          flex: 0.15\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1686\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 0.05\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1687\n        }\n      }), React.createElement(View, {\n        style: {\n          flex: 0.2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1690\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        onPress: function onPress() {\n          return _this10.openTakeShotPreview();\n        },\n        icon: React.createElement(Icon, {\n          name: \"file-photo-o\",\n          size: 24,\n          color: LIGHTGRAY_COLOR,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1694\n          }\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1691\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 0.1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1698\n        }\n      }), React.createElement(View, {\n        style: {\n          flex: 0.7\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1701\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        icon: {\n          name: 'create'\n        },\n        title: p.allMessages[52],\n        onPress: this.editObjectInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1702\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 0.05\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1710\n        }\n      })));\n    }\n  }]);\n\n  return ObjectScreen;\n}(Component);\n\nObjectScreen.navigationOptions = function (_ref4) {\n  var screenProps = _ref4.screenProps,\n      navigation = _ref4.navigation;\n  return {\n    title: navigation.state.params.isCore ? ObjectScreen_Texts[screenProps.language][2] : ObjectScreen_Texts[screenProps.language][3],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader),\n    headerRight: React.createElement(View, {\n      style: {\n        paddingRight: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      }\n    }, React.createElement(ButtonWithIcon, {\n      onPress: function onPress() {\n        return screenProps.function.ref();\n      },\n      icon: React.createElement(Icon, {\n        name: \"eye\",\n        size: 25,\n        color: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }),\n      type: \"outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      }\n    }))\n  };\n};\n\nvar localStyles = StyleSheet.create({\n  objectInfo_header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 43\n  },\n  objectInfo_header_text: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    paddingTop: 15,\n    paddingLeft: 10\n  },\n  graphicColumn_header: {\n    flexDirection: 'row',\n    height: 30,\n    paddingBottom: 25\n  },\n  field_section: {\n    borderColor: 'black',\n    borderWidth: 2,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 25\n  },\n  container: {\n    flexDirection: 'column',\n    padding: 20\n  },\n  container_column: {\n    flex: 1,\n    flexDirection: 'column',\n    opacity: 1,\n    paddingLeft: 5\n  },\n  container_row: {\n    flexDirection: 'row',\n    justifyContent: 'flex-start'\n  },\n  lightGray_background: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: LIGHTGRAY_COLOR\n  },\n  white_background: {\n    flexDirection: 'column',\n    paddingTop: 20,\n    flex: 0.9,\n    backgroundColor: 'white'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: ObjectScreen_Texts[state.appPreferencesReducer.language],\n    user_id: state.userReducer.user_id,\n    localDB: state.userReducer.localDB,\n    noCarbonatesRule: state.libraryReducer.noCarbonatesRule,\n    carbonatesRule: state.libraryReducer.carbonatesRule,\n    loadView: state.popUpReducer.loadView,\n    gammaRayValues_Extract: state.popUpReducer.gammaRayValues_Extract,\n    enteringComponentEnabled: state.popUpReducer.stratumComponentEnabled\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchChangeLoadView: function dispatchChangeLoadView(bool) {\n      return dispatch(changeLoadView(bool));\n    },\n    dispatchGammaRay_Extract: function dispatchGammaRay_Extract(object) {\n      return dispatch(changeGammaRay_Extract(object));\n    },\n    dispatchStackScreenPropsFunction: function dispatchStackScreenPropsFunction(globalFunction) {\n      return dispatch(changeStackScreenPropsFunction(globalFunction));\n    },\n    dispatchEnteringPermission: function dispatchEnteringPermission(bool) {\n      return dispatch(changeStratumComponentPermission(bool));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ObjectScreen);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/objectsOfStudy/ObjectScreen.js"],"names":["React","Component","Button","ButtonWithIcon","Icon","connect","changeLoadView","changeGammaRay_Extract","changeStackScreenPropsFunction","changeStratumComponentPermission","ObjectScreen_Texts","ViewShot","captureRef","ExpoMediaLibrary","ExpoFileSystem","CameraRoll","Permissions","D","genericStyles","LIGHTGRAY_COLOR","DARK_GRAY_COLOR","OUTCROPS_DOCUMENT_ID","CORES_DOCUMENT_ID","Components","Log","Database","auxiliarFunctions","createLayerListForShot","createGammaRayValuesProvisional","getStratumsIndexes","riseLayer","lowerLayer","_","UP_DOWN_BUTTONS_WIDTH","NUMBER_VERTICAL_GR_SEGMENTS","SPACES_TO_SHOW","ADDITIONAL_SPACES_VERTICAL_RULE","ObjectScreen","props","openInitLimitPreview","enteringComponentEnabled","dispatchEnteringPermission","setState","initLimitPreviewVisible","closeInitLimitPreview","maxCapturedHeight","stablishInitLimit","s","state","p","Alert","alert","allMessages","potentialMaxHeight","potentialMinHeight","userStablishedInitLimit","refs","verticalScrollView","scrollTo","y","factor","animated","openTakeShotPreview","cloneDeep","minCapturedHeight","takeShotPreviewVisible","finishTakingShot","takingShot","plotViewVisible","verticalRule_ForShot","layerList_ForShot","gammaRayValues_ForShot","takeShot","auxiliarTakeShot","loading","viewShot","capture","then","uri","askAsync","CAMERA_ROLL","status","createAssetAsync","asset","deleteAsync","catch","error","console","toString","loadObjectInfo","limitsAreTheSame","verticalRule","JSON","parse","stringify","layerList","object","gammaRayIsRendered","gammaRayValues","createVerticalRule","unit","SIZE_OF_UNIT","scale","onChangeNumericValue","variableName","text","isValidDecimalNumber","result","parseFloat","editObjectInfo","canNavigate","navigation","navigate","key","routeName","params","returnToObjectScreen","addNewStratum","_id","baseHeight","isCore","payload","update_StratumsRendered_VerticalRule","minIndexStratums","maxIndexStratums","minHeightStratums_rendered","maxHeightStratums_rendered","getLayerList_Limits","minHeightGammaRay_rendered","maxHeightGammaRay_rendered","minHeightForVerticalRule","min","maxHeightForVerticalRule","max","bottom","top","indexesStratums","lowerLimit","upperLimit","removeLastLayer","remove","keyToRemove","array","numberLayers","absoluteMinHeightStratums","absoluteMaxHeightStratums","potentialMinHeightStratums","potentialMaxHeightStratums","length","pop","repairNumber","potentialMinHeightGammaRay","absoluteMinHeight","absoluteMinHeightGammaRay","shift","absoluteMaxHeight","saveLayerList","user_id","localDB","stratumsAreAvailable","onPress","getGammaRayValues_Extract","topHeight","dispatchGammaRay_Extract","gammaRayValues_Extract","numberMeasurements","len_MinusOne","xValuesMeters","xValuesFeet","determine_LimitExceeded","kind","layoutMeasurement","contentOffset","contentSize","aF","previousTop","previousBottom","potentialMaxHeightGammaRay","potentialMinHeightGammaRay_rendered","currentLocation","height","limitWasExceeded","nonContiguous","inmediateTopLoadEnabled","inmediateBottomLoadEnabled","loadMoreData","additionalHeightVerticalRule","keyboardDidShow","bind","keyboardDidHide","getParam","loadFunctionOpened","keyboardAvailable","unitMessage","gammaRaySuperiorLabels","imageFormat","setRenderValues","get","document","objects","showInfo","showLithology","showStructure","showFossils","showPictures","showNotes","thereIsGammaRay","hasOwnProperty","showGammaRay","absoluteMaxHeightGammaRay","createGammaRaySuperiorLabels","dispatchChangeLoadView","dispatchStackScreenPropsFunction","keyboardDidShowListener","Keyboard","addListener","keyboardDidHideListener","log_action","layer","i","li","superiorSpace","inferiorSpace","totalHeight","added","showCarbonatesRule","integer","parseInt","numberOfDivisions","lastIndex","difference","ruleView","push","value","toFixed","map","item","flexDirection","justifyContent","paddingRight","fontSize","borderTopColor","borderTopWidth","width","paddingTop","unshift","borderWidth","borderColor","separation","GAMMA_RAY_WIDTH","scaler","maxYValue","minYValue","div","returnedView","alignItems","opacity","transform","rotate","completeShot","minLimitMatches","maxLimitMatches","localStyles","objectInfo_header","objectInfo_header_text","fontWeight","name","flex","padding","locationInWords","space","conditionGammaRay","header_aux","headerWidth","message","field_section","minHeightGammaRay","maxHeightGammaRay","graphicColumn_header","paddingLeft","STRATUM_INFORMATION_WIDTH","LITHOLOGY_PICKER_WIDTH","STRUCTURE_PICKER_WIDTH","FOSSIL_PICKER_WIDTH","IMAGE_PICKER_WIDTH","NOTE_WRITER_WIDTH","showNoCarbonatesRule","buttonMoveStratum","rise","buttonSize","riseLayerPosition","lowerLayerPosition","container_row","shownHeight","thickness","lithology_data","structure_data","fossil_data","image_data","note_data","container_column","renderStratums","LITHOLOGY_ADDING_TERM","excess","verticalRule_width","white_background","format","quality","objectInformationHeader","container","graphicsColumnHeader","renderGammaRay_Stratums","graphicsColumnFooter","nativeEvent","boolVisible","headerMessage","cancelFunction","acceptFunction","mainView","anObjectIsShown","header","modalHeader","isFocused","lightGray_background","down_buttons","dismiss","white_background_without_ScrollView","textAlign","mainMessage","variable","maximumMessage","minimumMessage","instructionsAboveTextInputs","color","simple_center","paddingBottom","textInput","white_background_with_ScrollView","numericField","modalStructure","row_instructions_textInput","itemValue","itemIndex","smallRow","loadView","activateLoadObjectInfo","informationIsRendered","initialLimitPreview","takeShotPreview","graphicsColumn","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","headerRight","function","ref","StyleSheet","create","mapStateToProps","appPreferencesReducer","userReducer","noCarbonatesRule","libraryReducer","carbonatesRule","popUpReducer","stratumComponentEnabled","mapDispatchToProps","dispatch","bool","globalFunction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TextInput, Button as ButtonNoIcon, Picker, StyleSheet,\n\t\t Modal, ScrollView, ActivityIndicator, Alert, Keyboard} from 'react-native';\n\nimport { Button as ButtonWithIcon } from 'react-native-elements'\nimport Icon from 'react-native-vector-icons/FontAwesome'\n\nimport { connect } from 'react-redux'\nimport { changeLoadView, changeGammaRay_Extract, \n\t     changeStackScreenPropsFunction, changeStratumComponentPermission } from '../../redux/actions/popUpActions'\nimport { ObjectScreen_Texts } from '../../languages/screens/objectsOfStudy/ObjectScreen'\n\nimport ViewShot, {captureRef} from 'react-native-view-shot'\nimport * as ExpoMediaLibrary from 'expo-media-library'\nimport * as ExpoFileSystem   from 'expo-file-system'\nimport CameraRoll from \"@react-native-community/cameraroll\"\nimport * as Permissions from 'expo-permissions'\n\nimport * as D from '../../constants/Dimensions'\nimport { genericStyles, LIGHTGRAY_COLOR, DARK_GRAY_COLOR } from '../../constants/genericStyles'\nimport { OUTCROPS_DOCUMENT_ID, CORES_DOCUMENT_ID } from '../../constants/appConstants'\n\nimport * as Components from '../../components'\nimport * as Log        from '../../genericFunctions/logFunctions'\nimport * as Database   from '../../genericFunctions/databaseFunctions'\nimport * as auxiliarFunctions from '../../genericFunctions/otherFunctions'\nimport { createLayerListForShot, createGammaRayValuesProvisional, getStratumsIndexes,\n         riseLayer, lowerLayer } from '../../genericFunctions/plotFunctions'\n\nimport _ from \"lodash\"\n\nconst UP_DOWN_BUTTONS_WIDTH = 80; // Espacio reservado para que se muestren los botones de subir o bajar un estrato de posición\nconst NUMBER_VERTICAL_GR_SEGMENTS = 7; // Número de divisiones verticales que tendrá la gráfica del gamma-ray, en caso de mostrarse\n\n/* Cantidad de espacios de la regla vertical con información cargada.\n   El resto de información se cargará a medida que el usuario navegue.\n   Los estratos pueden requerir que se muestren más espacios que esta cantidad, pero nunca\n   se mostrará más de esto en gamma-ray porque de lo contrario pueden ocurrir errores \n\n   Si estamos trabajando con afloramientos, donde no usamos la librería de gráficas, aumentamos este valor a 100\n*/\nvar SPACES_TO_SHOW = 41.5; \n\n// Espacios que puede ocupar la regla vertical, tanto hacia arriba como hacia abajo, adicionales a la información cargada\nconst ADDITIONAL_SPACES_VERTICAL_RULE = 100; \n\n\nclass ObjectScreen extends Component {\t\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.keyboardDidShow = this.keyboardDidShow.bind(this)\n\t\tthis.keyboardDidHide = this.keyboardDidHide.bind(this)\n\n\t\tif (! this.props.navigation.getParam('isCore')){\n\t\t\tSPACES_TO_SHOW = 100; // En los afloramientos se pueden mostrar más espacios porque no hay gráfica de gamma-ray\n\t\t}\n\t\t\t\n\t\tthis.state = {\n\t\t\t// Información que se recupera del núcleo o afloramiento ya creado\n\t\t\t...this.props.navigation.state.params,\n\n\t\t\t// Información extra\n\t\t\tloading:              true,  // Indica si se está leyendo información de la base de datos PouchDB\n\t\t\tloadFunctionOpened:   true,  // Indica si se puede ingresar a la función loadObjectInfo\n\t\t\tstratumsAreAvailable: false, // Determina si al menos algún campo de los estratos está siendo mostrado, porque según eso mostraremos la regla vertical, botones de subir/bajar, etc.\n\n\t\t\t// Determina si el teclado está visible.\n\t\t\tkeyboardAvailable: false,\n\n\t\t\t// Contiene la palabra \"metros\" o la palabra \"pies\", dependiendo de la unidad empleada, en el idioma correspondiente\n\t\t\tunitMessage: (this.props.navigation.getParam('unit') == 0) ? this.props.allMessages[35] : this.props.allMessages[36],\n\n\t\t\t// Aquí se almacenan las reglas\n\t\t\tverticalRule:           null, // Regla vertical que indica las alturas\n\t\t\tgammaRaySuperiorLabels: null, // Regla horizontal que indica los valores de gamma-ray\n\n\t\t\t// Variables para cuando el usuario necesita visualizar una altura específica inicial\n\t\t\tinitLimitPreviewVisible: false, // Esta variable indica si esta abierto o no el modal que permite establecer una altura inicial de visión\n\t\t\tuserStablishedInitLimit: false, // Indica si el usuario efectivamente acaba de establecer una altura específica\n\t\t\t\n\t\t\t// Variables para generar el ploteo del objeto\n\t\t\timageFormat:            \"jpg\",        // Formato en el que sa guardará la imagen de captura\n\t\t\ttakingShot:             false,        // Determina si en este momento se está tomando una captura del núcleo o afloramiento\n\t\t\tplotViewVisible:        false,        // Determina si está visible la vista provisional que se exporta como imagen\n\t\t\ttakeShotPreviewVisible: false,        // Determina si está visible el modal en donde se establece dentro de qué límites se desea capturar el núcleo o afloramiento\n\t\t\tminCapturedHeight:      [null,null],  // Mínima altura del objeto que será capturada\n\t\t\tmaxCapturedHeight:      [null,null],  // Máxima altura del objeto que será capturada. También se usa para indicar una altura inicial para mostrar en pantalla\n\t\t\tlayerList_ForShot:      null,         // Copia del arreglo de estratos, que sólo se usa para hacer capturas\n\t\t\tgammaRayValues_ForShot: {},           // Copia de los valores de gamma-ray, que sólo se usa para hacer capturas\n\t\t\tverticalRule_ForShot:   null,         // Similar a \"verticalRule\", pero se crea provisionalmente sólo para las capturas de la vista\n\t\t};\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps, navigation }) => ({\n\t\ttitle: (navigation.state.params.isCore) ? ObjectScreen_Texts[screenProps.language][2] : ObjectScreen_Texts[screenProps.language][3],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t},\n\t\theaderRight: (\n\t\t\t<View style = {{paddingRight: 5}}>\n\t\t\t\t<ButtonWithIcon\n\t\t\t\t\tonPress = {() => screenProps.function.ref()}\n\t\t\t\t\ticon    = {<Icon  name='eye'  size={25}  color='white'/>}\n\t\t\t\t\ttype    = 'outline'\n\t\t\t\t/>\n\t\t\t</View>\n\t\t),\n\t});\n\n\t/// Para cargar la información del núcleo o afloramiento\n\tasync loadObjectInfo(setRenderValues=true) {\n\t\tawait this.props.localDB.get((this.state.isCore ? CORES_DOCUMENT_ID : OUTCROPS_DOCUMENT_ID))\n\t\t\t.then(async(document) => {\n\n\t\t\t\t// Información que se recupera del objeto ya creado\n\t\t\t\tthis.setState({...document.objects[this.state._id]});\n\n\t\t\t\t// Si esta opción no es verdadera, luego tiene que establecerse el this.state.loading a false en la función que llame a ésta, porque ésta no lo hará\n\t\t\t\tif (setRenderValues){\n\t\t\t\t\t// --------------------------------------- Definición de variables comunes ------------------------------------------\n\t\t\t\t\tlet s  = this.state;\n\t\t\t\t\tlet aF = auxiliarFunctions;\t\n\n\t\t\t\t\tlet verticalRule = null; // Variable que almacena la regla vertical\n\t\t\t\t\tlet minHeightForVerticalRule = null; // Altura mínima a la que llega la regla vertical\n\t\t\t\t\tlet factor = D.SIZE_OF_UNIT / s.scale[0]; // Convierte una medida expresada en metros o pies en el equivalente que ocupa en la pantalla\n\t\t\t\t\tlet additionalHeightVerticalRule = ADDITIONAL_SPACES_VERTICAL_RULE * s.scale[0]; // Esto sirve para que la regla vertical se ajuste a la gráfica\n\n\t\t\t\t\t// Necesitamos almacenar estas dos variables antes de hacer lo demás, porque se necesitarán para crear la regla vertical\n\t\t\t\t\tawait this.setState({factor, additionalHeightVerticalRule})\n\n\t\t\t\t\t// Determina si se están mostrando los estratos, aunque sea alguno de sus campos\n\t\t\t\t\tlet stratumsAreAvailable = (s.showInfo || s.showLithology || s.showStructure || s.showFossils || s.showPictures || s.showNotes);\n\n\t\t\t\t\tlet numberLayers = s.layerList.length; // Cantidad de estratos registrados\n\t\t\t\t\tlet minIndexStratums, maxIndexStratums; // Índices inferior y superior entre los estratos que estarán cargados (los que se muestran en un momento dado)\n\t\t\t\t\tlet minHeightStratums_rendered, maxHeightStratums_rendered; // Alturas inferior y superior de entre los estratos que estarán cargados\n\t\t\t\t\tlet absoluteMinHeightStratums, absoluteMaxHeightStratums; // Alturas inferior y superior entre todos los estratos, aunque no estén cargados\n\t\t\t\t\t\n\t\t\t\t\t// Alturas inferior y superior de los estratos que podrán mostrarse (todos en caso de que están disponibles, o ninguno en caso de que no lo estén)\n\t\t\t\t\tlet potentialMinHeightStratums, potentialMaxHeightStratums; \n\n\t\t\t\t\tabsoluteMinHeightStratums = absoluteMaxHeightStratums = potentialMinHeightStratums = potentialMaxHeightStratums = minIndexStratums = \n\t\t\t\t\tmaxIndexStratums = minHeightStratums_rendered = maxHeightStratums_rendered = null;\n\n\t\t\t\t\t// Las siguientes dos variables almacenan tanto el valor numérico como el valor en cadena de caracteres, porque se le muestran al usuario\n\t\t\t\t\t// Se refieren a la máxima y mínima altura respectivamente del objeto de estudio que podría mostrarse en esta ventana, según los campos\n\t\t\t\t\t// seleccionados. Por ejemplo, si estamos en un núcleo y sólo estamos mostrando los estratos, no los rayos gamma, la altura mínima potencial podría ser\n\t\t\t\t\t// mayor que la real, porque puede que no hayamos registado estratos a tanta profundidad como rayos gamma.\n\t\t\t\t\tlet potentialMaxHeight = [null, null];\n\t\t\t\t\tlet potentialMinHeight = [null, null];\n\n\t\t\t\t\t// Altura máxima y mínima reales, respectivamente, del objeto de estudio. Sirven cuando estamos haciendo una captura de la gráfica para determinar\n\t\t\t\t\t// si estamos haciendo una toma completa del objeto de estudio o no.\n\t\t\t\t\tlet absoluteMaxHeight = null;\n\t\t\t\t\tlet absoluteMinHeight = null;\n\n\t\t\t\t\t// Cuando el objeto es un núcleo necesitamos variables adicionales a cuando es un afloramiento, debido al gamma-ray\n\t\t\t\t\tif (s.isCore){\n\t\t\t\t\t\tpotentialMaxHeight = _.cloneDeep(s.baseHeight[s.unit]);\n\t\t\t\t\t\tabsoluteMaxHeight  = potentialMaxHeight[0];\n\n\t\t\t\t\t\t// ----------------------- Información referente a la gráfica de gamma-ray -----------------------\n\n\t\t\t\t\t\t// Condición para determinar si hay una gráfica de gamma-ray registrada\n\t\t\t\t\t\tlet thereIsGammaRay = s.gammaRayValues.hasOwnProperty('xValuesMeters') && (s.gammaRayValues.xValuesMeters.length > 0);\n\n\t\t\t\t\t\t// Condición para determinar si en este momento se está mostrando una gráfica gamma-ray o no\n\t\t\t\t\t\tlet gammaRayIsRendered = s.showGammaRay && thereIsGammaRay;\n\n\t\t\t\t\t\t// Necesitamos las alturas mínima y máxima registradas en el gráfico de gamma-ray en total, independientemente de si dicho gráfico se está\n\t\t\t\t\t\t// mostrando o no, llamadas \"absolute\"; luego también las alturas máxima y mínima que podrán mostrarse, llamadas \"potential\",\n\t\t\t\t\t\t// e igualmente las que representan la parte de la gráfica que está actualmente cargada.\n\t\t\t\t\t\tlet absoluteMinHeightGammaRay, absoluteMaxHeightGammaRay, potentialMinHeightGammaRay, potentialMaxHeightGammaRay, minHeightGammaRay_rendered, maxHeightGammaRay_rendered;\n\t\t\t\t\t\tabsoluteMinHeightGammaRay = absoluteMaxHeightGammaRay = potentialMinHeightGammaRay = potentialMaxHeightGammaRay = minHeightGammaRay_rendered = maxHeightGammaRay_rendered = null;\n\n\t\t\t\t\t\tif (thereIsGammaRay){\n\t\t\t\t\t\t\t// Determinamos la altura mínima y máxima registradas en el gamma-ray en total\n\t\t\t\t\t\t\tlet len_MinusOne = s.gammaRayValues.numberMeasurements-1;\n\t\t\t\t\t\t\tabsoluteMinHeightGammaRay = (s.unit == 0) ? s.gammaRayValues.xValuesMeters[len_MinusOne] : s.gammaRayValues.xValuesFeet[len_MinusOne];\n\t\t\t\t\t\t\tabsoluteMaxHeightGammaRay = (s.unit == 0) ? s.gammaRayValues.xValuesMeters[0] : s.gammaRayValues.xValuesFeet[0];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (gammaRayIsRendered){\n\t\t\t\t\t\t\tpotentialMinHeightGammaRay = absoluteMinHeightGammaRay;\n\t\t\t\t\t\t\tpotentialMaxHeightGammaRay = absoluteMaxHeightGammaRay;\n\n\t\t\t\t\t\t\t// Creamos las etiquetas que indican valores de gamma-ray, que están sobre la gráfica\n\t\t\t\t\t\t\tthis.createGammaRaySuperiorLabels();\n\n\t\t\t\t\t\t\t// Profundidad tope (superior) que se muestra en la gráfica\n\t\t\t\t\t\t\tlet top = (s.unit==0) ? s.gammaRayValues.xValuesMeters[0] : s.gammaRayValues.xValuesFeet[0];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Aquí se determinan los límites del gamma-ray mostrado\n\t\t\t\t\t\t\t( {minHeightGammaRay_rendered, maxHeightGammaRay_rendered} = await this.getGammaRayValues_Extract(top) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// ---------------------------- Información referente a los estratos -------------------------\n\t\t\t\t\t\tif (numberLayers != 0){\n\t\t\t\t\t\t\tabsoluteMinHeightStratums = s.layerList[numberLayers-1].lowerLimit[s.unit][0];\n\t\t\t\t\t\t\tabsoluteMaxHeightStratums = s.layerList[0].upperLimit[s.unit][0];\n\n\t\t\t\t\t\t\tif (stratumsAreAvailable){\n\t\t\t\t\t\t\t\tpotentialMinHeightStratums = absoluteMinHeightStratums;\n\t\t\t\t\t\t\t\tpotentialMaxHeightStratums = absoluteMaxHeightStratums;\n\n\t\t\t\t\t\t\t\tlet bottom = gammaRayIsRendered ? minHeightGammaRay_rendered : potentialMaxHeight[0]- SPACES_TO_SHOW*s.scale[0];\n\t\t\t\t\t\t\t\t( {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} = await this.getLayerList_Limits(bottom, potentialMaxHeight[0]) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Aquí determinamos la altura mínima registrada en el núcleo, independientemente de si es alcanzable en este momento o no\n\t\t\t\t\t\tabsoluteMinHeight = aF.repairNumber( aF.min(absoluteMinHeightStratums, absoluteMinHeightGammaRay), 20 )[0];\n\n\t\t\t\t\t\t// ----------------- Aquí determinamos las alturas límites que podrán mostrarse, y el extremo inferior de la regla vertical -----------------------\n\t\t\t\t\t\tpotentialMinHeight = aF.repairNumber( aF.min(potentialMinHeightStratums, potentialMinHeightGammaRay), 20 );\n\t\t\t\t\t\tif (potentialMinHeight[0] == null){\n\t\t\t\t\t\t\tpotentialMinHeight = _.cloneDeep(potentialMaxHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tminHeightForVerticalRule = aF.max( aF.min(minHeightStratums_rendered, minHeightGammaRay_rendered)-additionalHeightVerticalRule,  potentialMinHeight[0]);\n\t\t\t\t\t\tverticalRule = this.createVerticalRule(minHeightForVerticalRule, absoluteMaxHeight, 0, (minHeightForVerticalRule - potentialMinHeight[0]));\n\n\t\t\t\t\t\t// Aprovechamos de salvar aquí estas variables, ya que no se hará en el caso de afloramientos\n\t\t\t\t\t\tthis.setState({gammaRayIsRendered, absoluteMinHeightGammaRay, absoluteMaxHeightGammaRay, potentialMinHeightGammaRay, potentialMaxHeightGammaRay, minHeightGammaRay_rendered, maxHeightGammaRay_rendered})\t\n\t\t\t\t\t} \n\t\t\t\t\telse{ // Caso en que estamos trabajando con afloramientos\n\t\t\t\t\t\tpotentialMinHeight = _.cloneDeep(s.baseHeight[s.unit]);\n\t\t\t\t\t\tpotentialMaxHeight = (numberLayers > 0) ? (_.cloneDeep(s.layerList[0].upperLimit[s.unit])) : _.cloneDeep(potentialMinHeight);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ((numberLayers != 0) && (stratumsAreAvailable)){\n\t\t\t\t\t\t\tabsoluteMinHeight = potentialMinHeight[0];\n\t\t\t\t\t\t\tabsoluteMaxHeight = potentialMaxHeight[0];\n\n\t\t\t\t\t\t\tlet bottom = absoluteMaxHeight - SPACES_TO_SHOW*s.scale[0];\n\t\t\t\t\t\t\t( {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} = await this.getLayerList_Limits(bottom, absoluteMaxHeight) );\n\n\t\t\t\t\t\t\tminHeightForVerticalRule = aF.max( minHeightStratums_rendered-additionalHeightVerticalRule, potentialMinHeight[0]);\n\t\t\t\t\t\t\tverticalRule = this.createVerticalRule(minHeightForVerticalRule, absoluteMaxHeight, 0, (minHeightForVerticalRule - absoluteMinHeight));\t\n\t\t\t\t\t\t} \t\t\t           \n\t\t\t\t\t}\n\t\t\t\t\t// Aquí almacenamos las variables que deben estar presentes independientemente de si e trata de un núcleo o afloramiento\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tverticalRule,\n\t\t\t\t\t\tabsoluteMaxHeight, absoluteMinHeight, potentialMaxHeight, potentialMinHeight,\n\n\t\t\t\t\t\tstratumsAreAvailable, numberLayers, minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered,\n\t\t\t\t\t\tabsoluteMinHeightStratums, absoluteMaxHeightStratums, potentialMinHeightStratums, potentialMaxHeightStratums,\n\n\t\t\t\t\t\t// Estas dos variables sirven para determinar si se permite o no cargar más datos al desplazarse por la pantalla verticalmente\n\t\t\t\t\t\tinmediateBottomLoadEnabled: true,  // Permite cargar datos de mayor profundidad que los que ya estaban cargados, contiguos a éstos\n\t\t\t\t\t\tinmediateTopLoadEnabled:    false, // Permite cargar datos de menor profundidad que los que ya estaban cargados, contiguos a éstos\n\n\t\t\t\t\t\tunitMessage: (s.unit == 0) ? this.props.allMessages[35] : this.props.allMessages[36],\n\t\t\t\t\t\tloading: false,\n\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tawait this.props.dispatchChangeLoadView(false);\n\t\t\t\t// Esto hace que el botón que está en la parte derecha de la cabecera pueda abrir la vista para comenzar viendo la gráfica desde cierta altura\n\t\t\t\tthis.props.dispatchStackScreenPropsFunction(this.openInitLimitPreview);\n\t\t\t\t\n\t\t\t\tthis.setState({loadFunctionOpened: true});\n\t\t\t})\n\t}\n\n\tcomponentDidMount(){\n\t\t// Aquí inicializamos los escuchas que determinan si el teclado se está mostrando o no\n\t\tthis.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this.keyboardDidShow);\n\t\tthis.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this.keyboardDidHide);\n\n\t\tLog.log_action(10, this.props.user_id, this.state.isCore, this.state._id);\n\t}\n\n\t// Quitamos los escuchas del teclado cuando salimos de esta ventana\n\tcomponentWillUnmount() {\n\t\tthis.keyboardDidShowListener.remove();\n\t\tthis.keyboardDidHideListener.remove();\n\t\t// Reseteamos valores de la Tienda Redux\n\t\tthis.props.dispatchGammaRay_Extract({});\n\t\tthis.props.dispatchChangeLoadView(false);\n\t\tthis.props.dispatchStackScreenPropsFunction(() => {});\n\t}\n\n\t// Función que determina si se puede navegar a otra vista\n\tcanNavigate(){\n\t\treturn (!(this.state.plotViewVisible || this.state.takeShotPreviewVisible)) && this.props.enteringComponentEnabled;\n\t}\n\n\t// Caso en que el teclado se está mostrando\n\tkeyboardDidShow() {\n\t\tthis.setState({keyboardAvailable: true});\n\t}\n\n\t// Caso en que el teclado se ocultó\n\tkeyboardDidHide() {\n\t\tthis.setState({keyboardAvailable: false});\n\t}\n\n\t// Función para hacer visible el modal en el que se puede establecer una altura inicial que visualizar. Esto sirve cuando hay demasiados cargados\n\t// en esta vista, y por consiguiente habría que deslizar mucho la pantalla para alcanzar cierto objetivo\n\topenInitLimitPreview = () => {\n\t\tif (this.props.enteringComponentEnabled){\n\t\t\tthis.props.dispatchEnteringPermission(false);\n\t\t\tthis.setState({initLimitPreviewVisible: true});\n\t\t}\n\t}\n\n\t// Con esto se cierra el modal indicado arriba\n\tcloseInitLimitPreview = () => {\n\t\tthis.props.dispatchEnteringPermission(true);\n\t\tthis.setState({initLimitPreviewVisible: false, maxCapturedHeight: [null,null]});\n\t}\n\n\t// Aquí hacemos que la gráfica se dirija a donde está la altura indicada (o rechazamos dicha altura porque no está entre los límites).\n\tstablishInitLimit = () => {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tif (s.maxCapturedHeight[0] == null){\n\t\t\t// Alerta: \"Debe llenar todos los campos\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[5]);\n\t\t}\n\t\telse if ((s.maxCapturedHeight[0] > s.potentialMaxHeight[0]) || (s.maxCapturedHeight[0] < s.potentialMinHeight[0])){\n\t\t\t// Alerta: \"La altura debe estar entre los límites indicados\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[6]);\n\t\t}\n\t\telse {\n\t\t\t// Hay que establecer la condición de que el usuario especificó una altura, ya que en la función que determina si se deben cargar más datos\n\t\t\t// (determine_LimitExceeded) ello se toma en cuenta\n\t\t\tthis.setState({userStablishedInitLimit: true},\n\t\t\t\t() => {\n\t\t\t\t\t// Lo bueno es que la función \"scrollTo\" activa la condición \"onScroll\" del ScrollView vertical de la gráfica\n\t\t\t\t\tthis.refs.verticalScrollView.scrollTo({y: (s.potentialMaxHeight[0]-s.maxCapturedHeight[0])*s.factor, animated: false});\n\t\t\t\t\tthis.closeInitLimitPreview();\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t// Función para hacer visible el modal en el que se establecen los límites de captura. Pero antes de abrirlo, por defecto\n\t// les asigna a esos límites los mismos registrados en el objeto de estudio\n\topenTakeShotPreview = () => {\n\t\tif (this.props.enteringComponentEnabled) {\n\t\t\tthis.props.dispatchEnteringPermission(false);\n\n\t\t\tlet maxCapturedHeight = _.cloneDeep(this.state.potentialMaxHeight);\n\t\t\tlet minCapturedHeight = _.cloneDeep(this.state.potentialMinHeight);\n\t\t\tthis.setState({maxCapturedHeight, minCapturedHeight, takeShotPreviewVisible: true});\n\t\t}\n\t} \n\n\t// Para ocultar el formulario de cuando se está tomando una captura\n\tfinishTakingShot = () => {\n\t\tthis.props.dispatchEnteringPermission(true);\n\t\tthis.setState({\n\t\t\ttakingShot: false,\n\t\t\tplotViewVisible: false, takeShotPreviewVisible: false,\n\t\t\tverticalRule_ForShot: null, layerList_ForShot: null,\n\t\t\tgammaRayValues_ForShot: {},\n\t\t\tmaxCapturedHeight: [null,null], minCapturedHeight: [null,null], \n\t\t});\n\t}\n\n\t// Tomar captura de columna estratigráfica y/o gráficos de gamma-ray\n\ttakeShot = async() => {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Procedimiento auxiliar que es invocado cuando ya se han terminado de establecer los parámetros necesarios\n\t\tlet auxiliarTakeShot = (p) => {\n\t\t\tthis.setState({loading: false},\n\t\t\t\t() => {\n\t\t\t\t\tthis.refs.viewShot.capture()\n\t\t\t\t\t\t.then(async(uri) => {\n\t\t\t\t\t\t\tconst { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n\t\t\t\t\t\t\tif (status == 'granted'){\n\t\t\t\t\t\t\t\tconst asset = await ExpoMediaLibrary.createAssetAsync(uri);\n\t\t\t\t\t\t\t\tExpoFileSystem.deleteAsync(uri);\n\t\t\t\t\t\t\t\t// Alerta: \"La captura fue exportada exitosamente\"\n\t\t\t\t\t\t\t\tAlert.alert(p.allMessages[4], p.allMessages[7]);\n\t\t\t\t\t\t\t\tthis.finishTakingShot();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// Alerta: \"No tiene permiso para salvar en la galería\"\n\t\t\t\t\t\t\t\tAlert.alert(p.allMessages[4], p.allMessages[8]);\n\t\t\t\t\t\t\t\tthis.setState({takingShot: false});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\n\t\tif ((s.maxCapturedHeight[0] == null) || (s.minCapturedHeight[0] == null)){\n\t\t\t// Alerta: \"Debe llenar todos los campos\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[5]);\t\t\n\t\t}\n\t\telse if (s.maxCapturedHeight[0] > s.potentialMaxHeight[0]){\n\t\t\t// Alerta: \"Límite superior excedido\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[9]);\n\t\t}\n\t\telse if (s.minCapturedHeight[0] < s.potentialMinHeight[0]){\n\t\t\t// Alerta: \"Límite inferior excedido\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[10]);\n\t\t}\n\t\telse if (s.maxCapturedHeight[0] <= s.minCapturedHeight[0]){\n\t\t\t// Alerta: \"La cota superior debe ser mayor que la cota inferior\"\n\t\t\tAlert.alert(p.allMessages[4], p.allMessages[11]);\n\t\t}\n\t\telse {\n\t\t\tthis.setState({loading: true, takingShot: true, plotViewVisible: true, takeShotPreviewVisible: false}); \n\n\t\t\t/* Esperamos a cargar nuevamente los datos, porque recuerda que los cambios en los campos de los estratos (Litología, Estructura,...)\n\t\t\t   se reflejan en los componentes pero todavía no están en las variables de estado de esta vista */\n\t\t\tawait this.loadObjectInfo(false);\n\n\t\t\t// Determina si los límites de captura son los mismos del objeto completo\n\t\t\tconst limitsAreTheSame = (s.minCapturedHeight[0] == s.potentialMinHeight[0]) && (s.maxCapturedHeight[0] == s.potentialMaxHeight[0]);\n\n\t\t\t/* Nota que varias veces hubo que colocar \"this.state\" en lugar de sólo \"s\" porque puede que los valores guardados en la variable\n\t\t\t   \"s\" todavía no se haya actualizado después de la lectura a la base de datos. Por lo que he notado, lo que está en \"s\" sí se actualiza\n\t\t\t   cuando se modifica el \"this.state\", pero tarda más en hacerlo.\n\t\t\t */\n\t\t\tif (limitsAreTheSame){\n\t\t\t\tlet object = await {\n\t\t\t\t\tverticalRule_ForShot: s.verticalRule,\n\t\t\t\t\tlayerList_ForShot:    JSON.parse(JSON.stringify(this.state.layerList)), // Esto hace que se cree una copia del layerList, y no referenciemos al original\n\t\t\t\t};\n\n\t\t\t\tif (s.gammaRayIsRendered){\n\t\t\t\t\tobject.gammaRayValues_ForShot = await JSON.parse(JSON.stringify(s.gammaRayValues));\n\t\t\t\t}\n\t\t\t\tthis.setState(object, () => {auxiliarTakeShot(p)});\n\t\t\t} else {\n\t\t\t\tlet object = await {\n\t\t\t\t\tverticalRule_ForShot: this.createVerticalRule(s.minCapturedHeight[0], s.maxCapturedHeight[0]),\n\t\t\t\t\tlayerList_ForShot:    createLayerListForShot(s.minCapturedHeight[0], s.maxCapturedHeight[0], JSON.parse(JSON.stringify(this.state.layerList)), s.unit, D.SIZE_OF_UNIT/s.scale[0]),\n\t\t\t\t};\n\n\t\t\t\tif (s.gammaRayIsRendered){\n\t\t\t\t\tobject.gammaRayValues_ForShot = await createGammaRayValuesProvisional(s.minCapturedHeight[0], s.maxCapturedHeight[0], JSON.parse(JSON.stringify(s.gammaRayValues)), s.unit);\n\t\t\t\t}\n\t\t\t\tthis.setState(object, () => {auxiliarTakeShot(p)});\n\t\t\t}\t\n\t\t}\n\t}\n\n\t// Procedimiento para cambiar algún valor numérico\n\tonChangeNumericValue = async(variableName, text) => {\n\t\tlet result;\n\t\tlet object = {}\n\n\t\tif (auxiliarFunctions.isValidDecimalNumber(text)){\n\t\t\tresult = (text != \"-\") ? [parseFloat(text), text] : [null, \"-\"];\n\t\t} else {\n\t\t\tif ((text == \" \") || (text == \"\")){} \n\t\t\telse {\n\t\t\t\t// Alerta: \"El valor ingresado no es válido\"\n\t\t\t\tAlert.alert(this.props.allMessages[4], this.props.allMessages[22]);\n\t\t\t}\n\t\t\t/* Este this.setState con el await se coloca porque si el primer carácter del texto es inválido, como si por ejemplo comienza con \")\", entonces\n\t\t\t   el this.setState de abajo no es capaz de limpiar el cuadro de texto */\n\t\t\tobject[variableName] = [0, \"0\"];\n\t\t\tawait this.setState(object); \n\t\t\tresult = [null, null];\n\t\t}\n\t\tobject[variableName] = result;\n\t\tthis.setState(object);\n\t}\n\n\t// Para ir a la ventana del formulario del núcleo o afloramiento\n\teditObjectInfo = async() => {\n\t\tif (this.canNavigate()){\n\t\t\tthis.props.dispatchEnteringPermission(false);\n\t\t\t/* Es necesario volver a cargar los datos, porque si se modificó algún campo de algún módulo, como por ejemplo\n\t\t\t   una litología, eso se habrá guardado en la base de datos pero no en el estado de esta vista, así que si pasamos\n\t\t\t   como payload dicho estado, será información desactualizada, y si el usuario le da a \"Aceptar\" en el ObjectForm,\n\t\t\t   lo que se guarde será en base a lo desactualizado*/\n\t\t\tawait this.loadObjectInfo(false); \n\n\t\t\tthis.props.navigation.navigate({ key: 'ObjectForm', routeName: 'ObjectForm', params: {...this.state, returnToObjectScreen: true}});\n\t\t}\n\t}\n\n\t// Para ir al formulario donde se agrega un nuevo estrato\n\taddNewStratum = async() => {\n\t\tif (this.canNavigate()){\n\t\t\tthis.props.dispatchEnteringPermission(false);\n\t\t\t/* Es necesario volver a cargar los datos, porque si se modificó algún campo de algún módulo, como por ejemplo\n\t\t\t   una litología, eso se habrá guardado en la base de datos pero no en el estado de esta vista, así que como estamos\n\t\t\t   pasando como \"payload\" el layerList actual, se trabjará con el dato desactualizado */\n\t\t\tawait this.loadObjectInfo(false); \n\t\t\tlet {_id, unit, layerList, scale, baseHeight, isCore} = this.state;\n\t\t\tlet payload = {_id, unit, layerList, scale, baseHeight, isCore};\n\n\t\t\tthis.props.navigation.navigate({ key: 'ObjectStratumForm', routeName: 'ObjectStratumForm', params: payload});\n\t\t}\n\t}\n\n\t/* Función para actualizar los límites de los estratos cargados y también los límites de la regla vertical, lo cual es necesario\n\t   una vez que se elimina un estrato, o cuando dos estratos cambian de posición */\n\tupdate_StratumsRendered_VerticalRule = async() =>{\n\t\tlet s = this.state;\n\t\tlet verticalRule;\n\t\tlet {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} = this.state;\n\n\t\t( {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} \n\t\t\t= await this.getLayerList_Limits(minHeightStratums_rendered, maxHeightStratums_rendered) );\n\n\t\tif (s.isCore){\n\t\t\tlet {minHeightGammaRay_rendered, maxHeightGammaRay_rendered} = this.state;\n\t\t\tlet minHeightForVerticalRule = auxiliarFunctions.min(minHeightGammaRay_rendered, minHeightStratums_rendered);\n\t\t\tlet maxHeightForVerticalRule = auxiliarFunctions.max(maxHeightGammaRay_rendered, maxHeightStratums_rendered);\n\n\t\t\tverticalRule = this.createVerticalRule(minHeightForVerticalRule, maxHeightForVerticalRule, \n\t\t\t\t(s.potentialMaxHeight[0] - maxHeightForVerticalRule), \n\t\t\t\t(minHeightForVerticalRule - s.potentialMinHeight[0])\n\t\t\t);\n\t\t}\n\t\telse {\n\t\t\tverticalRule = this.createVerticalRule(minHeightStratums_rendered, maxHeightStratums_rendered,\n\t\t\t\t(s.potentialMaxHeight[0] - maxHeightStratums_rendered),\n\t\t\t\t(minHeightStratums_rendered - s.potentialMinHeight[0])\n\t\t\t);\n\t\t}\n\t\tthis.setState({verticalRule, minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered});\n\t}\n\n\t// Función para obtener tanto los índices de los estratos superior e inferior que se cargarán provisionalmente mientras estemos\n\t// deslizando la pantalla, así como también la altura máxima y mínima de entre todos esos estratos mostrados\n\tgetLayerList_Limits = async(bottom, top) => {\n\t\tlet s = this.state;\n\t\tlet minHeightStratums_rendered, maxHeightStratums_rendered;\n\t\tminHeightStratums_rendered = maxHeightStratums_rendered = null;\n\n\t\tlet indexesStratums = await getStratumsIndexes(bottom, top, JSON.parse(JSON.stringify(s.layerList)), s.unit, D.SIZE_OF_UNIT/s.scale[0]);\n\n\t\t// Nótese que como los estratos están ordenados de modo decreciente en cuanto a altura, entonces \"minIndexStratums\" será mayor\n\t\t// que \"maxIndexStratums\"\n\t\tlet minIndexStratums = indexesStratums[0]; // Índice del estrato tope inferiormente que se mostrará\n\t\tlet maxIndexStratums = indexesStratums[1]; // Índice del estrato tope superiormente que se mostrará\n\n\t\tif ((minIndexStratums != null) && (maxIndexStratums != null)){\n\t\t\tminHeightStratums_rendered = s.layerList[minIndexStratums].lowerLimit[s.unit][0]; \n\t\t\tmaxHeightStratums_rendered = s.layerList[maxIndexStratums].upperLimit[s.unit][0];\n\t\t}\n\t\treturn {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered};\n\t}\n\n\t// Eliminar el estrato inferior en el caso de los núcleos, y superior en el caso de los afloramientos\n\tremoveLastLayer = () => {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Procedimiento auxiliar que se invoca cuando se confirma que se quiere eliminar el estrato límite\n\t\tlet remove = (s,p) => {\n\t\t\tlet keyToRemove;\n\t\t\tlet array = s.layerList;\n\t\t\ts.numberLayers -= 1;\n\n\t\t\tlet absoluteMinHeightStratums, absoluteMaxHeightStratums, potentialMinHeightStratums, potentialMaxHeightStratums;\n\t\t\tabsoluteMinHeightStratums = absoluteMaxHeightStratums = potentialMinHeightStratums = potentialMaxHeightStratums = null;\n\n\t\t\tif (s.isCore){\n\t\t\t\tkeyToRemove = array[array.length-1].key;\n\t\t\t\tarray.pop();\n\t\t\t\t\n\t\t\t\tif (s.numberLayers != 0){\n\t\t\t\t\tabsoluteMinHeightStratums = potentialMinHeightStratums = s.layerList[s.numberLayers-1].lowerLimit[s.unit][0];\n\t\t\t\t} else {\n\t\t\t\t\tabsoluteMinHeightStratums = potentialMinHeightStratums = s.baseHeight[s.unit][0];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// La altura mínima en total (estratos/gamma-ray) pudo haber cambiado. La máxima no la tocamos porque los estratos siempre comienzan\n\t\t\t\t// en el tope del núcleo. No pueden empezar más abajo, a diferencia de los rayos-gamma.\n\t\t\t\tlet potentialMinHeight = auxiliarFunctions.repairNumber(auxiliarFunctions.min(potentialMinHeightStratums, s.potentialMinHeightGammaRay),20);\n\t\t\t\tlet absoluteMinHeight = auxiliarFunctions.repairNumber(auxiliarFunctions.min(absoluteMinHeightStratums, s.absoluteMinHeightGammaRay),20)[0];\n\n\t\t\t\tthis.setState({layerList: array, absoluteMinHeight, potentialMinHeight, potentialMinHeightStratums, absoluteMinHeightStratums}, \n\t\t\t\t\t() => {this.update_StratumsRendered_VerticalRule()});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tkeyToRemove = array[0].key;\n\t\t\t\tarray.shift();\n\n\t\t\t\tpotentialMaxHeight = (s.numberLayers != 0) ? _.cloneDeep(s.layerList[0].upperLimit[s.unit]) : _.cloneDeep(s.potentialMinHeight);\n\t\t\t\tabsoluteMaxHeight = absoluteMaxHeightStratums = potentialMaxHeightStratums = potentialMaxHeight[0];\n\n\t\t\t\tthis.setState({layerList: array, absoluteMaxHeight, absoluteMaxHeightStratums, potentialMaxHeightStratums, potentialMaxHeight}, \n\t\t\t\t\t() => {this.update_StratumsRendered_VerticalRule()});\n\t\t\t}\n\n\t\t\t// Los argumentos son: 1) user_id; 2) objectOfStudy_id; 3) layerList; 4) isCore; 5) localDB; 6) stratum_key=keyToRemove; 7) kind = 2\n\t\t\tDatabase.saveLayerList(p.user_id, s._id, array, s.isCore, p.localDB, keyToRemove, 2);\n\t\t}\n\n\t\tif ((s.numberLayers > 0) && (s.stratumsAreAvailable)){\n\t\t\t// Alerta:\n\t\t\t// Mensaje 1: \"¿Seguro de que desea eliminar el estrato inferior?\"\n\t\t\t// Mensaje 2: \"¿Seguro de que desea eliminar el estrato superior?\"\n\t\t\tAlert.alert(p.allMessages[4], (s.isCore ? p.allMessages[12] : p.allMessages[13]),\n\t\t\t\t[\n\t\t\t\t\t// Mensaje: \"Sí\"\n\t\t\t\t\t{text: p.allMessages[14], onPress: () => remove(s,p)},\n\t\t\t\t\t// Mensaje: \"No\"\n\t\t\t\t\t{text: p.allMessages[15]},\n\t\t\t\t] \n\t\t\t)\t\n\t\t}\n\t}\n\n\t// Sirve para subir al estrato de lugar una posición\n\triseLayerPosition(layer,i){\n\t\tif (i > 0){\n\t\t\tconst li = riseLayer(this.state.layerList, layer, i);\n\t\t\tthis.setState({layerList: li}, () => {this.update_StratumsRendered_VerticalRule()});\n\t\t\tDatabase.saveLayerList(this.props.user_id,this.state._id, li, this.state.isCore, this.props.localDB);\n\t\t}\n\t}\n\n\t// Sirve para bajar al estrato de lugar una posición\n\tlowerLayerPosition(layer,i){\n\t\tif (i < this.state.numberLayers - 1){\n\t\t\tconst li = lowerLayer(this.state.layerList, layer, i);\n\t\t\tthis.setState({layerList: li}, () => {this.update_StratumsRendered_VerticalRule()});\n\t\t\tDatabase.saveLayerList(this.props.user_id,this.state._id, li, this.state.isCore, this.props.localDB);\t\n\t\t}\n\t}\n\n\t// Mostrar la regla lateral izquierda con las medidas según la escala\n\tcreateVerticalRule(potentialMinHeight, potentialMaxHeight, superiorSpace=null, inferiorSpace=null) {\n\t\tlet s = this.state;\n\t\tvar totalHeight = 0; // Altura total que debe ocupar la regla\n\n\t\tif ((potentialMinHeight != null) && (potentialMaxHeight != null)){\n\t\t\ttotalHeight = (potentialMaxHeight - potentialMinHeight) * s.factor;\n\t\t}\n\t\tconst added = s.showCarbonatesRule ? 0 : (s.isCore ? 5 : 0);\n\n\t\t// Estos espacios sirven para que no se genere toda la regla, gastando memoria, sino que sólo haya una parte visible.\n\t\tsuperiorSpace = ((superiorSpace==null) ? 0 : (superiorSpace * s.factor));\n\t\tinferiorSpace = ((inferiorSpace==null) ? added : (inferiorSpace * s.factor + added));\n\n\t\tconst integer = parseInt(totalHeight / 65);\n\t\tconst numberOfDivisions = (totalHeight != 0) ? (integer+1) : 0;\n\n\t\tlet lastIndex, difference;\n\n\t\tvar array = []; // Creamos un arreglo cuyos elementos son los valores que mostrará la regla\n\t\tlet ruleView; // Aquí almacenaremos la parte que cambia dependiendo de si se trata de un afloramiento o un núcleo\n\t\t\n\n\t\t// Caso en que el objeto de estudio es un núcleo\n\t\tif (s.isCore){\n\t\t\tfor (i = 0; i < numberOfDivisions; i++){\n\t\t\t\tarray.push({value: parseFloat((-1) * s.scale[0] * parseFloat(i) + potentialMaxHeight).toFixed(2)})\n\t\t\t}\n\t\t\tlastIndex = array.length - 1;\n\n\t\t\truleView = (\n\t\t\t\t<View>\n\t\t\t\t\t{array.map((item,i) => (\n\t\t\t\t\t\t<View style={{flexDirection: 'row', justifyContent: 'flex-end'}}  key={i}>\n\t\t\t\t\t\t\t<View style = {{height: (item.value != potentialMaxHeight) ? 45 : 10, paddingRight: 5, flexDirection: 'column', justifyContent: 'flex-start'}}>\n\t\t\t\t\t\t\t\t<Text style = {{fontSize: 12}}>{item.value}{(s.unit == 0) ? \"m\" : \"ft\"}</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t<View style = {{borderTopColor: 'black', borderTopWidth: 1, flexDirection: 'row', width: 10, paddingTop: (i==lastIndex) ? 15 : D.SIZE_OF_UNIT-1}}/>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t))}\n\t\t\t\t</View>\n\t\t\t)\n\t\t} else {\n\t\t\t// Caso en que el objeto de estudio es un afloramiento\n\t\t\tdifference = totalHeight - integer * 65; \n\n\t\t\t// Como los espacios se cuentan desde la parte inferior, guardamos los valores en el arreglo en orden inverso\n\t\t\tfor (i = 0; i < numberOfDivisions; i++){\n\t\t\t\tarray.unshift({value: parseFloat(s.scale[0] * parseFloat(i) + potentialMinHeight).toFixed(2)})\n\t\t\t}\n\t\t\tlastIndex = array.length - 1;\n\n\t\t\truleView = (\n\t\t\t\t<View>\n\t\t\t\t\t{(difference > 0) && // Esto porque los espacios se empiezan a contar desde la parte superior, no la inferior, así que si hay un sobrante, el cero no estará en el límite inferior.\n\t\t\t\t\t\t<View style = {{paddingTop: difference}}/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{array.map((item,i) => (\n\t\t\t\t\t\t<View style={{flexDirection: 'row', justifyContent: 'flex-end'}}  key={i}>\n\t\t\t\t\t\t\t<View style = {{height: (item.value != potentialMinHeight) ? 45 : 10, paddingRight: 5, flexDirection: 'column', justifyContent: 'flex-start'}}>\n\t\t\t\t\t\t\t\t<Text style = {{fontSize: 12}}>{item.value}{(s.unit == 0) ? \"m\" : \"ft\"}</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t<View style = {{borderTopColor: 'black', borderTopWidth: 1, flexDirection: 'row', width: 10, paddingTop: (i==lastIndex) ? 25 : D.SIZE_OF_UNIT-1}}/>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t))}\n\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\treturn (\t\n\t\t\t<View style = {{flexDirection: 'column'}}>\n\t\t\t\t{/* Como no siempre cargamos la gráfica completa sino sólo lo visible, entonces también podemos omitir la parte de la regla que no está visible*/}\n\t\t\t\t<View style = {{height: superiorSpace}}/>\n\t\t\t\t<View style = {{flexDirection: 'row'}}>\n\t\t\t\t\t{/*Parte de la regla que cambia dependiendo de si es un afloramiento o un núcleo*/}\n\t\t\t\t\t{ruleView}\n\t\t\t\t\t<View style = {{height: totalHeight + 1, flexDirection: 'column', borderWidth: 0.5, borderColor: 'black'}}/>\n\t\t\t\t</View>\n\n\t\t\t\t{/*// Como no siempre cargamos la gráfica completa sino sólo lo visible, entonces también podemos omitir la parte de la regla que no está visible*/}\n\t\t\t\t<View style = {{height: inferiorSpace}}/>\n\t\t\t</View>\n\t\t);\n\t}\n\n\n\t/// Función para crear las etiquetas superiores de la gráfica del gamma-ray, que representan precisamente valores de rayos-gamma\n\tcreateGammaRaySuperiorLabels(){\n\t\tlet s = this.state;\n\n\t\tif (s.gammaRayValues && s.gammaRayValues.hasOwnProperty('yValues')){\n\t\t\t// Separación entre cada medición de gamma-ray. Esta fórmula es la misma que se utiliza en el archivo abstract-chart.js de\n\t\t\t// la librería \"react-native-chart-kit\" para establecer la separación entre medicíones, sólo que escrita de otra forma\n\t\t\tconst separation = 3 * (D.GAMMA_RAY_WIDTH+40) / (4 * NUMBER_VERTICAL_GR_SEGMENTS); \n\t\t\tvar array = []; // Valores que se mostrarán encima de la gráfica\n\n\t\t\tconst scaler = (s.gammaRayValues.maxYValue - s.gammaRayValues.minYValue) || 1;\n\t\t\tconst div = scaler/NUMBER_VERTICAL_GR_SEGMENTS;\n\n\t\t\tfor (i = 0; i < NUMBER_VERTICAL_GR_SEGMENTS+1; i++){\n\t\t\t\tarray.push( (div * i + s.gammaRayValues.minYValue).toFixed(2));\n\t\t\t}\n\n\t\t\tconst returnedView = (\n\t\t\t\t<View style = {{flexDirection: 'column', height: 40}}>\n\t\t\t\t\t<View style = {{flexDirection: 'row'}}>\n\t\t\t\t\t\t{array.map((item,i) => (\n\t\t\t\t\t\t\t<View style={{flexDirection: 'column', justifyContent: 'flex-end'}}  key={i}>\n\t\t\t\t\t\t\t\t{/*Texto de la regla*/}\n\t\t\t\t\t\t\t\t<View \n\t\t\t\t\t\t\t\t\tstyle = {{\n\t\t\t\t\t\t\t\t\t\twidth:          separation, \n\t\t\t\t\t\t\t\t\t\theight:         40,\n\t\t\t\t\t\t\t\t\t\tflexDirection:  'row', \n\t\t\t\t\t\t\t\t\t\tjustifyContent: 'flex-start', \n\t\t\t\t\t\t\t\t\t\talignItems:     'flex-start',\n\t\t\t\t\t\t\t\t\t\tpaddingTop:     12,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Text style = {{fontSize: 10, opacity: 0.8, transform: [{ rotate: \"90deg\" }]}}>\n\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t);\n\n\t\t\tthis.setState({gammaRaySuperiorLabels: returnedView});\n\t\t}\n\t}\n\n\t/// Función para obtener el extracto de valores de gamma-ray que se mostrárá, porque recuérdese que no\n\t//  siempre podremos mostrar todo el gráfico debido al límite de memoria posible\n\tgetGammaRayValues_Extract = async(topHeight) => {\n\t\tlet s = this.state;\n\n\t\t/* Aquí construimos el objeto de valores gamma-ray que se mostrará. Nótese que el límite inferior tiene que estar a una altura SPACES_TO_SHOW*s.scale[0]\n\t\t   menos que la altura superior. Esta diferencia fue probada empíricamente con los dos archivos de gamma-ray provistos por el profesor Baena */\n\t\tawait this.props.dispatchGammaRay_Extract(\n\t\t\tcreateGammaRayValuesProvisional(topHeight - SPACES_TO_SHOW*s.scale[0], topHeight, JSON.parse(JSON.stringify(s.gammaRayValues)), s.unit)\n\t\t);\n\t\tlet minHeightGammaRay_rendered, maxHeightGammaRay_rendered;\n\t\tminHeightGammaRay_rendered = maxHeightGammaRay_rendered = null;\n\n\t\tif (this.props.gammaRayValues_Extract.numberMeasurements > 0){\n\t\t\tlet len_MinusOne = this.props.gammaRayValues_Extract.numberMeasurements - 1;\n\t\t\tminHeightGammaRay_rendered = (s.unit == 0) ? this.props.gammaRayValues_Extract.xValuesMeters[len_MinusOne] : this.props.gammaRayValues_Extract.xValuesFeet[len_MinusOne];\n\t\t\tmaxHeightGammaRay_rendered = (s.unit == 0) ? this.props.gammaRayValues_Extract.xValuesMeters[0] : this.props.gammaRayValues_Extract.xValuesFeet[0];\n\t\t}\n\n\t\treturn {minHeightGammaRay_rendered, maxHeightGammaRay_rendered};\n\t}\n\n\t// Encabezado del núcleo o afloramiento, que aparece en la parte superior, donde se muestra su nombre,\n \t// la escala, los botones para agregar o eliminar un nuevo estrato, etc.\n\tobjectInformationHeader(takingShot = false){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tlet completeShot = false; // Determina si una captura va a ser completa (altura total) o no\n\n\t\tif (takingShot){ \n\t\t\tlet minLimitMatches = (this.state.minCapturedHeight[0] == s.absoluteMinHeight);\n\t\t\tlet maxLimitMatches = (this.state.maxCapturedHeight[0] == s.absoluteMaxHeight);\n\t\t\tcompleteShot = minLimitMatches && maxLimitMatches;\n\t\t}\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t{/*Caso en que no estamos tomando una captura de la vista*/}\n\t\t\t\t{!takingShot &&\n\t\t\t\t\t<View style = {localStyles.objectInfo_header}>\n\t\t\t\t\t\t{/*Parte izquierda superior de la pantalla, que muestra el nombre del objeto de estudio, su altura base y la escala empleada*/}\n\t\t\t\t\t\t<View style = {localStyles.objectInfo_header_text}>\n\t\t\t\t\t\t\t<Text style = {{fontWeight: 'bold', fontSize: 12}}>{s.name}</Text>\n\n\t\t\t\t\t\t\t{/*//Mensaje: \"Escala\" */}\n\t\t\t\t\t\t\t<Text style = {{fontSize: 12}}>{p.allMessages[16]}: 1:{s.scale[0]}</Text> \n\t\t\t\t\t\t\t{/*//Mensaje: \"Altura base\" */}\n\t\t\t\t\t\t\t<Text style = {{fontSize: 12}}>{p.allMessages[17]}: {(s.unit == 0) ? s.baseHeight[0][0] + \" m\" : s.baseHeight[1][0] + \" ft\"}</Text> \n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{s.stratumsAreAvailable && // Botón para agregar un nuevo estrato\n\t\t\t\t\t\t\t<View style = {{flex:0.3, padding:10, width:10}}>\n\t\t\t\t\t\t\t\t<ButtonNoIcon title = \"+\" onPress = {() => this.addNewStratum()}/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{s.stratumsAreAvailable && // Botón para eliminar el estrato que esté en la parte superior\n\t\t\t\t\t\t\t<View style = {{flex:0.3, padding:10, width:10}}> \n\t\t\t\t\t\t\t\t<ButtonNoIcon title = \"-\" onPress = {this.removeLastLayer} color = 'red'/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\t\t\t\t\t</View>\n\t\t\t\t}\n\n\t\t\t\t{/*Caso en que estamos tomando una captura de la vista*/}\n\t\t\t\t{takingShot &&\n\t\t\t\t\t<View style = {{...localStyles.objectInfo_header, height: 75, paddingTop: 15}}>\n\t\t\t\t\t\t{/*Parte superior, que muestra el nombre del objeto; indica si se tomó completo o \n\t\t\t\t\t\t   sólo un extracto; dice su localización y su escala*/}\n\t\t\t\t\t\t<View style = {{...localStyles.objectInfo_header_text, alignItems: 'center'}}>\n\t\t\t\t\t\t\t{/*Mensajes: \"Núcleo\"  \"Afloramiento\" */}\n\t\t\t\t\t\t\t<Text style = {{fontWeight: 'bold', fontSize: 25}}>{(s.isCore) ? p.allMessages[2] : p.allMessages[3]} {s.name}</Text>\n\n\t\t\t\t\t\t\t{/*//Mensaje: \"Localización\"*/}\n\t\t\t\t\t\t\t{(s.locationInWords != null) && (s.locationInWords != \"\") && (s.locationInWords != \" \") &&\n\t\t\t\t\t\t\t\t<Text style = {{fontSize: 15}}>{p.allMessages[18]}: {s.locationInWords}</Text>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{/*//En esta parte se indica si la toma es completa (todo lo que se ha agregado) o es un extracto*/}\n\t\t\t\t\t\t\t<View style = {{alignItems: 'center'}}>\n\t\t\t\t\t\t\t\t{/*Mensajes: \"Toma completa\" \"Extracto\"*/}\n\t\t\t\t\t\t\t\t<Text style = {{fontSize: 15}}>({completeShot ? p.allMessages[19] : p.allMessages[20]})</Text>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/*Mensaje: \"Escala\" */}\n\t\t\t\t\t\t\t<Text style = {{fontSize: 15}}>{p.allMessages[16]}: 1:{s.scale[0]}</Text> \n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Encabezado de las gráficas, que incluye la columna estratigráfica y quizás la gráfica de rayos gamma\n\tgraphicsColumnHeader(space, takingShot=false){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tvar conditionGammaRay = false; // Determina si se mostrarán desde esta vista las etiquetas con los valores de gamma-ray\n\n\t\tif (s.showGammaRay){\n\t\t\tvar gammaRayValues = (takingShot) ? this.state.gammaRayValues_ForShot : s.gammaRayValues ;\n\t\t}\n\n\t\t// Vista auxiliar que se utiliza varias veces\n\t\tfunction header_aux(headerWidth, message){\n\t\t\treturn(\n\t\t\t\t<View style = {{...localStyles.field_section, width: headerWidth}}>\n\t\t\t\t\t<Text style = {{fontWeight: 'bold'}}>{message}</Text>   \n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\t\t\t\t\n\t\t// Tenemos que poner este condicional, porque se tarda un poco en asignar el objeto a la variable\n\t\tif ((!s.isCore) || (!s.showGammaRay) || (s.minHeightGammaRay==null) || gammaRayValues){\n\t\t\tif (s.showGammaRay){\n\t\t\t\tconditionGammaRay = (gammaRayValues.hasOwnProperty('xValuesMeters') && (gammaRayValues.xValuesMeters.length > 0));\n\t\t\t\tif (takingShot && conditionGammaRay){\n\t\t\t\t\tconst maxHeightGammaRay = (s.unit == 0) ? gammaRayValues.xValuesMeters[0] : gammaRayValues.xValuesFeet[0];\n\n\t\t\t\t\t// Si la diferencia entre la máxima altura a mostrar del núcleo y el máximo valor leído del gamma-ray,\n\t\t\t\t\t// escalándola según el tamaño de cada unidad y la escala actual, es mayor que 40, no mostraremos \n\t\t\t\t\t// aquí las eqtiquetas superiores sino que lo haremos desde el código donde se crea la gráfica\n\t\t\t\t\tif ((this.state.maxCapturedHeight[0] - maxHeightGammaRay) * s.factor > 40){\n\t\t\t\t\t\tconditionGammaRay = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn(\n\t\t\t\t<View>\n\t\t\t\t\t{/*En esta vista está la cabecera con los títulos de los campos: \"Litología\", \"Estructura sedimentaria\", etc.*/}\n\t\t\t\t\t<View style = {{...localStyles.graphicColumn_header, paddingLeft: space}}>\n\n\t\t\t\t\t\t{/*Mensaje: \"Rayos gamma\"*/}\n\t\t\t\t\t\t{s.showGammaRay && header_aux(D.GAMMA_RAY_WIDTH, p.allMessages[21])}\n\n\t\t\t\t\t\t{/*Mensaje: \"Información de estrato\"*/}\n\t\t\t\t\t\t{s.showInfo && header_aux(D.STRATUM_INFORMATION_WIDTH, p.allMessages[22])}\n\n\t\t\t\t\t\t{/*Mensaje: \"Litología\"*/}\n\t\t\t\t\t\t{s.showLithology && header_aux(D.LITHOLOGY_PICKER_WIDTH, p.allMessages[23])}\n\n\t\t\t\t\t\t{/*Mensaje: \"Estructura sedimentaria\"*/}\n\t\t\t\t\t\t{s.showStructure && header_aux(D.STRUCTURE_PICKER_WIDTH, p.allMessages[24])}\n\n\t\t\t\t\t\t{/*Mensaje: \"Fósiles\"*/}\n\t\t\t\t\t\t{s.showFossils && header_aux(D.FOSSIL_PICKER_WIDTH, p.allMessages[25])} \n\n\t\t\t\t\t\t{/*Mensaje: \"Fotografías\"*/}\n\t\t\t\t\t\t{s.showPictures && header_aux(D.IMAGE_PICKER_WIDTH, p.allMessages[26])} \n\n\t\t\t\t\t\t{/*Mensaje: \"Notas de texto\"*/}\n\t\t\t\t\t\t{s.showNotes && header_aux(D.NOTE_WRITER_WIDTH, p.allMessages[27])} \n\t\t\t\t\t</View>\n\n\t\t\t\t\t{/*//En esta parte están los datos superiores, como valores de gamma-ray y la regla de los no carbonatos*/}\n\t\t\t\t\t<View style = {{flexDirection: 'row', paddingLeft: space}}>\n\n\t\t\t\t\t\t{s.isCore && s.showGammaRay && \n\t\t\t\t\t\t\t<View style = {{flexDirection: 'column'}}>\n\t\t\t\t\t\t\t\t<View style = {{\n\t\t\t\t\t\t\t\t\theight: conditionGammaRay ? 35 : 25, \n\t\t\t\t\t\t\t\t\tpaddingLeft: D.GAMMA_RAY_WIDTH \n\t\t\t\t\t\t\t\t\t\t- conditionGammaRay * (3*(D.GAMMA_RAY_WIDTH+40)/4 + 16) \n\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t{/*El \"3 * (D.GAMMA_RAY_WIDTH+40)/4\" que resta aparece porque la gráfica LineChart utiliza 3/4 de la altura proporcionada\n\t\t\t\t\t\t\t       (que en nuestro caso es la anchura) para representar la gráfica. El otro 1/4 es para colocar las etiquetas del eje x,\n\t\t\t\t\t\t\t       que son las verticales en nuestro caso. Además, recuérdese que a LineChart le pasamos como altura \"D.GAMMA_RAY_WIDTH+40\"\n\t\t\t\t\t\t\t       y no sólo D.GAMMA_RAY_WIDTH. El -16 es para terminar de ajustar los valores */}\n\n\t\t\t\t\t\t\t\t\t{!takingShot && s.gammaRaySuperiorLabels}\n\t\t\t\t\t\t\t\t\t{takingShot && conditionGammaRay && this.state.gammaRaySuperiorLabels}\n\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t{/*//Esto es sólo para dejar espacio entre los valores y la gráfica*/}\n\t\t\t\t\t\t\t\t<View style = {{height: 2}}/> \n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{/*//Aquí se muestra la regla que indica el diámetro del grano para los no carbonatos*/}   \n\t\t\t\t\t\t{s.showLithology && s.showNoCarbonatesRule &&\n\n\t\t\t\t\t\t\t<View style = {{\n\t\t\t\t\t\t\t\tpaddingLeft: s.showInfo * D.STRATUM_INFORMATION_WIDTH // Espacio reservado para la información de estrato\n\t\t\t\t\t\t\t\t\t\t\t + 50 // Para que la imagen siempre tenga un tamaño; de lo contrario, en la medición mínima no se mostraría nada\n\t\t\t\t\t\t\t\t\t\t\t - (s.isCore && s.showGammaRay && conditionGammaRay) *\n\t\t\t\t\t\t\t\t\t\t\t \t(\t// Recuperamos el espacio que se corrieron las etiquetas superiores del gamma-ray\n\t\t\t\t\t\t\t\t\t\t\t \t\tD.GAMMA_RAY_WIDTH - 3*(D.GAMMA_RAY_WIDTH+40)/4 - 16 + \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Sobrante de las etiquetas del gamma-ray\n\t\t\t\t\t\t\t\t\t\t\t\t\t( D.GAMMA_RAY_WIDTH*(3/4 + 3/(4*NUMBER_VERTICAL_GR_SEGMENTS) - 1) + 30*(1 + 1/NUMBER_VERTICAL_GR_SEGMENTS) )\n\t\t\t\t\t\t\t\t            \t), \n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{/*Se intentó usar la posición absoluta en vez de la relativa para evitar la complicada fórmula anterior, pero entonces los estratos se montaban sobre la regla*/}\n\n\t\t\t\t\t\t\t\t{/*Esto es para dejar un espacio superior cuando se muestra el gamma-ray, porque como allí la altura total es 37 = 35+2, entonces\n\t\t\t\t\t\t\t\t   esta regla, que ocupa menos espacio, se centra verticalmente, y eso no nos interesa. Queremos que esté tan pegada al estrato como cuando\n\t\t\t\t\t\t\t\t   no hay gamma-ray, por lo que ponemos una vista de altura 10, que es precisamente lo que falta aquí en total para alcanzar los 37*/}\n\t\t\t\t\t\t\t\t{(s.showGammaRay && conditionGammaRay) &&\n\t\t\t\t\t\t\t\t\t<View style = {{height: 10}}/> \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t<p.noCarbonatesRule/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t)\n\t\t} \n\t}\n\n\t/// Esto es para mostrar los campos propiamente de cada uno de los estratos (Información, Litología, etc.)\n\trenderStratums(takingShot = false) {\n\t\tlet state = this.state;\n\t\tlet layerList = (takingShot) ? this.state.layerList_ForShot : this.state.layerList;\n\n\t\t/* Procedimiento auxiliar para mostrar un botón que sube o baja un estrato de posición según se indique\n\t\t   Si \"rise\" es True, el botón sube al estrato de posición, y si es False, lo baja */\n\t\tlet buttonMoveStratum = (rise, buttonSize, item, i) => {\n\t\t\treturn (\n\t\t\t\t<View style = {{alignItems:'center', justifyContent:'center', paddingRight: (rise ? 8 : 0), paddingLeft: (rise ? 0 : 8)}}>\n\t\t\t\t\t<ButtonWithIcon\n\t\t\t\t\t\t/* Es necesario poner el \"() =>\" para que el \"this\" se refiera al alcance externo \n\t\t\t\t\t\t   y no al map del \"layerList.map\". Si se le quita, el botón se activa solo automáticamente */\n\t\t\t\t\t\tonPress = {rise ? () => this.riseLayerPosition(item,i) : () => this.lowerLayerPosition(item,i)}\n\t\t\t\t\t\ttype    = \"outline\" \n\t\t\t\t\t\ticon    = {<Icon  name={rise ? \"arrow-up\" : \"arrow-down\"}  size={buttonSize}  color=\"black\"/>}\n\t\t\t\t\t\traised\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\t/// Tenemos que poner este condicional, porque se tarda un poco en asignar la columna estratigráfica a la variable\n\t\tif (layerList){\n\t\t\treturn layerList.map((item,i) => (\n\t\t\t\t<View key={item.key+'_row'}>\n\t\t\t\t\t{(state.maxIndexStratums <= i) && (i <= state.minIndexStratums) &&\n\t\t\t\t\t\t<View style = {localStyles.container_row}> \n\n\t\t\t\t\t\t\t{/*Botones para subir o bajar el estrato una posición, que sólo se muestran si no está \n\t\t\t\t\t\t\t   la gráfica de gamma-ray y si no se está haciendo una captura del núcleo o afloramiento*/}\n\t\t\t\t\t\t\t{ ((!state.isCore) || (!state.showGammaRay)) && (!takingShot) &&\n\t\t\t\t\t\t\t\t<View style = {{width: UP_DOWN_BUTTONS_WIDTH, flexDirection: 'row', alignItems: 'center', justifyContent: 'center', height: item.shownHeight[state.unit]}}>\n\t\t\t\t\t\t\t\t\t{ (item.shownHeight[state.unit] >= 39) && buttonMoveStratum(true, 15, item, i)}\n\t\t\t\t\t\t\t\t\t{ (item.shownHeight[state.unit] >= 39) && buttonMoveStratum(false, 15, item, i)}\n\n\t\t\t\t\t\t\t\t\t{ (item.shownHeight[state.unit] >= 30) && (item.shownHeight[state.unit] < 39) && buttonMoveStratum(true, item.shownHeight[state.unit] * 0.2, item, i)}\n\t\t\t\t\t\t\t\t\t{ (item.shownHeight[state.unit] >= 30) && (item.shownHeight[state.unit] < 39) && buttonMoveStratum(false, item.shownHeight[state.unit] * 0.2, item, i)}\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{/*//Componentes de los estratos*/}\n\t\t\t\t\t\t\t{state.showInfo &&\n\t\t\t\t\t\t\t\t<Components.StratumInformation \n\t\t\t\t\t\t\t\t\theight      = {item.shownHeight[state.unit]} \n\t\t\t\t\t\t\t\t\tstratumName = {item.name}\n\t\t\t\t\t\t\t\t\tObject_id   = {state._id}\n\t\t\t\t\t\t\t\t\tthickness   = {item.thickness}\n\t\t\t\t\t\t\t\t\tlowerLimit  = {item.lowerLimit}\n\t\t\t\t\t\t\t\t\tupperLimit  = {item.upperLimit}\n\t\t\t\t\t\t\t\t\twidth       = {D.STRATUM_INFORMATION_WIDTH}\n\t\t\t\t\t\t\t\t\tindex       = {i}\n\t\t\t\t\t\t\t\t\tstratum_key = {item.key}\n\t\t\t\t\t\t\t\t\tunit        = {state.unit}\n\t\t\t\t\t\t\t\t\tbaseHeight  = {state.baseHeight}\n\t\t\t\t\t\t\t\t\tnavigation  = {this.props.navigation}\n\t\t\t\t\t\t\t\t\tscale       = {state.scale}\n\t\t\t\t\t\t\t\t\tisCore      = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot  = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{state.showLithology &&\n\t\t\t\t\t\t\t\t<Components.LithologyPicker\n\t\t\t\t\t\t\t\t\theight       = {item.shownHeight[state.unit]} \n\t\t\t\t\t\t\t\t\tstratumName  = {item.name}\n\t\t\t\t\t\t\t\t\tObject_id    = {this.state._id} \n\t\t\t\t\t\t\t\t\tindex        = {i}\n\t\t\t\t\t\t\t\t\tstratum_key  = {item.key}\n\t\t\t\t\t\t\t\t\tdata         = {item.lithology_data}\n\t\t\t\t\t\t\t\t\twidth        = {D.LITHOLOGY_PICKER_WIDTH}\n\t\t\t\t\t\t\t\t\tisCore       = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot   = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{state.showStructure && \n\t\t\t\t\t\t\t\t<Components.StructurePicker  \n\t\t\t\t\t\t\t\t\theight       = {item.shownHeight[state.unit]}\n\t\t\t\t\t\t\t\t\tstratumName  = {item.name}\n\t\t\t\t\t\t\t\t\tObject_id    = {state._id} \n\t\t\t\t\t\t\t\t\tindex        = {i}\n\t\t\t\t\t\t\t\t\tstratum_key  = {item.key}\n\t\t\t\t\t\t\t\t\tdata         = {item.structure_data}\n\t\t\t\t\t\t\t\t\twidth        = {D.STRUCTURE_PICKER_WIDTH}\n\t\t\t\t\t\t\t\t\tisCore       = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot   = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{state.showFossils &&\n\t\t\t\t\t\t\t\t<Components.FossilPicker       \n\t\t\t\t\t\t\t\t\theight       = {item.shownHeight[state.unit]} \n\t\t\t\t\t\t\t\t\tstratumName  = {item.name}\n\t\t\t\t\t\t\t\t\tObject_id    = {state._id}     \n\t\t\t\t\t\t\t\t\tindex        = {i}\n\t\t\t\t\t\t\t\t\tstratum_key  = {item.key}\n\t\t\t\t\t\t\t\t\tnavigation   = {this.props.navigation}\n\t\t\t\t\t\t\t\t\tdata         = {item.fossil_data}\n\t\t\t\t\t\t\t\t\twidth        = {D.FOSSIL_PICKER_WIDTH}\n\t\t\t\t\t\t\t\t\tisCore       = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot   = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{state.showPictures &&\n\t\t\t\t\t\t\t\t<Components.ImagePicker\n\t\t\t\t\t\t\t\t\theight       = {item.shownHeight[state.unit]}\n\t\t\t\t\t\t\t\t\tstratumName  = {item.name}\n\t\t\t\t\t\t\t\t\tObject_id    = {state._id} \n\t\t\t\t\t\t\t\t\tindex        = {i}\n\t\t\t\t\t\t\t\t\tstratum_key  = {item.key}\n\t\t\t\t\t\t\t\t\tdata         = {item.image_data}\n\t\t\t\t\t\t\t\t\twidth        = {D.IMAGE_PICKER_WIDTH}\n\t\t\t\t\t\t\t\t\tisCore       = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot   = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{state.showNotes &&\n\t\t\t\t\t\t\t\t<Components.NoteWriter\n\t\t\t\t\t\t\t\t\theight       = {item.shownHeight[state.unit]}\n\t\t\t\t\t\t\t\t\tObject_id    = {state._id} \n\t\t\t\t\t\t\t\t\tindex        = {i}\n\t\t\t\t\t\t\t\t\tstratum_key  = {item.key}\n\t\t\t\t\t\t\t\t\tdata         = {item.note_data}\n\t\t\t\t\t\t\t\t\twidth        = {D.NOTE_WRITER_WIDTH}\n\t\t\t\t\t\t\t\t\tisCore       = {state.isCore}\n\t\t\t\t\t\t\t\t\ttakingShot   = {takingShot}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t}\n\t\t\t\t\t{ ((state.maxIndexStratums > i) || (i > state.minIndexStratums)) &&\n\t\t\t\t\t\t<View style = {{height: item.shownHeight[state.unit]}}/>\n\t\t\t\t\t}\n\t\t\t\t</View>\n\t\t\t))\n\t\t}\n\t}\n\n\t/// Esto es para mostrar la gráfica del gamma-ray al lado de los estratos\n\trenderGammaRay_Stratums(takingShot = false) {\n\t\tlet state = this.state;\n\n\t\tif (takingShot) {\n\t\t\treturn (\n\t\t\t\t<View style = {localStyles.container_row}>\n\t\t\t\t\t{state.gammaRayIsRendered && this.state.gammaRayValues_ForShot.hasOwnProperty('xValuesMeters') &&\n\t\t\t\t\t\t<View style = {{flexDirection: 'column'}}>\n\t\t\t\t\t\t\t<Components.GammaRayPlot\n\t\t\t\t\t\t\t\tgammaRayValues  = {this.state.gammaRayValues_ForShot}\n\t\t\t\t\t\t\t\tsuperiorLabels  = {state.gammaRaySuperiorLabels}\n\t\t\t\t\t\t\t\ttopHeightCore   = {state.maxCapturedHeight[0]}\n\t\t\t\t\t\t\t\twidth           = {D.GAMMA_RAY_WIDTH}\n\t\t\t\t\t\t\t\tunit            = {state.unit}\n\t\t\t\t\t\t\t\tscale           = {state.scale}\n\t\t\t\t\t\t\t\tkey             = {0}\n\t\t\t\t\t\t\t\tnumberVSegments = {NUMBER_VERTICAL_GR_SEGMENTS}\n\t\t\t\t\t\t\t\ttakingShot      = {true}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t}\n\t\t\t\t\t{state.showGammaRay && (!state.gammaRayValues.hasOwnProperty('xValuesMeters')) &&\n\t\t\t\t\t\t<View style = {{width: D.GAMMA_RAY_WIDTH}}/>\n\t\t\t\t\t}\n\t\t\t\t\t<View style = {localStyles.container_column}>\n\t\t\t\t\t\t{this.renderStratums(true)}\t\t\t\n\t\t\t\t\t</View>\n\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<View style = {localStyles.container_row}>\n\t\t\t\t{state.showGammaRay &&\n\t\t\t\t\t<Components.GammaRayPlot\n\t\t\t\t\t\tgammaRayValues  = {{}} // En este caso dejamos que se usen los datos de gamma-ray de la Tienda Redux\n\t\t\t\t\t\ttopHeightCore   = {state.potentialMaxHeight[0]}\n\t\t\t\t\t\twidth           = {D.GAMMA_RAY_WIDTH}\n\t\t\t\t\t\tunit            = {state.unit}\n\t\t\t\t\t\tscale           = {state.scale}\n\t\t\t\t\t\tkey             = {0}\n\t\t\t\t\t\tnumberVSegments = {NUMBER_VERTICAL_GR_SEGMENTS}\n\t\t\t\t\t\ttakingShot      = {false}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\t<View style = {localStyles.container_column}>\n\t\t\t\t\t{this.renderStratums(false)}\t\t\t\n\t\t\t\t</View>\n\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Parte inferior de la gráfica completa, que por el momento sólo incluye la regla de los carbonatos\n\tgraphicsColumnFooter(space){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t{/*Aquí se muestra la regla que indica el diámetro del grano para los carbonatos*/}\n\t\t\t\t{s.showLithology && s.showCarbonatesRule &&\n\t\t\t\t\t<View style = {{\n\t\t\t\t\t\tflexDirection: 'column', \n\t\t\t\t\t\tpaddingLeft: \n\t\t\t\t\t\t\t-0.5\n\t\t\t\t\t\t\t+ space // Espacio inicial que depende de si se están mostrando los botones de subir/bajar estrato o no\n\t\t\t\t\t\t\t+ (s.isCore && s.showGammaRay) * (D.GAMMA_RAY_WIDTH)\n\t\t\t\t\t\t\t+ s.showInfo*D.STRATUM_INFORMATION_WIDTH // Espacio reservado para el campo de información de estrato\n\t\t\t\t\t\t\t+ 50 + D.LITHOLOGY_ADDING_TERM/2, // 50 más la mitad de espacio entre una medición y otra, para que no coincidan con los no carbonatos\n\t\t\t\t\t}}>\n\t\t\t\t\t\t<p.carbonatesRule/>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\t\t\t\t{/*//Esto es sólo para dejar espacio*/}\n\t\t\t\t<View style = {{height: 12}}/>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t/// Esto sirve para determinar si hay que cargar más datos de la gráfica del gamma-ray y/o de los estratos cuando nos desplazamos verticalmente en la pantalla.\n\t//  - Si kind = 0, este método fue activado con la condición \"onScroll\".\n\t//  - Si kind = 1, este método fue activado con la condición \"onMomentumScrollEnd\"\n\tdetermine_LimitExceeded = ({layoutMeasurement, contentOffset, contentSize}, kind) => {\n\t\tlet s  = this.state;\n\t\tlet aF = auxiliarFunctions;\n\n\t\t// Aquí determinamos cuáles son los límites a considerar si se están sobrepasando o no (\"top\" y \"bottom\")\n\t\t// También los guardamos en variables aparte (\"previousTop\" y \"previousBottom\") para luego comparar los valores modificados con los anteriores\n\t\tlet top, bottom, previousTop, previousBottom;\n\n\t\t// Caso en que estamos trabajando con núcleos\n\t\tif (s.isCore){\n\t\t\ttop    = aF.max(s.maxHeightGammaRay_rendered, s.maxHeightStratums_rendered);\n\t\t\tbottom = aF.min(s.minHeightGammaRay_rendered, s.minHeightStratums_rendered);\n\n\t\t\t// Nótese que en \"bottom\" pusimos la mínima altura de las dos menores (rayos gamma y estratos), pero en realidad debería ser la máxima de las dos, porque \n\t\t\t// es el primer límite que se sobrepasa al irse desplazando hacia abajo. Sin embargo, si por ejemplo la máxima de las dos es la de los estratos y ya no hay más\n\t\t\t// estratos que cargar, entonces ya no nos interesa considerar ese límite, sino el de los rayos gamma. El caso del \"top\" es análogo.\n\t\t\t// Por eso haremos la siguiente verificación para arreglar esos límites. Nótese que sólo importa si ninguno de los topes es nulo.\n\t\t\tif ((s.maxHeightGammaRay_rendered != null) && (s.maxHeightStratums_rendered != null)){\n\t\t\t\tif (s.maxHeightGammaRay_rendered < top) {\n\t\t\t\t\tif (s.maxHeightGammaRay_rendered < s.potentialMaxHeightGammaRay){\n\t\t\t\t\t\ttop = s.maxHeightGammaRay_rendered;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ((s.maxHeightStratums_rendered < top) && (s.maxHeightStratums_rendered < s.potentialMaxHeightStratums)){\n\t\t\t\t\ttop = s.maxHeightStratums_rendered;\n\t\t\t\t}\n\n\t\t\t\tif (s.minHeightGammaRay_rendered > bottom) {\n\t\t\t\t\tif (s.minHeightGammaRay_rendered > s.potentialMinHeightGammaRay){\n\t\t\t\t\t\tbottom = s.potentialMinHeightGammaRay_rendered;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ((s.minHeightStratums_rendered > bottom) && (s.minHeightStratums_rendered > s.potentialMinHeightStratums)){\n\t\t\t\t\tbottom = s.minHeightStratums_rendered;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpreviousTop = top;\n\t\t\tpreviousBottom = bottom;\n\t\t} \n\t\telse { // Caso en que estamos trabajando con afloramientos\n\t\t\ttop = previousTop = s.maxHeightStratums_rendered;\n\t\t\tbottom = previousBottom = s.minHeightStratums_rendered;\t\t\n\t\t}\n\n\t\tconst currentLocation = layoutMeasurement.height + contentOffset.y; // Constante para el cálculo de los límites\n\t\tlet limitWasExceeded  = false; // Indica que se sobrepasó alguno de los límites, y por consiguiente hay que cargar nuevos datos\n\t\tlet nonContiguous     = false; // Indica que los datos que hay que cargar no son contiguos a los que ya estaban, sino que hay espacios de por medio\n\n\t\t// Caso en que estamos ascendiendo en la vista y se sobrepasó el límite superior\n\t\tif ( currentLocation-300 <= (s.potentialMaxHeight[0] - top) * s.factor ){\n\t\t\t// El 15 fue arbitrario. Es para que cuando se carguen los nuevos datos todavía sea visible parte de lo inferior, en vez de verse cortado\n\t\t\tbottom = aF.max(top - 15*s.scale[0], s.potentialMinHeight[0]); \n\t\t\ttop    = aF.min(bottom + SPACES_TO_SHOW*s.scale[0], s.potentialMaxHeight[0]);\n\n\t\t\t// Caso en que los datos a cargar no son los contiguos a los que ya estaban, sino varios espacios después\n\t\t\tif (((s.potentialMaxHeight[0] - top) * s.factor > contentOffset.y -5) && ((kind==1) || (s.userStablishedInitLimit))){\n\t\t\t\tnonContiguous = limitWasExceeded = true;\n\t\t\t} else {\n\t\t\t\t// Caso en que los datos a cargar son los contiguos. Es conveniente verificar si no se está haciendo ya una carga\n\t\t\t\tif (this.state.inmediateTopLoadEnabled){\n\t\t\t\t\tthis.setState({inmediateTopLoadEnabled: false});\n\t\t\t\t\tlimitWasExceeded = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Caso en que estamos descendiendo en la vista y se sobrepasó el límite inferior\n\t\telse if ( currentLocation+300 >= (s.potentialMaxHeight[0] - bottom) * s.factor ){\n\t\t\t// El 15 fue arbitrario. Es para que cuando se carguen los nuevos datos todavía sea visible parte de lo superior, en vez de verse cortado\n\t\t\ttop    = aF.min(bottom + 15*s.scale[0], s.potentialMaxHeight[0]); \n\t\t\tbottom = aF.max(top - SPACES_TO_SHOW*s.scale[0], s.potentialMinHeight[0]); \n\n\t\t\t// Caso en que los datos a cargar no son los contiguos a los que ya estaban, sino varios espacios después\n\t\t\tif (((s.potentialMaxHeight[0] - bottom) * s.factor < contentOffset.y -5) && ((kind==1) || (s.userStablishedInitLimit))){\n\t\t\t\tnonContiguous = limitWasExceeded = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Caso en que los datos a cargar son los contiguos. Es conveniente verificar si no se está haciendo ya una carga\n\t\t\t\tif (this.state.inmediateBottomLoadEnabled){\n\t\t\t\t\tthis.setState({inmediateBottomLoadEnabled: false});\n\t\t\t\t\tlimitWasExceeded = true;\n\t\t\t\t}\t\n\t\t\t}\t\n\t\t}\n\t\t// En caso de que hayamos entrado estableciendo un límite, ya para la siguiente deslizada hay que quitar esa condición\n\t\tthis.setState({userStablishedInitLimit: false}); \n\n\t\t// Caso en que hay que cargar nuevos datos porque se sobrepasó algún límite\n\t\tif (limitWasExceeded){\n\t\t\tif (nonContiguous){\n\t\t\t\ttop    = aF.min(s.potentialMaxHeight[0] - ((contentOffset.y-5) / s.factor) + (SPACES_TO_SHOW/2)*s.scale[0], s.potentialMaxHeight[0]);\n\t\t\t\tbottom = aF.max(top - SPACES_TO_SHOW*s.scale[0], s.potentialMinHeight[0]);\n\t\t\t}\n\t\t\tif ((top!=previousTop) && (bottom!=previousBottom)){\n\t\t\t\tthis.loadMoreData(bottom, top);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Esto sirve para cargar más datos de la gráfica del gamma-ray y/o de los estratos cuando nos desplazamos verticalmente en la pantalla \n\tloadMoreData = async(bottom, top) =>{\n\t\t// Declaración de variables que necesitaremos\n\t\tlet s = this.state;\n\t\tlet aF = auxiliarFunctions;\n\t\tlet {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} = this.state;\n\t\tlet minHeightForVerticalRule, maxHeightForVerticalRule;\n\n\t\tif (s.stratumsAreAvailable){\n\t\t\t( {minIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered} = await this.getLayerList_Limits(bottom, top) );\n\t\t}\n\t\tif (s.isCore){\n\t\t\tlet {minHeightGammaRay_rendered, maxHeightGammaRay_rendered} = this.state;\n\n\t\t\tif (s.gammaRayIsRendered){\n\t\t\t\t( {minHeightGammaRay_rendered, maxHeightGammaRay_rendered} = await this.getGammaRayValues_Extract(top) );\n\t\t\t}\n\t\t\tminHeightForVerticalRule = aF.max( aF.min(minHeightGammaRay_rendered, minHeightStratums_rendered)-s.additionalHeightVerticalRule,  s.potentialMinHeight[0] );\n\t\t\tmaxHeightForVerticalRule = aF.min( aF.max(maxHeightGammaRay_rendered, maxHeightStratums_rendered)+s.additionalHeightVerticalRule,  s.potentialMaxHeight[0] );\n\n\t\t\tthis.setState({minHeightGammaRay_rendered, maxHeightGammaRay_rendered})\n\t\t}\n\t\telse {\n\t\t\tminHeightForVerticalRule = aF.max( minHeightStratums_rendered-s.additionalHeightVerticalRule,  s.potentialMinHeight[0] );\n\t\t\tmaxHeightForVerticalRule = aF.min( maxHeightStratums_rendered+s.additionalHeightVerticalRule,  s.potentialMaxHeight[0] );\n\t\t}\n\n\t\tthis.setState({\n\t\t\tverticalRule: this.createVerticalRule(minHeightForVerticalRule, maxHeightForVerticalRule, (s.potentialMaxHeight[0] - maxHeightForVerticalRule), (minHeightForVerticalRule - s.potentialMinHeight[0])),\n\t\t\tminIndexStratums, maxIndexStratums, minHeightStratums_rendered, maxHeightStratums_rendered,\n\t\t\tinmediateBottomLoadEnabled: true, inmediateTopLoadEnabled: true,\n\t\t});\n\t}\n\n\t// Esta vista llama a su vez a otras vistas para construir las gráficas con sus respectivos encabezados y sus contenidos\n\tgraphicsColumn(takingShot) {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// En los núcleos normalmente se mostrarán valores con un signo negativo; por eso dejamos más espacio en ellos que en los afloramientos\n\t\tlet excess = ((s.isCore) ? 115 : 101);\n\t\tlet verticalRule_width = ((s.isCore) ? 110 : 95);\n\n\t\t// Estructura para cuando estamos tomando una captura\n\t\tif (takingShot){\n\t\t\tlet space = excess; // Espacio horizontal a partir del cual comenzará a mostrarse el encabezado de los campos\n\t\t\treturn (\n\t\t\t\t<View>\n\t\t\t\t\t<Modal visible = {this.state.plotViewVisible}>\n\t\t\t\t\t\t<ScrollView horizontal>\n\t\t\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t\t\t<ViewShot // Tenemos que colocar este componente dentro de los dos ScrollViews para que se capture toda la vista\n\t\t\t\t\t\t\t\t\tstyle = {localStyles.white_background}\n\t\t\t\t\t\t\t\t\tref     = \"viewShot\"\n\t\t\t\t\t\t\t\t\toptions = {{ format: s.imageFormat, quality: 1 }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{this.objectInformationHeader(true)}\n\n\t\t\t\t\t\t\t\t\t<View style = {localStyles.container}> \n\t\t\t\t\t\t\t\t\t\t<View style = {{flexDirection: 'row'}}>\n\t\t\t\t\t\t\t\t\t\t\t<View style = {localStyles.container_column}>\n\n\t\t\t\t\t\t\t\t\t\t\t\t{this.graphicsColumnHeader(space, true)}\n\n\t\t\t\t\t\t\t\t\t\t\t\t{/*Aquí se muestra la regla vertical junto a las gráficas*/}\n\t\t\t\t\t\t\t\t\t\t\t\t<View style = {{paddingTop: 5, flexDirection: 'column'}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<View style = {{flexDirection: 'row'}}> \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/*Regla horizontal*/}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<View style = {{width: verticalRule_width}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{s.verticalRule_ForShot}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/*// Gráficas*/}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.renderGammaRay_Stratums(true)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t\t\t\t\t{this.graphicsColumnFooter(space)}\n\n\t\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t</ViewShot>\n\t\t\t\t\t\t\t</ScrollView>\n\t\t\t\t\t\t</ScrollView>\n\t\t\t\t\t</Modal>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\t// --------- Estructura para cuando la aplicación es la que está mostrando la gráfica -----------\n\t\t\n\t\t// Espacio horizontal a partir del cual comenzará a mostrarse el encabezado de los campos\n\t\tlet space = s.showGammaRay ? excess : excess + UP_DOWN_BUTTONS_WIDTH; \n\t\treturn(\n\t\t\t<View style = {localStyles.container}> \n\n\t\t\t\t<ScrollView horizontal>\n\t\t\t\t\t<View style = {localStyles.container_column}>\n\n\t\t\t\t\t\t{this.graphicsColumnHeader(space)}\n\n\t\t\t\t\t\t{/*Aquí se muestra la regla vertical junto a las gráficas*/}\n\t\t\t\t\t\t<ScrollView \n\t\t\t\t\t\t\tref   = \"verticalScrollView\"\n\t\t\t\t\t\t\tstyle = {{paddingTop: 5}}\n\t\t\t\t\t\t\tonScroll            = {({nativeEvent}) => {this.determine_LimitExceeded(nativeEvent, 0)}}\n\t\t\t\t\t\t\tonMomentumScrollEnd = {({nativeEvent}) => {this.determine_LimitExceeded(nativeEvent, 1)}}\n\t\t\t\t\t\t\tonScrollToTop       = {() => this.setState({inmediateTopLoadEnabled: false})}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<View style = {{flexDirection: 'row'}}> \n\t\t\t\t\t\t\t\t<View style = {{width: verticalRule_width}}>\n\t\t\t\t\t\t\t\t\t{(s.stratumsAreAvailable || s.gammaRayIsRendered) && s.verticalRule}\n\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t{/*//Gráficas*/}\n\t\t\t\t\t\t\t\t{(s.stratumsAreAvailable || s.showGammaRay) && this.renderGammaRay_Stratums()}\n\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</ScrollView>\n\n\t\t\t\t\t\t{this.graphicsColumnFooter(space)}\n\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Esta función devuelve un modal que sirve como estructura genérica de \"initialLimitPreview\" y \"takeShotPreview\"\n\tmodalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView) {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tlet anObjectIsShown = (((s.numberLayers != 0) && s.stratumsAreAvailable) || (s.gammaRayIsRendered) );\n\n\t\t// Función auxiliar para representar la cabecera de las vistas en modales\n\t\tfunction header(message){\n\t\t\treturn(\n\t\t\t\t<View style = {genericStyles.modalHeader}>\n\t\t\t\t\t<Text style = {{justifyContent: 'center', alignItems: 'center', fontSize: 17, fontWeight: 'bold'}}>{message}</Text>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Modal\n\t\t\t\t\tanimationType  = \"fade\"\n\t\t\t\t\ttransparent    = {false}\n\t\t\t\t\tvisible        = {boolVisible && this.props.navigation.isFocused()}\n\t\t\t\t\tonRequestClose = {() => cancelFunction()}\n\t\t\t\t>\n\t\t\t\t\t{/*Caso en que sí hay gráfica disponible*/}\n\t\t\t\t\t{anObjectIsShown &&\n\t\t\t\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t\t\t\t{header(headerMessage)}\n\t\t\t\t\t\t\t{mainView}\n\n\t\t\t\t\t\t\t{/*Vista de los botones para darle Aceptar o Cancelar*/}\n\t\t\t\t\t\t\t<View style = {genericStyles.down_buttons}>\n\t\t\t\t\t\t\t\t<View style = {{paddingRight: 25}}>\n\t\t\t\t\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[28]} // Mensaje: \"Cancelar\"\n\t\t\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\t\t\tonPress = {s.keyboardAvailable ? Keyboard.dismiss : (() => {cancelFunction()}) }\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t<View style = {{paddingLeft: 25}}>\n\t\t\t\t\t\t\t\t\t<ButtonWithIcon\n\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[29]} /// Mensaje: \"Aceptar\"\n\t\t\t\t\t\t\t\t\t\ticon    = {{name: 'check'}}\n\t\t\t\t\t\t\t\t\t\tonPress = {s.keyboardAvailable ? Keyboard.dismiss : (() => {acceptFunction()})}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/*//Caso en que no hay gráfica*/}\n\t\t\t\t\t{!anObjectIsShown &&\n\t\t\t\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t\t\t\t{header(headerMessage)}\n\t\t\t\t\t\t\t<View style = {{...genericStyles.white_background_without_ScrollView, justifyContent: 'center'}}>\n\t\t\t\t\t\t\t\t{/*Mensaje: \"No hay elementos para mostrar\"*/}\n\t\t\t\t\t\t\t\t<Text style = {{textAlign: 'center'}}>{p.allMessages[32]}</Text>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t{/*Vista del botón para darle Volver*/}\n\t\t\t\t\t\t\t<View style = {genericStyles.down_buttons}>\n\t\t\t\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[30]} // Mensaje: \"Volver\"\n\t\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\t\tonPress = {() => {cancelFunction()}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t}\n\t\t\t\t</Modal>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Estructura genérica de cuando se pide un dato numérico, usada también por \"initialLimitPreview\" y \"takeShotPreview\"\n\tnumericField(mainMessage, variable, variableName, maximumMessage, minimumMessage){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View style = {genericStyles.instructionsAboveTextInputs}>\n\t\t\t\t<Text style = {{flex: 1, color: 'red', fontWeight: 'bold', textAlign: 'center'}}>*\n\t\t\t\t\t<Text style = {{color: 'black'}}> {mainMessage}</Text>\n\t\t\t\t</Text>\n\n\t\t\t\t{/*Mensajes: \"Máximo\" \"metros\" \"pies*/}\n\t\t\t\t{maximumMessage && \n\t\t\t\t\t<View style = {{...genericStyles.simple_center, paddingTop: (minimumMessage ? 5 : 0)}}>\n\t\t\t\t\t\t<Text style = {{flex: 1, paddingBottom: 3}}>{p.allMessages[34]}:   {s.potentialMaxHeight[1]} {s.unitMessage}</Text>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\n\t\t\t\t{/*Mensajes: \"Mínimo\" \"metros\" \"pies\"*/}\n\t\t\t\t{minimumMessage && \n\t\t\t\t\t<View style = {genericStyles.simple_center}>\n\t\t\t\t\t\t<Text style = {{flex: 1, paddingBottom: 3}}>{p.allMessages[37]}:   {s.potentialMinHeight[1]} {s.unitMessage}</Text>\n\t\t\t\t\t</View>\n\t\t\t\t}\t\t\t\n\t\t\t\t<TextInput \n\t\t\t\t\tvalue             = {variable[1]}\n\t\t\t\t\tselectTextOnFocus = {true}\n\t\t\t\t\ttextAlign         = {'center'}    \n\t\t\t\t\tstyle             = {{...genericStyles.textInput, width: '70%'}}\n\t\t\t\t\tplaceholder       = {p.allMessages[38]} // Mensaje: \"Rellenar campo...\"\n\t\t\t\t\tonChangeText      = {text => this.onChangeNumericValue(variableName, text)}\n\t\t\t\t\tkeyboardType      = 'phone-pad'\n\t\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Para establecer la altura superior que se desea comenzar a ver. Esto es útil cuando la vista es demasiado grande\n\tinitialLimitPreview(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tlet boolVisible      = s.initLimitPreviewVisible;\n\t\tconst cancelFunction = this.closeInitLimitPreview;\n\t\tconst acceptFunction = this.stablishInitLimit;\n\t\tconst headerMessage  = p.allMessages[31] // Mensaje: \"Ver gráfica desde altura establecida\"\n\n\t\tlet mainView = (\n\t\t\t<View style = {genericStyles.white_background_with_ScrollView}> \n\t\t\t\t<ScrollView>\n\t\t\t\t\t<View style = {{paddingTop: '11%'}}>\n\t\t\t\t\t\t{/*Mensaje: \"Inserte la altura que desea ubicar en la vista\"*/}\n\t\t\t\t\t\t{this.numericField(p.allMessages[33], s.maxCapturedHeight, 'maxCapturedHeight', true, true)}\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView>\n\t\t\t</View>\n\t\t)\n\n\t\treturn(\n\t\t\tthis.modalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView)\n\t\t)\n\t}\n\n\t/// Para establecer los límites de captura del núcleo o afloramiento\n\ttakeShotPreview(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tlet boolVisible      = s.takeShotPreviewVisible;\n\t\tconst cancelFunction = this.finishTakingShot;\n\t\tconst acceptFunction = this.takeShot;\n\t\tconst headerMessage  = p.allMessages[39] // Mensaje: \"Captura de gráfica\"\n\n\t\tlet mainView = (\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t{/*En esta parte el usuario ingresa los parámetros de la captura*/}\n\t\t\t\t<View style = {{...genericStyles.white_background_with_ScrollView, flex: 1}}> \n\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t<View style = {{paddingTop: (s.isCore ? '3%' : '10%')}}>\n\n\t\t\t\t\t\t\t{/*Mensaje: \"Cota superior de captura\"*/}\n\t\t\t\t\t\t\t{this.numericField(p.allMessages[40], s.maxCapturedHeight, 'maxCapturedHeight', true, false)}\n\n\t\t\t\t\t\t\t{/*Mensaje: \"Cota inferior de captura\"*/}\n\t\t\t\t\t\t\t{this.numericField(p.allMessages[41], s.minCapturedHeight, 'minCapturedHeight', false, true)}\n\n\t\t\t\t\t\t\t{/*Escoger el formato de la imagen a mostrar*/}\n\t\t\t\t\t\t\t<View style = {{...genericStyles.row_instructions_textInput, paddingTop: 30}}>\n\t\t\t\t\t\t\t\t<View style = {{justifyContent: 'flex-end'}}>\n\t\t\t\t\t\t\t\t\t{/*Mensaje: \"Formato de\\nimagen\"*/}\n\t\t\t\t\t\t\t\t\t<Text style = {{flex:1}}>{p.allMessages[42]}: </Text>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t<View style = {{justifyContent: 'flex-start'}}>\n\t\t\t\t\t\t\t\t\t<Picker\n\t\t\t\t\t\t\t\t\t\tselectedValue = {s.imageFormat}\n\t\t\t\t\t\t\t\t\t\tstyle         = {{height: 30, width: 100, flex: 1}}\n\t\t\t\t\t\t\t\t\t\tonValueChange = {(itemValue, itemIndex) => this.setState({imageFormat: itemValue})}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Picker.Item label = {p.allMessages[43]}  value = {\"jpg\"}/>\n\t\t\t\t\t\t\t\t\t\t<Picker.Item label = {p.allMessages[44]}  value = {\"png\"}/>\n\t\t\t\t\t\t\t\t\t</Picker>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</ScrollView>\n\t\t\t\t</View>\n\n\t\t\t\t{s.gammaRayIsRendered && // Mostrar mensaje al usuario de que la gráfica de gamma-ray puede dar problemas\n\t\t\t\t\t<View style = {{paddingLeft: '5%', paddingRight: '5%', paddingTop: 5}}>\n\t\t\t\t\t\t{/*Mensaje: \"¡Advertencia!\"*/}\n\t\t\t\t\t\t<Text style = {{textAlign: 'center', color: 'red', fontSize: 13}}>{p.allMessages[45]}</Text>\n\t\t\t\t\t\t{/*//Mensaje: \"Con la escala actual\" ... \"no se recomienda capturar más de \" ... \"[metros/pies]\" \n\t\t\t\t\t\t//... \", ya que podrían ocurrir errores con el gráfico de rayos gamma\"*/}\n\t\t\t\t\t\t<Text style = {{textAlign: 'center', fontSize: 12}}>{p.allMessages[46]} ({s.scale[1]}) {p.allMessages[47]}\n\t\t\t\t\t\t\t{auxiliarFunctions.repairNumber(SPACES_TO_SHOW*s.scale[0], 20)[1]} {s.unitMessage}{p.allMessages[48]}</Text>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\n\t\t\t\t{/*Mensaje que indica el tamaño representado en la imagen*/}\n\t\t\t\t<View style = {{...genericStyles.smallRow, flex: 0.04}}>\n\t\t\t\t\t{/*Mensajes: \"Tamaño de captura\" ... \"[metros/pies]\"*/}\n\t\t\t\t\t<Text style = {{textAlign: 'center', color: 'blue'}}>\n\t\t\t\t\t\t{p.allMessages[49]}:  {auxiliarFunctions.repairNumber(s.maxCapturedHeight[0]-s.minCapturedHeight[0], 20)[1]} {s.unitMessage}\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\n\t\treturn(\n\t\t\tthis.modalStructure(boolVisible, headerMessage, cancelFunction, acceptFunction, mainView)\n\t\t)\n\t}\n\n\t/// Sirve para activar la función que lee desde la base de datos. Esto es útil cuando estamos emulando la aplicación y refrescamos la página\n\t// en caliente, ya que hacer eso volverá a colocar this.state.loading en su valor inicial (true) pero este componente ya estará montado, por lo que \n\t// no se activará el NavigationEvents onWillFocus, y en consecuencia la vista se quedará pegada en \"Cargando\"\n\tactivateLoadObjectInfo(){\n\t\tif (this.state.loadFunctionOpened){\n\t\t\tthis.setState({loadFunctionOpened: false});\n\t\t\tthis.loadObjectInfo();\n\t\t}\n\t\treturn(<View/>)\n\t}\n\n\t// Lo que se muestra al usuario en total en esta ventana\n\trender (){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Vista para cuando se están cargando datos desde la base de datos PouchDB\n\t\tif (this.state.loading || this.props.loadView){\n\t\t\treturn (\n\t\t\t\t<View style = {genericStyles.simple_center}>\n\t\t\t\t\t{!this.state.takingShot && this.activateLoadObjectInfo()}\n\t\t\t\t\t<ActivityIndicator size = \"large\" color = \"#0000ff\" />\n\t\t\t\t\t{/*Mensajes: \"Generando imagen\" \"Cargando\"*/}\n\t\t\t\t\t<Text>{s.takingShot ? p.allMessages[50] : p.allMessages[51]}...</Text> \n\t\t\t\t</View>\n\t\t\t);\t\n\t\t} \n\t\tlet informationIsRendered = (s.gammaRayIsRendered || s.stratumsAreAvailable);\n\t\t// Vista para cuando ya se actualizaron los datos que se quieren mostrar\n\t\treturn (\n\t\t\t<View style = {localStyles.lightGray_background}>\n\t\t\t\t{/*Modales*/}\n\t\t\t\t{this.initialLimitPreview()}\n\t\t\t\t{this.takeShotPreview()} \n\n\t\t\t\t<View style = {localStyles.white_background}>\n\t\t\t\t\t{this.objectInformationHeader()}\n\t\t\t\t\t{informationIsRendered && this.graphicsColumn(this.state.takingShot)}\n\t\t\t\t\t{!informationIsRendered &&\n\t\t\t\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n\t\t\t\t\t\t\t{/*Mensaje: \"No hay elementos para mostrar\"*/}\n\t\t\t\t\t\t\t<Text style = {{textAlign: 'center'}}>{p.allMessages[32]}</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t}\n\t\t\t\t</View>\n\n\t\t\t\t{/*//Botones de la parte inferior*/}\n\t\t\t\t<View style = {{...genericStyles.down_buttons, flex: 0.15}}>\n\t\t\t\t\t<View style = {{flex: 0.05}}/>\n\n\t\t\t\t\t{/*Botón para ir al menú en donde se configura la captura del núcleo o afloramiento*/}\n\t\t\t\t\t<View style = {{flex: 0.2}}>\n\t\t\t\t\t\t<ButtonWithIcon \n\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\tonPress = {() => this.openTakeShotPreview()}\n\t\t\t\t\t\t\ticon    = {<Icon  name=\"file-photo-o\"  size={24}  color={LIGHTGRAY_COLOR}/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\n\t\t\t\t\t<View style = {{flex: 0.1}}/>\n\n\t\t\t\t\t{/*Botón para modificar el núcleo o afloramiento*/}\n\t\t\t\t\t<View style = {{flex: 0.7}}>\n\t\t\t\t\t\t<ButtonWithIcon \n\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\ticon     = {{name: 'create'}}\n\t\t\t\t\t\t\ttitle    = {p.allMessages[52]} // Mensaje: \"Editar información\"\n\t\t\t\t\t\t\tonPress  = {this.editObjectInfo}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</View>\n\n\t\t\t\t\t<View style = {{flex: 0.05}}/>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n// Constante para darle formato a los diversos componentes de esta ventana\nconst localStyles = StyleSheet.create({\n\n\t// Formato de la cabecera de la pantalla, que aparece en la parte superior\n\tobjectInfo_header: {\n\t\tflexDirection:  'row',\n\t\talignItems:     'center',\n\t\theight:         43,\n\t},\n\n\t// Formato de la parte izquierda de la cabecera de la pantalla\n\tobjectInfo_header_text: {\n\t\tflex:           1,\n\t\tflexDirection:  'column',\n\t\tjustifyContent: 'center',\n\t\talignItems:     'flex-start',\n\t\tpaddingTop:     15,\n\t\tpaddingLeft:    10,\n\t},\n\n\t// Cabecera de los campos de los estratos, que dice: \"Litología\", \"Estructura sedimentaria\", etc.\n\tgraphicColumn_header: {\n\t\tflexDirection:  'row',\n\t\theight:         30,\n\t\tpaddingBottom:  25,\n\t},\n\n\t// Formato de la cabecera en la que se muestra el título de cada campo de un estrato (Litología, etc.)\n\tfield_section: {\n\t\tborderColor:    'black',\n\t\tborderWidth:    2,\n\t\tjustifyContent: 'center',\n\t\talignItems:     'center',\n\t\theight:         25,\n\t},\n\n\t// Contiene la gráfica en total\n\tcontainer: {\n\t\tflexDirection:  'column',  \n\t\tpadding:        20  \n\t},\n\n\t// Usado para que los distintos estratos aparezcan uno encima del otro (columna) y no horizontalmente\n\tcontainer_column: {\n\t\tflex:           1,\n\t\tflexDirection:  'column',\n\t\topacity:        1,\n\t\tpaddingLeft:    5,\n\t},\n\n\t// Usado para mostrar los distintos campos de registro en fila\n\tcontainer_row: {\n\t\tflexDirection:  'row',\n\t\tjustifyContent: 'flex-start',\n\t},\n\n\t// Crea un fondo gris claro, que permite que el sector donde están los botones de abajo se diferencie del resto del contenido\n\tlightGray_background: { \n\t\tflex:            1, \n\t\tflexDirection:   'column',\n\t\tbackgroundColor: LIGHTGRAY_COLOR,\n\t},\n\n\t// Crea un fondo blanco. Se superpone al fondo gris\n\twhite_background: {\n\t\tflexDirection:   'column', \n\t\tpaddingTop:      20, \n\t\tflex:            0.9, \n\t\tbackgroundColor: 'white',\n\t},\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages:      ObjectScreen_Texts[state.appPreferencesReducer.language],  \n\t\tuser_id:          state.userReducer.user_id,\n\t\tlocalDB:          state.userReducer.localDB,\n\t\tnoCarbonatesRule: state.libraryReducer.noCarbonatesRule,\n\t\tcarbonatesRule:   state.libraryReducer.carbonatesRule,\n\t\tloadView:         state.popUpReducer.loadView,\n\t\tgammaRayValues_Extract:   state.popUpReducer.gammaRayValues_Extract,\n\t\tenteringComponentEnabled: state.popUpReducer.stratumComponentEnabled,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchChangeLoadView:   (bool) => dispatch(changeLoadView(bool)),\n\t\tdispatchGammaRay_Extract: (object) => dispatch(changeGammaRay_Extract(object)),\n\t\tdispatchStackScreenPropsFunction: (globalFunction) => dispatch(changeStackScreenPropsFunction(globalFunction)),\n\t\tdispatchEnteringPermission: (bool) => dispatch(changeStratumComponentPermission(bool)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ObjectScreen);"]},"metadata":{},"sourceType":"module"}