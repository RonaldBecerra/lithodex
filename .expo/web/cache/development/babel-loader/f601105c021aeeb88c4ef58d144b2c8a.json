{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\contactUsers\\\\UserView.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport { Avatar, ListItem, Button as ButtonWithIcon } from \"react-native-elements\";\nimport * as MailComposer from 'expo-mail-composer';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport ImageZoom from 'react-native-image-pan-zoom';\nimport { NavigationEvents } from 'react-navigation';\nimport { connect } from 'react-redux';\nimport { changeLoadView } from \"../../redux/actions/popUpActions\";\nimport { UserView_Texts } from \"../../languages/screens/contactUsers/UserView\";\nimport * as Log from \"../../genericFunctions/logFunctions\";\nimport * as Database from \"../../genericFunctions/databaseFunctions\";\nimport * as contactFunctions from \"../../genericFunctions/contactUsersFunctions\";\nimport * as D from \"../../constants/Dimensions\";\nimport { genericStyles, DARK_GRAY_COLOR } from \"../../constants/genericStyles\";\nimport * as auxiliarFunctions from \"../../genericFunctions/otherFunctions\";\nimport { DEFAULT_USER_ICON } from \"../../constants/genericImages\";\nimport PouchDB from 'pouchdb-react-native';\n\nvar UserView = function (_Component) {\n  _inherits(UserView, _Component);\n\n  function UserView(props) {\n    var _this;\n\n    _classCallCheck(this, UserView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserView).call(this, props));\n\n    _this.setModalVisible = function (isVisible) {\n      _this.setState({\n        modalVisible: isVisible\n      });\n    };\n\n    _this.sendEmail = function _callee() {\n      var s, isAvailable;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              s = _this.state;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(MailComposer.isAvailableAsync());\n\n            case 3:\n              isAvailable = _context.sent;\n\n              if (isAvailable) {\n                MailComposer.composeAsync({\n                  recipients: [s.examinedUserEmail]\n                });\n              } else {\n                contactFunctions.SendEmailQS(s.examinedUserEmail, \"\", \"\");\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.editProfile = function () {\n      var s = _this.state;\n\n      _this.props.navigation.navigate({\n        key: 'UserForm',\n        routeName: 'UserForm',\n        params: s.currentUser\n      });\n    };\n\n    _this.localUpdateRelationShip = function _callee2(kind) {\n      var refuseType,\n          p,\n          s,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              refuseType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 0;\n              p = _this.props;\n              s = _this.state;\n\n              if (!(kind == 0)) {\n                _context2.next = 9;\n                break;\n              }\n\n              _this.setState({\n                currentUserSentRequest: true\n              });\n\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(Database.updateRelationship(p.user_id, s.examinedUser_id, kind));\n\n            case 7:\n              _context2.next = 26;\n              break;\n\n            case 9:\n              if (!(kind == 1)) {\n                _context2.next = 19;\n                break;\n              }\n\n              if (!(refuseType == 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              _this.setState({\n                currentUserSentRequest: false\n              });\n\n              _context2.next = 14;\n              return _regeneratorRuntime.awrap(Database.updateRelationship(p.user_id, s.examinedUser_id, kind));\n\n            case 14:\n              _context2.next = 17;\n              break;\n\n            case 16:\n              Alert.alert(p.allMessages[15], p.allMessages[18], [{\n                text: p.allMessages[16],\n                onPress: function onPress() {\n                  return _this.rejectFriendRequest(kind);\n                }\n              }, {\n                text: p.allMessages[17]\n              }]);\n\n            case 17:\n              _context2.next = 26;\n              break;\n\n            case 19:\n              if (!(kind == 2)) {\n                _context2.next = 25;\n                break;\n              }\n\n              _this.setState({\n                hasRequestOnUser: false,\n                isFriend: true\n              });\n\n              _context2.next = 23;\n              return _regeneratorRuntime.awrap(Database.updateRelationship(s.examinedUser_id, p.user_id, kind));\n\n            case 23:\n              _context2.next = 26;\n              break;\n\n            case 25:\n              Alert.alert(p.allMessages[15], p.allMessages[19], [{\n                text: p.allMessages[16],\n                onPress: function onPress() {\n                  return _this.deleteFriend(kind);\n                }\n              }, {\n                text: p.allMessages[17]\n              }]);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    var info = _this.props.navigation.getParam('information');\n\n    _this.state = {\n      loading: true,\n      loadFunctionOpened: true,\n      modalVisible: false,\n      profileImage_width: null,\n      profileImage_height: null,\n      currentUserSentRequest: false,\n      hasRequestOnUser: false,\n      isFriend: false,\n      isTheSameUser: false\n    };\n    return _this;\n  }\n\n  _createClass(UserView, [{\n    key: \"loadDatabaseInformation\",\n    value: function loadDatabaseInformation() {\n      var _this2 = this;\n\n      var p, db, examinedUser_id;\n      return _regeneratorRuntime.async(function loadDatabaseInformation$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              p = this.props;\n              db = new PouchDB('lithodex');\n              examinedUser_id = this.props.navigation.getParam('_id');\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(db.get('default').then(function _callee3(database) {\n                var currentExaminedUser, currentUser, info;\n                return _regeneratorRuntime.async(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        currentExaminedUser = database.users[examinedUser_id];\n                        currentUser = database.users[_this2.props.user_id];\n\n                        if (!currentExaminedUser) {\n                          _context3.next = 16;\n                          break;\n                        }\n\n                        info = currentExaminedUser.information;\n\n                        _this2.setState({\n                          examinedUser_id: currentExaminedUser._id,\n                          userName: currentExaminedUser.userName,\n                          profileImage: info.profileImage,\n                          firstName: info.firstName,\n                          firstSurname: info.firstSurname,\n                          profession: info.profession,\n                          examinedUserEmail: info.email,\n                          officePhoneNumber: info.officePhoneNumber,\n                          mobilePhoneNumber: info.mobilePhoneNumber\n                        });\n\n                        if (!(examinedUser_id == p.user_id)) {\n                          _context3.next = 10;\n                          break;\n                        }\n\n                        _context3.next = 8;\n                        return _regeneratorRuntime.awrap(_this2.setState({\n                          currentUser: currentUser,\n                          isTheSameUser: true\n                        }));\n\n                      case 8:\n                        _context3.next = 12;\n                        break;\n\n                      case 10:\n                        _context3.next = 12;\n                        return _regeneratorRuntime.awrap(_this2.setState({\n                          currentUserSentRequest: currentUser.friendRequests.made.hasOwnProperty(currentExaminedUser._id),\n                          hasRequestOnUser: currentUser.friendRequests.received.hasOwnProperty(currentExaminedUser._id),\n                          isFriend: currentUser.friends.hasOwnProperty(currentExaminedUser._id)\n                        }));\n\n                      case 12:\n                        _this2.stablishProfileImageDimensions();\n\n                        _this2.setState({\n                          loading: false,\n                          loadFunctionOpened: true\n                        });\n\n                        _context3.next = 17;\n                        break;\n\n                      case 16:\n                        p.navigation.goBack();\n\n                      case 17:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                });\n              }).catch(function (error) {\n                console.error(error.toString());\n\n                _this2.setState({\n                  loading: false,\n                  loadFunctionOpened: true\n                });\n              }));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"stablishProfileImageDimensions\",\n    value: function stablishProfileImageDimensions() {\n      var _this3 = this;\n\n      var s = this.state;\n\n      if (s.profileImage != null) {\n        Image.getSize(s.profileImage, function (width, height) {\n          _this3.setState({\n            profileImage_width: width,\n            profileImage_height: height\n          });\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dispatchChangeLoadView(true);\n    }\n  }, {\n    key: \"rejectFriendRequest\",\n    value: function rejectFriendRequest(kind) {\n      this.setState({\n        hasRequestOnUser: false\n      });\n      Database.updateRelationship(this.state.examinedUser_id, this.props.user_id, kind);\n    }\n  }, {\n    key: \"deleteFriend\",\n    value: function deleteFriend(kind) {\n      this.setState({\n        isFriend: false\n      });\n      Database.updateRelationship(this.props.user_id, this.state.examinedUser_id, kind);\n    }\n  }, {\n    key: \"modalView\",\n    value: function modalView() {\n      var _this4 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        }\n      }, React.createElement(Modal, {\n        animationType: \"fade\",\n        transparent: false,\n        visible: s.modalVisible,\n        onRequestClose: function onRequestClose() {\n          return _this4.setModalVisible(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        }\n      }, React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        }\n      }, React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        }\n      }, React.createElement(View, {\n        style: localStyles.imageView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        }\n      }, React.createElement(ImageZoom, {\n        cropWidth: 0.9 * D.GLOBAL_SCREEN_WIDTH,\n        cropHeight: 0.8 * D.GLOBAL_SCREEN_HEIGHT,\n        imageWidth: s.profileImage_width,\n        imageHeight: s.profileImage_height,\n        enableCenterFocus: false,\n        minScale: 1 / 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        }\n      }, React.createElement(Image, {\n        source: {\n          uri: s.profileImage\n        },\n        style: {\n          width: s.profileImage_width,\n          height: s.profileImage_height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        }\n      })))), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        color: DARK_GRAY_COLOR,\n        title: p.allMessages[1],\n        onPress: function onPress() {\n          return _this4.setModalVisible(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        }\n      })))));\n    }\n  }, {\n    key: \"activateLoadDatabaseInformation\",\n    value: function activateLoadDatabaseInformation() {\n      if (this.state.loadFunctionOpened) {\n        this.setState({\n          loadFunctionOpened: false\n        });\n        this.loadDatabaseInformation();\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var s = this.state;\n      var p = this.props;\n\n      if (s.loading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'flex-start'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320\n          }\n        }, this.activateLoadDatabaseInformation(), React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 323\n          }\n        }), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          }\n        }, p.allMessages[2], \"...\")));\n      }\n\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        }\n      }, React.createElement(NavigationEvents, {\n        onWillFocus: function onWillFocus(payload) {\n          return _this5.loadDatabaseInformation();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        }\n      }), this.modalView(), React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        }\n      }, React.createElement(Text, {\n        style: _objectSpread({}, genericStyles.subtitle, {\n          fontSize: 25\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        }\n      }, s.userName), React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center',\n          paddingTop: 20,\n          paddingBottom: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        }\n      }, s.profileImage != null && React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        }\n      }, React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          _this5.setModalVisible(true);\n        },\n        style: localStyles.touchableHighlight_NoBorder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        }\n      }, React.createElement(Image, {\n        resizeMethod: \"auto\",\n        source: {\n          uri: s.profileImage\n        },\n        style: localStyles.touchableHighlight_WithBorder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        }\n      }))), s.profileImage == null && React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        }\n      }, React.createElement(Avatar, {\n        source: DEFAULT_USER_ICON,\n        containerStyle: localStyles.touchableHighlight_WithBorder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        }\n      }))), React.createElement(View, {\n        style: genericStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        }\n      }, React.createElement(Text, {\n        style: localStyles.textFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        }\n      }, p.allMessages[3], \": \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        }\n      }, s.firstName)), React.createElement(View, {\n        style: genericStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        }\n      }, React.createElement(Text, {\n        style: localStyles.textFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        }\n      }, p.allMessages[4], \": \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        }\n      }, s.firstSurname)), s.profession != null && React.createElement(View, {\n        style: genericStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        }\n      }, React.createElement(Text, {\n        style: localStyles.textFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        }\n      }, p.allMessages[5], \": \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        }\n      }, s.profession)), (s.isFriend || s.isTheSameUser) && React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        }\n      }, s.officePhoneNumber != null && React.createElement(View, {\n        style: genericStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        }\n      }, React.createElement(Text, {\n        style: localStyles.textFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        }\n      }, p.allMessages[6], \": \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        }\n      }, s.officePhoneNumber)), s.mobilePhoneNumber != null && React.createElement(View, {\n        style: genericStyles.row_instructions_textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        }\n      }, React.createElement(Text, {\n        style: localStyles.textFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        }\n      }, p.allMessages[7], \": \"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        }\n      }, s.mobilePhoneNumber)), React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[8],\n        onPress: function onPress() {\n          return _this5.sendEmail();\n        },\n        icon: {\n          name: 'mail'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        }\n      }))), s.isTheSameUser && React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[9],\n        onPress: function onPress() {\n          return _this5.editProfile();\n        },\n        icon: {\n          name: 'create'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        }\n      })), !s.isFriend && !s.isTheSameUser && React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        }\n      }, s.hasRequestOnUser && React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        }\n      }, React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[10],\n        onPress: function onPress() {\n          return _this5.localUpdateRelationShip(2);\n        },\n        color: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        }\n      })), React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[11],\n        onPress: function onPress() {\n          return _this5.localUpdateRelationShip(1, 1);\n        },\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448\n        }\n      }))), s.currentUserSentRequest && React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[12],\n        onPress: function onPress() {\n          return _this5.localUpdateRelationShip(1, 0);\n        },\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        }\n      })), !s.hasRequestOnUser && !s.currentUserSentRequest && React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[13],\n        onPress: function onPress() {\n          return _this5.localUpdateRelationShip(0);\n        },\n        icon: {\n          name: 'person-add'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        }\n      }))), s.isFriend && React.createElement(View, {\n        style: localStyles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[14],\n        onPress: function onPress() {\n          return _this5.localUpdateRelationShip(3);\n        },\n        color: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        }\n      })))), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[1],\n        color: DARK_GRAY_COLOR,\n        onPress: function onPress() {\n          return _this5.props.navigation.goBack();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        }\n      })));\n    }\n  }]);\n\n  return UserView;\n}(Component);\n\nUserView.navigationOptions = function (_ref) {\n  var screenProps = _ref.screenProps;\n  return {\n    title: UserView_Texts[screenProps.language][0],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader)\n  };\n};\n\nvar localStyles = StyleSheet.create({\n  imageView: {\n    flex: 1,\n    flexDirection: 'column',\n    paddingTop: 20,\n    paddingBottom: 15,\n    paddingRight: 15,\n    paddingLeft: 15,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textFields: {\n    fontWeight: 'bold',\n    fontSize: 15\n  },\n  buttonView: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 15\n  },\n  touchableHighlight_WithBorder: {\n    height: 0.7 * D.GLOBAL_SCREEN_WIDTH,\n    width: 0.7 * D.GLOBAL_SCREEN_WIDTH,\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  touchableHighlight_NoBorder: {\n    height: 0.7 * D.GLOBAL_SCREEN_WIDTH,\n    width: 0.7 * D.GLOBAL_SCREEN_WIDTH\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: UserView_Texts[state.appPreferencesReducer.language],\n    user_id: state.userReducer.user_id\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchChangeLoadView: function dispatchChangeLoadView(bool) {\n      return dispatch(changeLoadView(bool));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserView);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/contactUsers/UserView.js"],"names":["React","Component","Avatar","ListItem","Button","ButtonWithIcon","MailComposer","Icon","ImageZoom","NavigationEvents","connect","changeLoadView","UserView_Texts","Log","Database","contactFunctions","D","genericStyles","DARK_GRAY_COLOR","auxiliarFunctions","DEFAULT_USER_ICON","PouchDB","UserView","props","setModalVisible","isVisible","setState","modalVisible","sendEmail","s","state","isAvailableAsync","isAvailable","composeAsync","recipients","examinedUserEmail","SendEmailQS","editProfile","navigation","navigate","key","routeName","params","currentUser","localUpdateRelationShip","kind","refuseType","p","currentUserSentRequest","updateRelationship","user_id","examinedUser_id","Alert","alert","allMessages","text","onPress","rejectFriendRequest","hasRequestOnUser","isFriend","deleteFriend","info","getParam","loading","loadFunctionOpened","profileImage_width","profileImage_height","isTheSameUser","db","get","then","database","currentExaminedUser","users","information","_id","userName","profileImage","firstName","firstSurname","profession","email","officePhoneNumber","mobilePhoneNumber","friendRequests","made","hasOwnProperty","received","friends","stablishProfileImageDimensions","goBack","catch","error","console","toString","Image","getSize","width","height","dispatchChangeLoadView","lightGray_background","white_background_with_ScrollView","localStyles","imageView","GLOBAL_SCREEN_WIDTH","GLOBAL_SCREEN_HEIGHT","uri","down_buttons","loadDatabaseInformation","flex","alignItems","justifyContent","activateLoadDatabaseInformation","flexDirection","payload","modalView","subtitle","fontSize","paddingTop","paddingBottom","touchableHighlight_NoBorder","touchableHighlight_WithBorder","row_instructions_textInput","textFields","buttonView","name","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","StyleSheet","create","paddingRight","paddingLeft","fontWeight","padding","borderColor","borderWidth","mapStateToProps","appPreferencesReducer","userReducer","mapDispatchToProps","dispatch","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, StyleSheet, TextInput, ScrollView, TouchableHighlight, Alert,\n\t\tModal, ActivityIndicator, Image, FlatList, Button as ButtonNoIcon} from 'react-native'\n\nimport { Avatar, ListItem, Button as ButtonWithIcon} from \"react-native-elements\"\n\nimport * as MailComposer from 'expo-mail-composer';\n\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport ImageZoom from 'react-native-image-pan-zoom'\n\nimport { NavigationEvents } from 'react-navigation'\n\nimport { connect } from 'react-redux'\nimport { changeLoadView } from '../../redux/actions/popUpActions'\nimport { UserView_Texts } from '../../languages/screens/contactUsers/UserView'\n\nimport * as Log              from '../../genericFunctions/logFunctions'\nimport * as Database         from '../../genericFunctions/databaseFunctions'\nimport * as contactFunctions from '../../genericFunctions/contactUsersFunctions'\nimport * as D                from '../../constants/Dimensions'\nimport { genericStyles, DARK_GRAY_COLOR } from '../../constants/genericStyles'\n\nimport * as auxiliarFunctions from '../../genericFunctions/otherFunctions'\nimport {DEFAULT_USER_ICON} from '../../constants/genericImages'\n\nimport PouchDB from 'pouchdb-react-native'\n\n\nclass UserView extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tlet info = this.props.navigation.getParam('information');\n\t\tthis.state = {\t\n\t\t\tloading:             true,  // Determina si se está cargando la información necesaria desde la base de datos\n\t\t\tloadFunctionOpened:  true,  // Indica si se puede ingresar a la función loadDatabaseInformation\n\t\t\tmodalVisible:        false, // Determina si está visible o no el modal que permite visualizar la imagen del perfil\n\n\t\t\tprofileImage_width:  null, // Anchura original de la imagen de perfil\n\t\t\tprofileImage_height: null, // Altura original de la imagen de perfil\n\n\t\t\t/* Las siguientes variables determinan la relación que tiene el usuario que se está examinando con el usuario actual\n\t\t\t   Nota que sólo una de ellas puede ser \"true\" al mismo tiempo */\n\t\t\tcurrentUserSentRequest: false, // Indica si el usuario actual le llegó a enviar una solicitud de amistad al usuario examinado\n\t\t\thasRequestOnUser:       false, // Indica si el usuario examinado le ha enviado una solicitud de amistad al usuario actual\n\t\t\tisFriend:               false, // Indica si es amigo del usuario actual\n\t\t\tisTheSameUser:          false, // Indica si el usuario examinado es el mismo que está usando la aplicación\n\t\t}\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle:           UserView_Texts[screenProps.language][0],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t}\n\t});\n\n\t// Aquí cargamos la información relevante del usuario que estamos examinando, así como también el email del usuario actual, lo\n\t// que permitirá enviar correos electrónicos, en caso de tener el permiso para ello\n\tasync loadDatabaseInformation(){\n\t\tlet p    = this.props;\n\t\tconst db = new PouchDB('lithodex');\n\t\tconst examinedUser_id = this.props.navigation.getParam('_id');\n\n\t\tawait db.get('default')\n\t\t\t.then(async(database) => {  \n\n\t\t\t\t// Usuario que se está examinando actualmente\n\t\t\t\tvar currentExaminedUser = database.users[examinedUser_id];\n\t\t\t\tvar currentUser         = database.users[this.props.user_id];\n\n\t\t\t\tif (currentExaminedUser){\n\t\t\t\t\tconst info = currentExaminedUser.information;\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t// -------- Información del usuario examinado -------------\n\t\t\t\t\t\texaminedUser_id:   currentExaminedUser._id,\n\n\t\t\t\t\t\t// Información visible para todos los usuarios\n\t\t\t\t\t\tuserName:          currentExaminedUser.userName,\n\t\t\t\t\t\tprofileImage:      info.profileImage,\n\t\t\t\t\t\tfirstName:         info.firstName,\n\t\t\t\t\t\tfirstSurname:      info.firstSurname,\n\t\t\t\t\t\tprofession:        info.profession,\n\n\t\t\t\t\t\t// Información a la que sólo tienen acceso los amigos o el usuario propio\n\t\t\t\t\t\texaminedUserEmail: info.email,\n\t\t\t\t\t\tofficePhoneNumber: info.officePhoneNumber,\n\t\t\t\t\t\tmobilePhoneNumber: info.mobilePhoneNumber,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Caso en que el usuario examinado es el mismo actual\n\t\t\t\t\tif (examinedUser_id == p.user_id){\n\t\t\t\t\t\tawait this.setState({\n\t\t\t\t\t\t\tcurrentUser, // Almacenamos aquí los datos del usuario actual para poder pasárselos directamente a UserForm, y así esa vista no tiene que\n\t\t\t\t\t\t\t             // volver a acceder a la base de datos\n\t\t\t\t\t\t\tisTheSameUser: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse { // Caso en que el usuario actual está viendo el perfil de otro\n\t\t\t\t\t\tawait this.setState({\n\t\t\t\t\t\t\tcurrentUserSentRequest: currentUser.friendRequests.made.hasOwnProperty(currentExaminedUser._id),\n\t\t\t\t\t\t\thasRequestOnUser:       currentUser.friendRequests.received.hasOwnProperty(currentExaminedUser._id),\n\t\t\t\t\t\t\tisFriend:               currentUser.friends.hasOwnProperty(currentExaminedUser._id),\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tthis.stablishProfileImageDimensions();\n\t\t\t\t\tthis.setState({loading: false, loadFunctionOpened: true});\n\n\t\t\t\t} else {\n\t\t\t\t\t// Esto es necesario por si acaso el otro usuario fue eliminado mientras el actual trataba de acceder a él\n\t\t\t\t\tp.navigation.goBack();\n\t\t\t\t}\n\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.error(error.toString());\n\t\t\t\tthis.setState({loading: false, loadFunctionOpened: true});\n\t\t\t})\t\n\t}\n\n\tstablishProfileImageDimensions(){\n\t\tlet s = this.state;\n\t\tif (s.profileImage != null){\n\t\t\tImage.getSize(s.profileImage, (width, height) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tprofileImage_width:  width, \n\t\t\t\t\tprofileImage_height: height,\t\n\t\t\t\t})\n\t\t\t})\t\n\t\t}\n\t}\n\n\tcomponentWillUnmount(){\n\t\t// Hacemos que la vista que llamó a ésta cargue de nuevo\n\t\tthis.props.dispatchChangeLoadView(true);\n\t}\n\n\t// Determina si debe mostrarse o no el modal que permite visualizar con detalle la imagen de perfil\n\tsetModalVisible = (isVisible) =>{\n\t\tthis.setState({modalVisible: isVisible});\n\t}\n\n\t// Procedimiento para enviar un correo\n\tsendEmail = async() => {\n\t\tlet s = this.state;\n\n\t\t// Esto determina si es posible usar el MailComposer en este dispositivo\n\t\tvar isAvailable = await MailComposer.isAvailableAsync();\n\n\t\tif (isAvailable){\n\t\t\tMailComposer.composeAsync({recipients: [s.examinedUserEmail]});\n\t\t}\n\t\telse { // En caso de que no se pueda usar el MailComposer, usamos esta otra función\n\n\t\t\t/* Nota: Dicen en Internet que este método no permite adjuntar archivos, pero haciendo pruebas se verificó que al menos\n\t\t\t   en Android sí se logra. Ello porque esta función nos lleva a una nueva interfaz (ajena a la aplicación) en la\n\t\t\t   que hay un botón para adjuntar archivo. Lo que sí es cierto es que no podemos adjuntarlo directamente desde\n\t\t\t   aquí, pasándolo como parámetro */\n\t\t\tcontactFunctions.SendEmailQS(s.examinedUserEmail, \"\", \"\");\n\t\t}\n\t}\n\n\t// Función para dirigirse a la ventana de edición de perfil\n\teditProfile = () => {\n\t\tlet s = this.state;\n\t\tthis.props.navigation.navigate({ key: 'UserForm', routeName: 'UserForm', params: s.currentUser});\n\t}\n\n\t// Para rechazar una solicitud de amistad\n\trejectFriendRequest(kind){\n\t\tthis.setState({hasRequestOnUser: false});\t\t\n\t\t// Quien había enviado la solicitud es el usuario que ahora se está examinando\n\t\tDatabase.updateRelationship(this.state.examinedUser_id, this.props.user_id, kind);\n\t}\n\n\t// Para eliminar a otro usuario de la lista de amigos\n\tdeleteFriend(kind){\n\t\tthis.setState({isFriend: false});\n\t\t// Aquí no importa el orden en que pasemos los dos primeros parámetros\n\t\tDatabase.updateRelationship(this.props.user_id, this.state.examinedUser_id, kind);\n\t}\n\n\t/* Función para actualizar la relación de amistad que hay entre los dos usuarios. La acción que realiza depende del valor de \"kind\"\n\n\t\t* Si kind = 0, un usuario le está haciendo una solicitud de amistad a otro.\n\t\t* Si kind = 1, se está eliminando una solicitud de amistad. \n\t\t    Si el mismo que la había hecho fue el que la canceló, refuseType será igual a 0.\n\t\t    Si quien está cancelando la solicitud es quien la había recibido, refuseType será igual a 1.\n\t\t* Si kind = 2, se está aprobando una solicitud de amistad.\n\t\t* Si kind = 3, se está eliminando a otro usuario de la lista de amigos\n\t*/\n\tlocalUpdateRelationShip = async(kind, refuseType = 0) => {\n\t\tlet p = this.props;\n\t\tlet s = this.state;\n\n\t\t// Nota: Recuerda que siempre el primer argumento de la función \"Database.updateRelationship\" es quien originalmente\n\t\t// envió la solicitud, así que el orden en que se pasan los parámetros no siempre es el mismo\n\n\t\tif (kind == 0){ // Caso en que se le envió una solicitud de amistad a otro usuario\n\t\t\tthis.setState({currentUserSentRequest: true});\n\n\t\t\t// Quien envió la solicitud es el usuario actual\n\t\t\tawait Database.updateRelationship(p.user_id, s.examinedUser_id, kind);\n\t\t}\n\t\telse if (kind == 1){ // Caso en que se está eliminando una solicitud de amistad\n\n\t\t\tif (refuseType == 0){ // Caso en que el mismo que había hecho la solicitud la está cancelando\n\t\t\t\tthis.setState({currentUserSentRequest: false});\n\n\t\t\t\t// Quien había enviado la solicitud es el usuario actual\n\t\t\t\tawait Database.updateRelationship(p.user_id, s.examinedUser_id, kind);\n\t\t\t} \n\t\t\telse { // Caso en que el usuario actual está rechazando una solicitud que otro le había hecho\n\n\t\t\t\t// Alerta: \"¿Seguro de que desea rechazar la solicitud?\"\n\t\t\t\tAlert.alert(p.allMessages[15], p.allMessages[18],\n\t\t\t\t\t[\n\t\t\t\t\t\t// Mensaje: \"Sí\"\n\t\t\t\t\t\t{text: p.allMessages[16], onPress: () => this.rejectFriendRequest(kind)},\n\t\t\t\t\t\t// Mensaje: \"No\"\n\t\t\t\t\t\t{text: p.allMessages[17]},\n\t\t\t\t\t] \n\t\t\t\t)\n\t\t\t}\n\t\t} else if (kind == 2){ // Caso en que se está aprobando una solicitud de amistad\n\t\t\tthis.setState({hasRequestOnUser: false, isFriend: true});\n\n\t\t\t// Quien había enviado la solicitud es el usuario que ahora se está examinando\n\t\t\tawait Database.updateRelationship(s.examinedUser_id, p.user_id, kind);\n\t\t}\n\t\telse { // Caso en que los dos usuarios dejaron de ser amigos\n\n\t\t\t// Alerta: \"¿Seguro de que desea eliminar a este usuario de su lista de amigos?\"\n\t\t\tAlert.alert(p.allMessages[15], p.allMessages[19],\n\t\t\t\t[\n\t\t\t\t\t// Mensaje: \"Sí\"\n\t\t\t\t\t{text: p.allMessages[16], onPress: () => this.deleteFriend(kind)},\n\t\t\t\t\t// Mensaje: \"No\"\n\t\t\t\t\t{text: p.allMessages[17]},\n\t\t\t\t] \n\t\t\t)\n\t\t}\n\t}\n\n\t// Ventana para visualizar la imagen del perfil, permitiendo hacerle zoom\n\tmodalView(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Modal\n\t\t\t\t\tanimationType  = \"fade\"\n\t\t\t\t\ttransparent    = {false}\n\t\t\t\t\tvisible        = {s.modalVisible}\n\t\t\t\t\tonRequestClose = {() => this.setModalVisible(false)}\n\t\t\t\t>\n\t\t\t\t\t<View style = {genericStyles.lightGray_background}>\n\n\t\t\t\t\t\t{/*Aquí se visualiza la imagen menos el botón para volver*/}\n\t\t\t\t\t\t<View style = {genericStyles.white_background_with_ScrollView}>\n\n\t\t\t\t\t\t\t{/*Imagen mostrada*/}\n\t\t\t\t\t\t\t<View style = {localStyles.imageView}>\n\t\t\t\t\t\t\t\t<ImageZoom \n\t\t\t\t\t\t\t\t\tcropWidth   = {0.9 * D.GLOBAL_SCREEN_WIDTH}  // Ancho del área operativa\n\t\t\t\t\t\t\t\t\tcropHeight  = {0.8 * D.GLOBAL_SCREEN_HEIGHT} // Alto del área operativa\n\t\t\t\t\t\t\t\t\timageWidth  = {s.profileImage_width}  // Ancho de la imagen a mostrar\n\t\t\t\t\t\t\t\t\timageHeight = {s.profileImage_height} // Alto de la imagen a mostrar\n\t\t\t\t\t\t\t\t\tenableCenterFocus = {false} // Si se deja esto en \"true\", siempre se enfoca el centro de la imagen\n\t\t\t\t\t\t\t\t\tminScale    = {1/100}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Image \n\t\t\t\t\t\t\t\t\t\tsource = {{uri: s.profileImage}}\n\t\t\t\t\t\t\t\t\t\tstyle  = {{width: s.profileImage_width, height: s.profileImage_height}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ImageZoom> \n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{/*// Botón para regresar a la vista anterior */}\n\t\t\t\t\t\t<View style = {genericStyles.down_buttons}>\n\t\t\t\t\t\t\t<ButtonNoIcon\n\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\ttitle   = {p.allMessages[1]} // Mensaje: \"Volver\"\n\t\t\t\t\t\t\t\tonPress = {() => this.setModalVisible(false)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\t\t\t\t</Modal>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Sirve para activar la función que lee desde la base de datos. Esto es útil cuando estamos emulando la aplicación y refrescamos la página\n\t// en caliente, ya que hacer eso volverá a colocar this.state.loading en su valor inicial (true) pero este componente ya estará montado, por lo que \n\t// no se activará el NavigationEvents onWillFocus, y en consecuencia la vista se quedará pegada en \"Cargando\"\n\tactivateLoadDatabaseInformation(){\n\t\tif (this.state.loadFunctionOpened){\n\t\t\tthis.setState({loadFunctionOpened: false});\n\t\t\tthis.loadDatabaseInformation();\n\t\t}\n\t\treturn(<View/>)\n\t}\n\n\t// Todo lo que se le mostrará al usuario\n\trender(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Caso en que todavía se está cargando información desde la base de datos\n\t\tif (s.loading){\n\t\t\treturn(\n\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'flex-start'}}>\n\t\t\t\t\t{this.activateLoadDatabaseInformation()}\n\t\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n\t\t\t\t\t\t<ActivityIndicator size = \"large\" color = \"#0000ff\" />\n\t\t\t\t\t\t{/*Mensaje: \"Cargando\"*/}\n\t\t\t\t\t\t<Text>{p.allMessages[2]}...</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\t\t\n\t\t\t)\n\t\t}\n\n\t\t/// Caso en que ya se cargó la información necesaria desde la base de datos\n\t\treturn(\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t<NavigationEvents onWillFocus = {payload => this.loadDatabaseInformation()}/>\n\n\t\t\t\t{/*Ventana del modal*/}\n\t\t\t\t{this.modalView()}\n\n\t\t\t\t{/*Ésta es la parte principal, en la que está la imagen de perfil, la información de usuario, el botón para añadir o quitar de amigos, etc.*/}\n\t\t\t\t<View style = {genericStyles.white_background_with_ScrollView}>\n\t\t\t\t\t<ScrollView>\n\n\t\t\t\t\t\t{/*Título que se muestra en la parte superior, indicando el nombre de usuario (que no es necesariamente el nombre real)*/}\n\t\t\t\t\t\t<Text style = {{...genericStyles.subtitle, fontSize: 25}}>{s.userName}</Text>\n\n\t\t\t\t\t\t<View style = {{justifyContent: 'center', alignItems: 'center', paddingTop: 20, paddingBottom: 20}}>\n\t\t\t\t\t\t\t{/*//Aquí mostramos la imagen del perfil*/}\n\t\t\t\t\t\t\t{(s.profileImage != null) &&\n\t\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t\t<TouchableHighlight \n\t\t\t\t\t\t\t\t\t\tonPress = {() => {this.setModalVisible(true)}} \n\t\t\t\t\t\t\t\t\t\tstyle   = {localStyles.touchableHighlight_NoBorder}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Image \n\t\t\t\t\t\t\t\t\t\t\tresizeMethod = \"auto\"\n\t\t\t\t\t\t\t\t\t\t\tsource       = {{ uri: s.profileImage }}\n\t\t\t\t\t\t\t\t\t\t\tstyle        = {localStyles.touchableHighlight_WithBorder}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{(s.profileImage == null) &&\n\t\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\t\t\tsource         = {DEFAULT_USER_ICON}\n\t\t\t\t\t\t\t\t\t\tcontainerStyle = {localStyles.touchableHighlight_WithBorder}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<View style = {genericStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t{/*Mensaje: \"Nombre\"*/}\n\t\t\t\t\t\t\t<Text style = {localStyles.textFields}>{p.allMessages[3]}: </Text>\n\t\t\t\t\t\t\t<Text>{s.firstName}</Text>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<View style = {genericStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t{/*//Mensaje: \"Apellido\"*/}\n\t\t\t\t\t\t\t<Text style = {localStyles.textFields}>{p.allMessages[4]}: </Text>\n\t\t\t\t\t\t\t<Text>{s.firstSurname}</Text>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{(s.profession != null) &&\n\t\t\t\t\t\t\t<View style = {genericStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t\t{/*//Mensaje: \"Profesión\"*/}\n\t\t\t\t\t\t\t\t<Text style = {localStyles.textFields}>{p.allMessages[5]}: </Text>\n\t\t\t\t\t\t\t\t<Text>{s.profession}</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{(s.isFriend || s.isTheSameUser) && /// Aquí colocamos lo que aparece tanto cuando el usuario examinado es el mismo actual, o cuando es su amigo\n\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t{(s.officePhoneNumber != null) &&\n\t\t\t\t\t\t\t\t\t<View style = {genericStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t\t\t\t{/*Mensaje: Teléfono de oficina\"*/}\n\t\t\t\t\t\t\t\t\t\t<Text style = {localStyles.textFields}>{p.allMessages[6]}: </Text>\n\t\t\t\t\t\t\t\t\t\t<Text>{s.officePhoneNumber}</Text>\n\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{(s.mobilePhoneNumber != null) &&\n\t\t\t\t\t\t\t\t\t<View style = {genericStyles.row_instructions_textInput}>\n\t\t\t\t\t\t\t\t\t\t<Text style = {localStyles.textFields}>{p.allMessages[7]}: </Text>\n\t\t\t\t\t\t\t\t\t\t{/*Mensaje: \"Teléfono móvil\"*/}\n\t\t\t\t\t\t\t\t\t\t<Text>{s.mobilePhoneNumber}</Text>\n\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t\t<ButtonWithIcon  ///Botón para enviar un correo electrónico\n\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[8]} // Mensaje: \"Enviar correo\"\n\t\t\t\t\t\t\t\t\t\tonPress = {() => this.sendEmail()}\n\t\t\t\t\t\t\t\t\t\ticon    = {{name: 'mail'}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{(s.isTheSameUser) && // Aquí colocamos lo que debe aparecer sólo cuando el usuario actual es el mismo examinado\n\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t<ButtonWithIcon  ///Botón para editar el perfil\n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[9]} // Mensaje: \"Editar perfil\"\n\t\t\t\t\t\t\t\t\tonPress = {() => this.editProfile()}\n\t\t\t\t\t\t\t\t\ticon    = {{name: 'create'}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{(!s.isFriend && !s.isTheSameUser) && /// En esta parte va lo que se muestra cuando el usuario examinado no es amigo del actual, ni es él mismo\n\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t{(s.hasRequestOnUser) &&\n\t\t\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t\t\t\t<ButtonNoIcon  ///Botón para aprobar la solicitud de amistad que el otro usuario le hizo al actual\n\t\t\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[10]} // Mensaje: \"Aceptar solicitud\"\n\t\t\t\t\t\t\t\t\t\t\t\tonPress = {() => this.localUpdateRelationShip(2)}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor   = 'green'\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t\t\t\t<ButtonNoIcon  ///Botón para rechazar la solicitud de amistad que el otro usuario le hizo al actual\n\t\t\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[11]} // Mensaje: \"Rechazar solicitud\"\n\t\t\t\t\t\t\t\t\t\t\t\tonPress = {() => this.localUpdateRelationShip(1,1)}\n\t\t\t\t\t\t\t\t\t\t\t\tcolor   = 'red'\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{(s.currentUserSentRequest) &&\n\t\t\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t\t\t<ButtonNoIcon  ///Botón para cancelar la solicitud de amistad que el usuario actual le había hecho al examinado\n\t\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[12]} // Mensaje: \"Cancelar solicitud\"\n\t\t\t\t\t\t\t\t\t\t\tonPress = {() => this.localUpdateRelationShip(1,0)}\n\t\t\t\t\t\t\t\t\t\t\tcolor   = 'red'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{(!s.hasRequestOnUser && !s.currentUserSentRequest) &&\n\t\t\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t\t\t<ButtonWithIcon  ///Botón para solicitar añadir a este usuario como amigo\n\t\t\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[13]} // Mensaje: \"Añadir a amigos\"\n\t\t\t\t\t\t\t\t\t\t\tonPress = {() => this.localUpdateRelationShip(0)}\n\t\t\t\t\t\t\t\t\t\t\ticon    = {{name: 'person-add'}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t{(s.isFriend) && /// Aquí colocamos lo que debe aparecer sólo cuando el usuario examinado es el mismo actual\n\t\t\t\t\t\t\t<View style = {localStyles.buttonView}> \n\t\t\t\t\t\t\t\t<ButtonNoIcon  ///Botón para eliminar al usuario de la lista de amigos\n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[14]} // Mensaje: \"Eliminar de amigos\"\n\t\t\t\t\t\t\t\t\tonPress = {() => this.localUpdateRelationShip(3)}\n\t\t\t\t\t\t\t\t\tcolor   = 'red'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\n\t\t\t\t\t</ScrollView>\n\t\t\t\t</View>\n\n\t\t\t\t{/*//Botón para regresar a la vista anterior */}\n\t\t\t\t<View style = {genericStyles.down_buttons}>\n\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\traised\n\t\t\t\t\t\ttitle   = {p.allMessages[1]} // Mensaje: \"Volver\"\n\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\tonPress = {() => this.props.navigation.goBack()}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla\nconst localStyles = StyleSheet.create({\n\n\t// Formato de la vista en la que se muestra una imagen con sus dimensiones originales (Modal 2)\n\timageView: {\n\t\tflex:           1,\n\t\tflexDirection:  'column',\n\t\tpaddingTop:     20, \n\t\tpaddingBottom:  15, \n\t\tpaddingRight:   15, \n\t\tpaddingLeft:    15,\n\t\talignItems:     'center',\n\t\tjustifyContent: 'center',\n\t},\n\n\t// Formato de los textos que indican el nombre de un campo a mostrar del usuario\n\ttextFields: {\n\t\tfontWeight: 'bold',\n\t\tfontSize:   15,\n\t},\n\n\t// Formato de los botones para añadir como amigo, aprobar una solicitud existente, dejar de ser amigo de alguin, o editar el propio perfil\n\tbuttonView: {\n\t\tflex:           1, \n\t\talignItems:     'center', \n\t\tjustifyContent: 'center', \n\t\tpadding:         15,\n\t},\n\n\t/* Formato del cuadro en donde irá el TouchableHighlight (aunque todavía no ejercerá acción) donde luego se mostrará la foto de perfil, \n\t   encima de los botones de agregar desde galería y tomar nueva foto. También es el formato de la imagen ya creada*/\n\ttouchableHighlight_WithBorder: {\n\t\theight:         0.7 * D.GLOBAL_SCREEN_WIDTH, \n\t\twidth:          0.7 * D.GLOBAL_SCREEN_WIDTH, \n\t\tborderColor:    'black', \n\t\tborderWidth:    1,\n\t},\n\n\t// Formato del TouchableHighlight en donde se muestra la foto de perfil, encima de los botones de agregar desde galería y tomar nueva foto\n\ttouchableHighlight_NoBorder: {\n\t\theight:         0.7 * D.GLOBAL_SCREEN_WIDTH, \n\t\twidth:          0.7 * D.GLOBAL_SCREEN_WIDTH, \n\t},\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: UserView_Texts[state.appPreferencesReducer.language], \n\t\tuser_id:     state.userReducer.user_id,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchChangeLoadView: (bool) => dispatch(changeLoadView(bool)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserView);"]},"metadata":{},"sourceType":"module"}