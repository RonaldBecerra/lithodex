{"ast":null,"code":"import PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport tinycolor from \"tinycolor2\";\nexport function toHsv(color) {\n  return tinycolor(color).toHsv();\n}\nexport function fromHsv(hsv) {\n  return tinycolor(hsv).toHexString();\n}\n\nvar fn = function fn() {\n  return true;\n};\n\nexport function createPanResponder(_a) {\n  var _b = _a.onStart,\n      onStart = _b === void 0 ? fn : _b,\n      _c = _a.onMove,\n      onMove = _c === void 0 ? fn : _c,\n      _d = _a.onEnd,\n      onEnd = _d === void 0 ? fn : _d;\n  return PanResponder.create({\n    onStartShouldSetPanResponder: fn,\n    onStartShouldSetPanResponderCapture: fn,\n    onMoveShouldSetPanResponder: fn,\n    onMoveShouldSetPanResponderCapture: fn,\n    onPanResponderTerminationRequest: fn,\n    onPanResponderGrant: function onPanResponderGrant(evt, state) {\n      return onStart({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    },\n    onPanResponderMove: function onPanResponderMove(evt, state) {\n      return onMove({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    },\n    onPanResponderRelease: function onPanResponderRelease(evt, state) {\n      return onEnd({\n        x: evt.nativeEvent.pageX,\n        y: evt.nativeEvent.pageY\n      }, evt, state);\n    }\n  });\n}\nexport function rotatePoint(point, angle, center) {\n  if (center === void 0) {\n    center = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var transOriginX = point.x - center.x;\n  var transOriginY = point.y - center.y;\n  var rotatedX = transOriginX * Math.cos(angle) - transOriginY * Math.sin(angle);\n  var rotatedY = transOriginY * Math.cos(angle) + transOriginX * Math.sin(angle);\n  var normalizedX = rotatedX + center.x;\n  var normalizedY = rotatedY + center.y;\n  return {\n    x: normalizedX,\n    y: normalizedY\n  };\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GestureResponderEvent,\n  PanResponder,\n  PanResponderGestureState,\n} from \"react-native\"\nimport tinycolor from \"tinycolor2\"\n\nimport { HsvColor, Point2D } from \"./typeHelpers\"\n\n/**\n * Converts color to hsv representation.\n * @param {string} color any color represenation - name, hexa, rgb\n * @return {object} { h: number, s: number, v: number } object literal\n */\nexport function toHsv(color: string): HsvColor {\n  return tinycolor(color).toHsv()\n}\n\n/**\n * Converts hsv object to hexa color string.\n * @param {object} hsv { h: number, s: number, v: number } object literal\n * @return {string} color in hexa representation\n */\nexport function fromHsv(hsv: HsvColor): string {\n  return tinycolor(hsv).toHexString()\n}\n\ntype PanResponderCallback = (\n  { x, y }: Point2D,\n  event: GestureResponderEvent,\n  state: PanResponderGestureState\n) => boolean;\n\nconst fn = () => true\n/**\n * Simplified pan responder wrapper.\n */\nexport function createPanResponder({\n  onStart = fn,\n  onMove = fn,\n  onEnd = fn,\n}: {\n  onStart?: PanResponderCallback;\n  onMove?: PanResponderCallback;\n  onEnd?: PanResponderCallback;\n}) {\n  return PanResponder.create({\n    onStartShouldSetPanResponder: fn,\n    onStartShouldSetPanResponderCapture: fn,\n    onMoveShouldSetPanResponder: fn,\n    onMoveShouldSetPanResponderCapture: fn,\n    onPanResponderTerminationRequest: fn,\n    onPanResponderGrant: (evt, state) => {\n      return onStart(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n    onPanResponderMove: (evt, state) => {\n      return onMove(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n    onPanResponderRelease: (evt, state) => {\n      return onEnd(\n        { x: evt.nativeEvent.pageX, y: evt.nativeEvent.pageY },\n        evt,\n        state\n      )\n    },\n  })\n}\n\n/**\n * Rotates point around given center in 2d.\n * Point is object literal { x: number, y: number }\n * @param {point} point to be rotated\n * @param {number} angle in radians\n * @param {point} center to be rotated around\n * @return {point} rotated point\n */\nexport function rotatePoint(\n  point: Point2D,\n  angle: number,\n  center: Point2D = { x: 0, y: 0 }\n) {\n  // translation to origin\n  const transOriginX = point.x - center.x\n  const transOriginY = point.y - center.y\n\n  // rotation around origin\n  const rotatedX =\n    transOriginX * Math.cos(angle) - transOriginY * Math.sin(angle)\n  const rotatedY =\n    transOriginY * Math.cos(angle) + transOriginX * Math.sin(angle)\n\n  // translate back from origin\n  const normalizedX = rotatedX + center.x\n  const normalizedY = rotatedY + center.y\n  return {\n    x: normalizedX,\n    y: normalizedY,\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}