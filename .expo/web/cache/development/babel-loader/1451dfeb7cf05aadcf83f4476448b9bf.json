{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\genericFunctions\\\\libraryFunctions.js\";\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LITHOLOGIES_IMAGES, LITHOLOGIES_NAMES } from \"../constants/lithologies\";\nimport { STRUCTURES_NAMES, STRUCTURES_IMAGES } from \"../constants/structures\";\nimport { FOSSILS_NAMES, FOSSILS_IMAGES } from \"../constants/fossils\";\nimport { CARBONATES_GRAIN_DIAMETERS, NO_CARBONATES_GRAIN_DIAMETERS } from \"../constants/grains\";\nimport * as D from \"../constants/Dimensions\";\nexport function createSortedListOfLithologies(language) {\n  var AllLithologiesNames = LITHOLOGIES_NAMES[language];\n  var totalListOfLithologies = [];\n\n  for (var i = 0; i < LITHOLOGIES_IMAGES.length; i++) {\n    var patternToAdd = LITHOLOGIES_IMAGES[i];\n    var newElement = {\n      key: patternToAdd.key,\n      uri: patternToAdd.uri,\n      name: AllLithologiesNames[i].name\n    };\n    totalListOfLithologies.push(newElement);\n  }\n\n  return totalListOfLithologies.sort(function (a, b) {\n    return a.name > b.name ? 1 : -1;\n  });\n}\nexport function createSortedListOfStructures(language) {\n  var AllStructuresNames = STRUCTURES_NAMES[language];\n  var totalListOfStructures = [];\n\n  for (var i = 0; i < STRUCTURES_IMAGES.length; i++) {\n    var structureToAdd = STRUCTURES_IMAGES[i];\n    var newElement = {\n      key: structureToAdd.key,\n      uri: structureToAdd.uri,\n      name: AllStructuresNames[i].name\n    };\n    totalListOfStructures.push(newElement);\n  }\n\n  return totalListOfStructures.sort(function (a, b) {\n    return a.name > b.name ? 1 : -1;\n  });\n}\nexport function createSortedListOfFossils(language) {\n  var AllFossilNames = FOSSILS_NAMES[language];\n  var totalListOfFossils = [];\n\n  for (i = 0; i < FOSSILS_IMAGES.length; i++) {\n    var fossilToAdd = FOSSILS_IMAGES[i];\n    var newElement = {\n      key: fossilToAdd.key,\n      uri: fossilToAdd.uri,\n      name: AllFossilNames[i].name\n    };\n    totalListOfFossils.push(newElement);\n  }\n\n  return totalListOfFossils.sort(function (a, b) {\n    return a.name > b.name ? 1 : -1;\n  });\n}\n\nfunction createHorizontalRule_Texts(language, noCarbonates) {\n  if (noCarbonates) {\n    var _array = NO_CARBONATES_GRAIN_DIAMETERS[language];\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'column',\n        paddingBottom: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      }\n    }, _array.map(function (item, i) {\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'column'\n        },\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        }\n      }, React.createElement(View, {\n        style: {\n          width: D.LITHOLOGY_ADDING_TERM,\n          paddingBottom: 2,\n          flexDirection: 'row',\n          justifyContent: 'flex-start'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        }\n      }, item)));\n    })));\n  }\n\n  var array = CARBONATES_GRAIN_DIAMETERS[language];\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'column',\n      paddingtop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    }\n  }, array.map(function (item, i) {\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'column'\n      },\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      }\n    }, React.createElement(View, {\n      style: {\n        width: D.LITHOLOGY_ADDING_TERM,\n        paddingBottom: 2,\n        flexDirection: 'row',\n        justifyContent: 'flex-start'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontSize: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      }\n    }, item)));\n  })));\n}\n\nfunction createHorizontalRule_Lines(language, noCarbonates) {\n  if (noCarbonates) {\n    var _array2 = NO_CARBONATES_GRAIN_DIAMETERS[language];\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'column',\n        paddingBottom: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      }\n    }, _array2.map(function (item, i) {\n      return React.createElement(View, {\n        style: {\n          flexDirection: 'column'\n        },\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      }, React.createElement(View, {\n        style: {\n          height: 8,\n          borderLeftColor: 'black',\n          borderLeftWidth: 1,\n          flexDirection: 'column',\n          width: D.LITHOLOGY_ADDING_TERM\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        }\n      }));\n    })), React.createElement(View, {\n      style: {\n        width: D.LITHOLOGY_PICKER_WIDTH - 50 + 1.5,\n        flexDirection: 'row',\n        borderWidth: 0.7,\n        borderColor: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      }\n    }));\n  }\n\n  var array = CARBONATES_GRAIN_DIAMETERS[language];\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'column',\n      paddingTop: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    }\n  }, React.createElement(View, {\n    style: {\n      width: D.LITHOLOGY_PICKER_WIDTH - 110 + 1,\n      flexDirection: 'row',\n      borderWidth: 0.7,\n      borderColor: 'black'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    }\n  }, array.map(function (item, i) {\n    return React.createElement(View, {\n      style: {\n        flexDirection: 'column'\n      },\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      }\n    }, React.createElement(View, {\n      style: {\n        height: 8,\n        borderLeftColor: 'black',\n        borderLeftWidth: 1,\n        flexDirection: 'column',\n        width: D.LITHOLOGY_ADDING_TERM\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      }\n    }));\n  })));\n}\n\nexport function createNoCarbonatesRule(language) {\n  return function (_Component) {\n    _inherits(createNoCarbonatesRule, _Component);\n\n    function createNoCarbonatesRule() {\n      _classCallCheck(this, createNoCarbonatesRule);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(createNoCarbonatesRule).apply(this, arguments));\n    }\n\n    _createClass(createNoCarbonatesRule, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            height: 15,\n            paddingLeft: -14\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          }\n        }, createHorizontalRule_Texts(language, true)), React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            height: 10,\n            paddingLeft: -1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          }\n        }, createHorizontalRule_Lines(language, true)), React.createElement(View, {\n          style: {\n            height: 2\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }));\n      }\n    }]);\n\n    return createNoCarbonatesRule;\n  }(Component);\n}\nexport function createCarbonatesRule(language) {\n  return function (_Component2) {\n    _inherits(createCarbonatesRule, _Component2);\n\n    function createCarbonatesRule() {\n      _classCallCheck(this, createCarbonatesRule);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(createCarbonatesRule).apply(this, arguments));\n    }\n\n    _createClass(createCarbonatesRule, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            height: 15,\n            paddingLeft: -1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          }\n        }, createHorizontalRule_Lines(language, false)), React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            height: 15,\n            paddingLeft: -14\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          }\n        }, createHorizontalRule_Texts(language, false)));\n      }\n    }]);\n\n    return createCarbonatesRule;\n  }(Component);\n}","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/genericFunctions/libraryFunctions.js"],"names":["React","Component","LITHOLOGIES_IMAGES","LITHOLOGIES_NAMES","STRUCTURES_NAMES","STRUCTURES_IMAGES","FOSSILS_NAMES","FOSSILS_IMAGES","CARBONATES_GRAIN_DIAMETERS","NO_CARBONATES_GRAIN_DIAMETERS","D","createSortedListOfLithologies","language","AllLithologiesNames","totalListOfLithologies","i","length","patternToAdd","newElement","key","uri","name","push","sort","a","b","createSortedListOfStructures","AllStructuresNames","totalListOfStructures","structureToAdd","createSortedListOfFossils","AllFossilNames","totalListOfFossils","fossilToAdd","createHorizontalRule_Texts","noCarbonates","array","flexDirection","paddingBottom","map","item","width","LITHOLOGY_ADDING_TERM","justifyContent","fontSize","paddingtop","createHorizontalRule_Lines","height","borderLeftColor","borderLeftWidth","LITHOLOGY_PICKER_WIDTH","borderWidth","borderColor","paddingTop","createNoCarbonatesRule","paddingLeft","createCarbonatesRule"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {Text, View} from 'react-native'\r\n\r\nimport { LITHOLOGIES_IMAGES, LITHOLOGIES_NAMES } from '../constants/lithologies'\r\nimport { STRUCTURES_NAMES, STRUCTURES_IMAGES }   from '../constants/structures'\r\nimport { FOSSILS_NAMES, FOSSILS_IMAGES }         from '../constants/fossils'\r\n\r\nimport { CARBONATES_GRAIN_DIAMETERS, NO_CARBONATES_GRAIN_DIAMETERS } from '../constants/grains'\r\nimport * as D from '../constants/Dimensions'\r\n\r\n\r\n/* Aquí creamos una lista de litologías cuyos elementos tengan los campos: \"key\", \"uri\" y \"name\", donde \r\n   \"name\" depende del idioma actual, y por ello es que tenemos que construir esta lista.\r\n*/\r\nexport function createSortedListOfLithologies(language){\r\n\t// Aquí almacenamos los nombres de las litologías que se le mostrarán al usuario, de acuerdo al idioma\r\n\tvar AllLithologiesNames    = LITHOLOGIES_NAMES[language];\r\n\tvar totalListOfLithologies = [];\r\n\r\n\tfor (var i = 0; i < LITHOLOGIES_IMAGES.length; i++){\r\n\t\tvar patternToAdd = LITHOLOGIES_IMAGES[i];\r\n\t\tvar newElement   = {key: patternToAdd.key, uri: patternToAdd.uri, name: AllLithologiesNames[i].name};\r\n\t\ttotalListOfLithologies.push(newElement);\t\t\t\t\r\n\t}\r\n\treturn totalListOfLithologies.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n}\r\n\r\n/* Aquí creamos una lista de estructuras cuyos elementos tengan los campos: \"key\", \"uri\" y \"name\", donde \r\n   \"name\" depende del idioma actual, y por ello es que tenemos que construir esta lista.\r\n*/\r\nexport function createSortedListOfStructures(language){\r\n\t// Aquí almacenamos los nombres de las estructuras que se le mostrarán al usuario, de acuerdo al idioma\r\n\tvar AllStructuresNames    = STRUCTURES_NAMES[language];\r\n\tvar totalListOfStructures = [];\r\n\r\n\tfor (var i = 0; i < STRUCTURES_IMAGES.length; i++){\r\n\t\tvar structureToAdd = STRUCTURES_IMAGES[i];\r\n\t\tvar newElement     = {key: structureToAdd.key, uri: structureToAdd.uri, name: AllStructuresNames[i].name};\r\n\t\ttotalListOfStructures.push(newElement);\t\t\t\t\r\n\t}\r\n\treturn totalListOfStructures.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n}\r\n\r\n/* Aquí creamos una lista de fósiles cuyos elementos tengan los campos: \"key\", \"uri\", y \"name\", donde \r\n   \"name\" depende del idioma actual, y por ello es que tenemos que construir esta lista.\r\n*/\r\nexport function createSortedListOfFossils(language){\r\n\t// Aquí almacenamos los nombres de los fósiles que se le mostrarán al usuario, de acuerdo al idioma\r\n\tvar AllFossilNames     = FOSSILS_NAMES[language];\r\n\tvar totalListOfFossils = [];\r\n\r\n\tfor (i = 0; i < FOSSILS_IMAGES.length; i++){\r\n\t\tvar fossilToAdd = FOSSILS_IMAGES[i];\r\n\t\tvar newElement  = {key: fossilToAdd.key, uri: fossilToAdd.uri, name: AllFossilNames[i].name};\r\n\t\ttotalListOfFossils.push(newElement);\t\t\t\t\r\n\t}\r\n\treturn totalListOfFossils.sort((a, b) => (a.name > b.name) ? 1 : -1);\r\n}\r\n\r\n// Auxiliar para crear textos de una regla horizontal\r\nfunction createHorizontalRule_Texts(language, noCarbonates){\r\n\t// Caso en que el texto aparece superior a las líneas de la regla (no carbonatos)\r\n\tif (noCarbonates){\r\n\t\tlet array = NO_CARBONATES_GRAIN_DIAMETERS[language];\r\n\t\treturn (\r\n\t\t\t<View style = {{flexDirection: 'column', paddingBottom: 3}}>\r\n\t\t\t\t<View style = {{flexDirection: 'row'}}>\r\n\t\t\t\t\t{array.map((item,i) => (\r\n\t\t\t\t\t\t<View style={{flexDirection: 'column'}}  key={i}>\r\n\t\t\t\t\t\t\t{/*Texto de la regla*/}\r\n\t\t\t\t\t\t\t<View style = {{width: D.LITHOLOGY_ADDING_TERM, paddingBottom: 2, flexDirection: 'row', justifyContent: 'flex-start'}}>\r\n\t\t\t\t\t\t\t\t<Text style = {{fontSize: 10}}>{item}</Text>\r\n\t\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</View>\r\n\t\t\t</View>\r\n\t\t)\r\n\t}\r\n\t/// Caso en que el texto aparece inferior a las líneas de la regla (carbonatos)\r\n\tlet array = CARBONATES_GRAIN_DIAMETERS[language];\r\n\treturn(\r\n\t\t<View style = {{flexDirection: 'column', paddingtop: 10}}>\r\n\t\t\t<View style = {{flexDirection: 'row'}}>\r\n\t\t\t\t{array.map((item,i) => (\r\n\t\t\t\t\t<View style={{flexDirection: 'column'}}  key={i}>\r\n\t\t\t\t\t\t{/*Texto de la regla*/}\r\n\t\t\t\t\t\t<View style = {{width: D.LITHOLOGY_ADDING_TERM, paddingBottom: 2, flexDirection: 'row', justifyContent: 'flex-start'}}>\r\n\t\t\t\t\t\t\t<Text style = {{fontSize: 10}}>{item}</Text>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t))}\r\n\t\t\t</View>\r\n\t\t</View>\t\r\n\t)\r\n}\r\n\r\n/// Auxiliar para crear las líneas de una regla horizontal\r\nfunction createHorizontalRule_Lines(language, noCarbonates){\r\n\t// Caso en que la línea horizontal de la regla debe aparecer debajo de las verticales (no carbonatos)\r\n\tif (noCarbonates){\r\n\t\tlet array = NO_CARBONATES_GRAIN_DIAMETERS[language];\r\n\t\treturn (\r\n\t\t\t<View style = {{flexDirection: 'column', paddingBottom: 5}}>\r\n\t\t\t\t<View style = {{flexDirection: 'row'}}>\r\n\t\t\t\t\t{array.map((item,i) => (\r\n\t\t\t\t\t\t<View style={{flexDirection: 'column'}}  key={i}>\r\n\t\t\t\t\t\t\t{/*Línea vertical divisoria de la regla*/}\r\n\t\t\t\t\t\t\t<View style = {{height: 8, borderLeftColor: 'black', borderLeftWidth: 1, flexDirection: 'column', width: D.LITHOLOGY_ADDING_TERM}}/>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</View>\r\n\t\t\t\t{/*Línea horizontal de la regla */}\r\n\t\t\t\t<View style = {{width: D.LITHOLOGY_PICKER_WIDTH - 50 + 1.5, flexDirection: 'row', borderWidth: 0.7, borderColor: 'black'}}/>\r\n\t\t\t</View>\t\r\n\t\t)\r\n\t}\r\n\t/// Caso en que la línea horizontal de la regla debe aparecer encima de las verticales (carbonatos)\r\n\tlet array = CARBONATES_GRAIN_DIAMETERS[language];\r\n\treturn(\r\n\t\t<View style = {{flexDirection: 'column', paddingTop: 5}}>\r\n\t\t\t{/*Línea horizontal de la regla */}\r\n\t\t\t<View style = {{width: D.LITHOLOGY_PICKER_WIDTH - 110 + 1, flexDirection: 'row', borderWidth: 0.7, borderColor: 'black'}}/>\r\n\r\n\t\t\t{/*Líneas verticales divisorias de la regla*/}\r\n\t\t\t<View style = {{flexDirection: 'row'}}>\r\n\t\t\t\t{array.map((item,i) => (\r\n\t\t\t\t\t<View style={{flexDirection: 'column'}}  key={i}>\r\n\t\t\t\t\t\t<View style = {{height: 8, borderLeftColor: 'black', borderLeftWidth: 1, flexDirection: 'column', width: D.LITHOLOGY_ADDING_TERM}}/>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t))}\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t)\r\n}\r\n\r\n/// Aquí creamos la regla de los no carbonatos, que puede mostrarse en el campo de litología de un estrato\r\n// Es necesario que lo que retorne sea una clase Component de React para que luego pueda usarse su vista\r\nexport function createNoCarbonatesRule(language){\r\n\treturn(\r\n\t\tclass createNoCarbonatesRule extends Component{\r\n\t\t\trender() {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<View style = {{flexDirection: 'column'}}>\r\n\t\t\t\t\t\t<View style = {{flexDirection: 'row', height: 15, paddingLeft: -14}}>\r\n\t\t\t\t\t\t\t{createHorizontalRule_Texts(language, true)} \r\n\t\t\t\t\t\t</View>\r\n\r\n\t\t\t\t\t\t<View style = {{flexDirection: 'row', height: 10, paddingLeft: -1}}>\r\n\t\t\t\t\t\t\t{createHorizontalRule_Lines(language, true)}\r\n\t\t\t\t\t\t</View>\r\n\r\n\t\t\t\t\t\t{/*Esto es sólo para dejar espacio entre la regla y el estrato*/}\r\n\t\t\t\t\t\t<View style = {{height: 2}}/>\r\n\t\t\t\t\t</View>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n}\r\n\r\n/// Aquí creamos la regla de los carbonatos, que puede mostrarse en el campo de litología de un estrato\r\n// Es necesario que lo que retorne sea una clase Component de React para que luego pueda usarse su vista\r\nexport function createCarbonatesRule(language){\r\n\treturn(\r\n\t\tclass createCarbonatesRule extends Component{\r\n\t\t\trender() {\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<View style = {{flexDirection: 'column'}}>\r\n\t\t\t\t\t\t<View style = {{flexDirection: 'row', height: 15, paddingLeft: -1}}>\r\n\t\t\t\t\t\t\t{createHorizontalRule_Lines(language, false)}\r\n\t\t\t\t\t\t</View>\t\t\r\n\r\n\t\t\t\t\t\t<View style = {{flexDirection: 'row', height: 15, paddingLeft: -14}}>\r\n\t\t\t\t\t\t\t{createHorizontalRule_Texts(language, false)} \r\n\t\t\t\t\t\t</View>\t\r\n\t\t\t\t\t</View>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n}"]},"metadata":{},"sourceType":"module"}