{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\components\\\\GammaRayPlot.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { connect } from 'react-redux';\nimport { genericStyles, WHITE_COLOR } from \"../constants/genericStyles\";\nimport * as D from \"../constants/Dimensions\";\nimport { LineChart } from \"../modifiedLibraries/react-native-chart-kit\";\n\nvar GammaRayPlot = function (_React$Component) {\n  _inherits(GammaRayPlot, _React$Component);\n\n  function GammaRayPlot(props) {\n    _classCallCheck(this, GammaRayPlot);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GammaRayPlot).call(this, props));\n  }\n\n  _createClass(GammaRayPlot, [{\n    key: \"plotFunction\",\n    value: function plotFunction(xValues, yValues, plotHeight, scale, minDifference, minYValue, maxYValue) {\n      var p = this.props;\n      var withVerticalLabels = true;\n\n      if (minDifference * 65 / scale < 13) {\n        withVerticalLabels = false;\n      }\n\n      return React.createElement(View, {\n        style: localStyles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }, React.createElement(LineChart, {\n        data: {\n          labels: xValues,\n          datasets: [{\n            data: yValues\n          }]\n        },\n        width: plotHeight,\n        height: D.GAMMA_RAY_WIDTH + 40,\n        verticalLabelRotation: -90,\n        withHorizontalLabels: false,\n        withVerticalLabels: withVerticalLabels,\n        withDots: false,\n        withShadow: false,\n        segments: p.numberVSegments,\n        xLabelsOffset: 20,\n        xAxisLabel: p.unit == 0 ? \"m\" : \"ft\",\n        scale: scale,\n        sizeOfUnit: D.SIZE_OF_UNIT,\n        maxYValue: maxYValue,\n        minYValue: minYValue,\n        chartConfig: {\n          backgroundColor: WHITE_COLOR,\n          backgroundGradientFrom: WHITE_COLOR,\n          backgroundGradientTo: WHITE_COLOR,\n          decimalPlaces: 2,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n            return \"rgba(207, 0, 15, \" + opacity + \")\";\n          },\n          labelColor: function labelColor() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 255;\n            return \"rgba(0, 0, 0, \" + opacity + \")\";\n          },\n          style: {\n            borderRadius: 1\n          }\n        },\n        bezier: true,\n        style: {\n          marginVertical: 0,\n          borderRadius: 1,\n          paddingRight: 0,\n          paddingTop: 5\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var s = this.state;\n      var p = this.props;\n      var buildingPlot = true;\n      var gammaRayValues = p.gammaRayValues.hasOwnProperty('xValuesMeters') ? p.gammaRayValues : this.props.gammaRayValues_Extract.hasOwnProperty('xValuesMeters') ? this.props.gammaRayValues_Extract : null;\n\n      if (gammaRayValues != null) {\n        var numElements = gammaRayValues.xValuesMeters.length;\n        var xValues = p.unit == 0 ? gammaRayValues.xValuesMeters : gammaRayValues.xValuesFeet;\n        var yValues = gammaRayValues.yValues;\n        var minDifference = gammaRayValues.minDifference[p.unit];\n        var minYValue = gammaRayValues.minYValue;\n        var maxYValue = gammaRayValues.maxYValue;\n        var plotHeight = (xValues[0] - xValues[numElements - 1]) * D.SIZE_OF_UNIT * numElements / (p.scale[0] * (numElements - 1));\n        buildingPlot = false;\n      }\n\n      if (buildingPlot || xValues.length == 0) {\n        return React.createElement(View, {\n          style: {\n            width: D.GAMMA_RAY_WIDTH\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          }\n        });\n      }\n\n      var dif = p.topHeightCore - xValues[0];\n      var superiorHeight = dif > 0 ? dif * D.SIZE_OF_UNIT / p.scale[0] : 0;\n      var moreThanForty = superiorHeight > 40;\n\n      if (p.takingShot && moreThanForty) {\n        superiorHeight -= 40;\n      }\n\n      return React.createElement(View, {\n        style: {\n          width: D.GAMMA_RAY_WIDTH,\n          flexDirection: 'column'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        }\n      }, p.takingShot && moreThanForty && React.createElement(View, {\n        style: {\n          paddingTop: superiorHeight,\n          paddingLeft: D.GAMMA_RAY_WIDTH - (3 * (D.GAMMA_RAY_WIDTH + 40) / 4 + 16)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        }\n      }, p.superiorLabels), (!p.takingShot || !moreThanForty) && React.createElement(View, {\n        style: {\n          height: superiorHeight\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        }\n      }), this.plotFunction(xValues, yValues, plotHeight, p.scale[0], minDifference, minYValue, maxYValue));\n    }\n  }]);\n\n  return GammaRayPlot;\n}(React.Component);\n\nvar localStyles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    transform: [{\n      rotate: \"90deg\"\n    }],\n    height: D.GAMMA_RAY_WIDTH,\n    paddingTop: 20\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    gammaRayValues_Extract: state.popUpReducer.gammaRayValues_Extract\n  };\n};\n\nexport default connect(mapStateToProps)(GammaRayPlot);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/components/GammaRayPlot.js"],"names":["React","connect","genericStyles","WHITE_COLOR","D","LineChart","GammaRayPlot","props","xValues","yValues","plotHeight","scale","minDifference","minYValue","maxYValue","p","withVerticalLabels","localStyles","container","labels","datasets","data","GAMMA_RAY_WIDTH","numberVSegments","unit","SIZE_OF_UNIT","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","labelColor","style","borderRadius","marginVertical","paddingRight","paddingTop","s","state","buildingPlot","gammaRayValues","hasOwnProperty","gammaRayValues_Extract","numElements","xValuesMeters","length","xValuesFeet","width","dif","topHeightCore","superiorHeight","moreThanForty","takingShot","flexDirection","paddingLeft","superiorLabels","height","plotFunction","Component","StyleSheet","create","justifyContent","alignItems","transform","rotate","mapStateToProps","popUpReducer"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, View, StyleSheet } from 'react-native'\n\nimport { connect } from 'react-redux'\nimport { genericStyles, WHITE_COLOR } from '../constants/genericStyles'\nimport * as D            from '../constants/Dimensions'\n\nimport {LineChart} from '../modifiedLibraries/react-native-chart-kit';\n\n\nclass GammaRayPlot extends React.Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\t// Función que dibuja la gráfica\n\tplotFunction(xValues, yValues, plotHeight, scale, minDifference, minYValue, maxYValue){\n\t\tlet p = this.props;\n\t\tvar withVerticalLabels = true; // Determina si se muestran las etiquetas que representan las profundidades\n\n\t\t// Si los números en el eje vertical van a salir muy pequeños, no colocamos ninguno. \n\t\tif (minDifference * 65 / scale < 13){\n\t\t\twithVerticalLabels = false;\n\t\t}\n\n\t\treturn (\n\t\t\t<View style = {localStyles.container}>\n\t\t\t\t<LineChart\n\t\t\t\t\tdata = {{\n\t\t\t\t\t\tlabels:   xValues,\n\t\t\t\t\t\tdatasets: [{ data: yValues}],\n\t\t\t\t\t}}\n\n\t\t\t\t\twidth  = {plotHeight} // Como rotamos la vista 90 grados, lo que aquí se considera la anchura en realidad será la altura\n\t\t\t\t\theight = {D.GAMMA_RAY_WIDTH + 40}\n\n\t\t\t\t\t// Es raro que aquí él sí sepa que las etiquetas verticales son las del eje x, a pesar de que la vista está rotada\n\t\t\t\t\tverticalLabelRotation = {-90} \n\n\t\t\t\t\t// Como las etiquetas horizontales (que en realidad son las verticales) las estamos creando aquí, entonces ya en la libería no las tenemos que colocar\n\t\t\t\t\twithHorizontalLabels = {false} \n\n\t\t\t\t\t// Dependerá de lo juntos que estén los datos si se muestran o no las etiquetas de profundidad\n\t\t\t\t\twithVerticalLabels = {withVerticalLabels}\n\n\t\t\t\t\twithDots   = {false} // Para que no se coloque un punto en cada dato leído\n\t\t\t\t\twithShadow = {false} // Para que no se vea la gráfica rellena a la izquierda de la curva (originalmente debajo de la curva)\n\t\t\t\t\tsegments   = {p.numberVSegments} // Número de líneas (verticales en este caso, aunque originalmente son las horizontales) segmenteadas que se mostrarán\n\t\t\t\t\t\n\t\t\t\t\txLabelsOffset = {20} // Para que las etiquetas (verticales en nuestro caso) no salgan tan pegadas a la gráfica\n\t\t\t\t\txAxisLabel    = {(p.unit == 0) ? \"m\" : \"ft\"} // Para que salgan las unidades de medición\n\n\t\t\t\t\t// Parámetros que se le agregaron a la librería\n\t\t\t\t\tscale      = {scale} // Necesitamos pasar la información de cuál es la escala que estamos utilizando\n\t\t\t\t\tsizeOfUnit = {D.SIZE_OF_UNIT} // También necesitamos saber el tamaño de cada unidad de escala\n\t\t\t\t\tmaxYValue  = {maxYValue} // Máximo valor Y (gamma-ray)\n\t\t\t\t\tminYValue  = {minYValue} // Mínimo valor Y (gamma-ray)\n\n\t\t\t\t\tchartConfig = {{\n\t\t\t\t\t\tbackgroundColor:        WHITE_COLOR,\n\t\t\t\t\t\tbackgroundGradientFrom: WHITE_COLOR, \n\t\t\t\t\t\tbackgroundGradientTo:   WHITE_COLOR,\n\t\t\t\t\t\tdecimalPlaces: 2, // Esto es opcional, porque por defecto se coloca en 2\n\t\t\t\t\t\tcolor:      (opacity = 100) => `rgba(207, 0, 15, ${opacity})`, // Color de la gráfica\n\t\t\t\t\t\tlabelColor: (opacity = 255) => `rgba(0, 0, 0, ${opacity})`, // Color de los números y de las líneas segmenteadas internas\n\t\t\t\t\t\tstyle: { borderRadius: 1},\n\t\t\t\t\t}}\n\t\t\t\t\tbezier\n\t\t\t\t\tstyle = {{marginVertical: 0, borderRadius: 1, paddingRight: 0, paddingTop: 5}} \n\t\t\t\t/>\n\t\t\t</View>\n\t\t);\n\t}\n\n\t/// Lo que se le mostrará al usuario\n\trender() {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tlet buildingPlot = true; // Este booleano determina si todavía se están creando los arreglos, de modo de todavía no mostrar la gráfica en caso afirmativo.\n\n\t\tvar gammaRayValues = (p.gammaRayValues.hasOwnProperty('xValuesMeters')) ? p.gammaRayValues : \n\t\t\t((this.props.gammaRayValues_Extract.hasOwnProperty('xValuesMeters')) ? this.props.gammaRayValues_Extract : null);\n\n\t\tif (gammaRayValues != null){\n\t\t\tvar numElements   = gammaRayValues.xValuesMeters.length;\n\t\t\tvar xValues       = (p.unit == 0) ? gammaRayValues.xValuesMeters : gammaRayValues.xValuesFeet;\n\t\t\tvar yValues       = gammaRayValues.yValues;\n\t\t\tvar minDifference = gammaRayValues.minDifference[p.unit];\n\t\t\tvar minYValue     = gammaRayValues.minYValue;\n\t\t\tvar maxYValue     = gammaRayValues.maxYValue;\n\n\t\t\t/* El multiplicar por \"numElements\" y dividir por numElements -1 se debe a que la librería siempre \n\t\t\t   considera un espacio adicional después de que ha terminado de plotear todos los datos\n\n\t\t\t   Según las pruebas que se han hecho, la máxima altura que puede tener la gráfica antes de que empiecen\n\t\t\t   a ocurrir errores es 2730\n\t\t\t */\n\t\t\tvar plotHeight = (xValues[0] - xValues[numElements-1]) * D.SIZE_OF_UNIT * numElements / (p.scale[0] * (numElements - 1));\n\t\t\tbuildingPlot = false;\n\t\t}\n\n\t\tif (buildingPlot || xValues.length == 0){\n\t\t\t// Esto se ve tanto cuando se está construyendo la gráfica, como cuando no hay datos para hacer la gráfica \n\t\t\t// y entonces no mostramos nada\n\t\t\treturn (\n\t\t\t\t<View style = {{width: D.GAMMA_RAY_WIDTH}}/>\n\t\t\t)\n\t\t}\n\t\t// Altura que tendrá el espacio sobrante superior, el cual se debe a que el núcleo podría empezar antes que los datos de gamma-ray\n\t\tlet dif = p.topHeightCore - xValues[0];\n\t\tlet superiorHeight = (dif > 0) ? (dif * D.SIZE_OF_UNIT / p.scale[0]) : 0;\n\n\t\t// Indica que el espacio entre la cabecera (lo que serían las etiquetas superiores) y donde comienza la gráfica es mayor que 40\n\t\tconst moreThanForty = (superiorHeight > 40); \n\n\t\tif (p.takingShot && moreThanForty){\n\t\t\t// Restamos 40 porque en la vista externa ya no se muestran las etiquetas superiores con valores de gamma-ray.\n\t\t\t// En la vista externa, les habíamos asignado una altura de 37 a dichas eqtiquetas, pero por alguna razón\n\t\t\t// aquí hubo que colocar 40 para que cuadraran las mediciones\n\t\t\tsuperiorHeight -= 40;\n\t\t}\n\n\t\treturn (\n\t\t\t<View style = {{width: D.GAMMA_RAY_WIDTH, flexDirection: 'column'}}>\n\t\t\t\t{p.takingShot && moreThanForty &&\n\t\t\t\t\t<View style = {{paddingTop: superiorHeight, paddingLeft: D.GAMMA_RAY_WIDTH - (3*(D.GAMMA_RAY_WIDTH+40)/4 + 16)}}>\n\t\t\t\t\t\t{p.superiorLabels}\n\t\t\t\t\t</View>\n\t\t\t\t}\n\t\t\t\t{((!p.takingShot) || (!moreThanForty)) &&\n\t\t\t\t\t<View style = {{height: superiorHeight}}/>\n\t\t\t\t}\n\t\t\t\t{this.plotFunction(xValues, yValues, plotHeight, p.scale[0], minDifference, minYValue, maxYValue)}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla\nconst localStyles = StyleSheet.create({\n\n\tcontainer: {\n\t\tjustifyContent: 'center', \n\t\talignItems:     'flex-start', \n\t\ttransform:      [{ rotate: \"90deg\" }],\n\t\theight:         D.GAMMA_RAY_WIDTH, // Como la vista está rotada, esto en realidad es una anchura\n\t\tpaddingTop:     20,\n\t},\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tgammaRayValues_Extract: state.popUpReducer.gammaRayValues_Extract,\n\t}\n};\n\nexport default connect(mapStateToProps)(GammaRayPlot);\n"]},"metadata":{},"sourceType":"module"}