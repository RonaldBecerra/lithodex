{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\node_modules\\\\react-native-color-picker\\\\dist\\\\TriangleColorPicker.js\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React from \"react\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport tinycolor from \"tinycolor2\";\nimport { createPanResponder, rotatePoint } from \"./utils\";\n\nfunction makeRotationKey(props, angle) {\n  var rotationHackFactor = props.rotationHackFactor;\n\n  if (rotationHackFactor < 1) {\n    return undefined;\n  }\n\n  var key = Math.floor(angle * rotationHackFactor);\n  return \"r\" + key;\n}\n\nvar TriangleColorPicker = function (_super) {\n  __extends(TriangleColorPicker, _super);\n\n  function TriangleColorPicker(props, ctx) {\n    var _this = _super.call(this, props, ctx) || this;\n\n    _this._handleColorChange = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      if (_this._changingHColor) {\n        _this._handleHColorChange({\n          x: x,\n          y: y\n        });\n      } else {\n        _this._handleSVColorChange({\n          x: x,\n          y: y\n        });\n      }\n\n      return true;\n    };\n\n    var state = {\n      color: {\n        h: 0,\n        s: 1,\n        v: 1\n      },\n      pickerSize: null\n    };\n\n    if (props.oldColor) {\n      state.color = tinycolor(props.oldColor).toHsv();\n    }\n\n    if (props.defaultColor) {\n      state.color = tinycolor(props.defaultColor).toHsv();\n    }\n\n    _this.state = state;\n    _this._layout = {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0\n    };\n    _this._pageX = 0;\n    _this._pageY = 0;\n    _this._onLayout = _this._onLayout.bind(_this);\n    _this._onSValueChange = _this._onSValueChange.bind(_this);\n    _this._onVValueChange = _this._onVValueChange.bind(_this);\n    _this._onColorSelected = _this._onColorSelected.bind(_this);\n    _this._onOldColorSelected = _this._onOldColorSelected.bind(_this);\n    _this._isRTL = I18nManager.isRTL;\n    _this._pickerResponder = createPanResponder({\n      onStart: function onStart(_a) {\n        var x = _a.x,\n            y = _a.y;\n\n        var _b = _this._computeColorFromTriangle({\n          x: x,\n          y: y\n        }),\n            s = _b.s,\n            v = _b.v;\n\n        _this._changingHColor = s > 1 || s < 0 || v > 1 || v < 0;\n\n        _this._handleColorChange({\n          x: x,\n          y: y\n        });\n\n        return true;\n      },\n      onMove: _this._handleColorChange\n    });\n    return _this;\n  }\n\n  TriangleColorPicker.prototype._getColor = function () {\n    var passedColor = typeof this.props.color === \"string\" ? tinycolor(this.props.color).toHsv() : this.props.color;\n    return passedColor || this.state.color;\n  };\n\n  TriangleColorPicker.prototype._onColorSelected = function () {\n    var onColorSelected = this.props.onColorSelected;\n    var color = tinycolor(this._getColor()).toHexString();\n    onColorSelected && onColorSelected(color);\n  };\n\n  TriangleColorPicker.prototype._onOldColorSelected = function () {\n    var _a = this.props,\n        oldColor = _a.oldColor,\n        onOldColorSelected = _a.onOldColorSelected;\n    var color = tinycolor(oldColor);\n    this.setState({\n      color: color.toHsv()\n    });\n    onOldColorSelected && onOldColorSelected(color.toHexString());\n  };\n\n  TriangleColorPicker.prototype._onSValueChange = function (s) {\n    var _a = this._getColor(),\n        h = _a.h,\n        v = _a.v;\n\n    this._onColorChange({\n      h: h,\n      s: s,\n      v: v\n    });\n  };\n\n  TriangleColorPicker.prototype._onVValueChange = function (v) {\n    var _a = this._getColor(),\n        h = _a.h,\n        s = _a.s;\n\n    this._onColorChange({\n      h: h,\n      s: s,\n      v: v\n    });\n  };\n\n  TriangleColorPicker.prototype._onColorChange = function (color) {\n    this.setState({\n      color: color\n    });\n\n    if (this.props.onColorChange) {\n      this.props.onColorChange(color);\n    }\n  };\n\n  TriangleColorPicker.prototype._onLayout = function (l) {\n    var _this = this;\n\n    this._layout = l.nativeEvent.layout;\n    var _a = this._layout,\n        width = _a.width,\n        height = _a.height;\n    var pickerSize = Math.min(width, height);\n\n    if (this.state.pickerSize !== pickerSize) {\n      this.setState({\n        pickerSize: pickerSize\n      });\n    }\n\n    InteractionManager.runAfterInteractions(function () {\n      _this.refs.pickerContainer && _this.refs.pickerContainer.measure(function (x, y, width, height, pageX, pageY) {\n        _this._pageX = pageX;\n        _this._pageY = pageY;\n      });\n    });\n  };\n\n  TriangleColorPicker.prototype._computeHValue = function (x, y) {\n    var mx = this.state.pickerSize / 2;\n    var my = this.state.pickerSize / 2;\n    var dx = x - mx;\n    var dy = y - my;\n    var rad = Math.atan2(dx, dy) + Math.PI + Math.PI / 2;\n    return rad * 180 / Math.PI % 360;\n  };\n\n  TriangleColorPicker.prototype._hValueToRad = function (deg) {\n    var rad = deg * Math.PI / 180;\n    return rad - Math.PI - Math.PI / 2;\n  };\n\n  TriangleColorPicker.prototype.getColor = function () {\n    return tinycolor(this._getColor()).toHexString();\n  };\n\n  TriangleColorPicker.prototype._handleHColorChange = function (_a) {\n    var x = _a.x,\n        y = _a.y;\n\n    var _b = this._getColor(),\n        s = _b.s,\n        v = _b.v;\n\n    var marginLeft = (this._layout.width - this.state.pickerSize) / 2;\n    var marginTop = (this._layout.height - this.state.pickerSize) / 2;\n    var relativeX = x - this._pageX - marginLeft;\n    var relativeY = y - this._pageY - marginTop;\n\n    var h = this._computeHValue(relativeX, relativeY);\n\n    this._onColorChange({\n      h: h,\n      s: s,\n      v: v\n    });\n  };\n\n  TriangleColorPicker.prototype._handleSVColorChange = function (_a) {\n    var x = _a.x,\n        y = _a.y;\n\n    var _b = this._computeColorFromTriangle({\n      x: x,\n      y: y\n    }),\n        h = _b.h,\n        rawS = _b.s,\n        rawV = _b.v;\n\n    var s = Math.min(Math.max(0, rawS), 1);\n    var v = Math.min(Math.max(0, rawV), 1);\n\n    this._onColorChange({\n      h: h,\n      s: s,\n      v: v\n    });\n  };\n\n  TriangleColorPicker.prototype._normalizeTriangleTouch = function (s, v, sRatio) {\n    var CORNER_ZONE_SIZE = 0.12;\n    var NORMAL_MARGIN = 0.1;\n    var CORNER_MARGIN = 0.05;\n    var margin = NORMAL_MARGIN;\n    var posNS = v > 0 ? 1 - (1 - s) * sRatio : 1 - s * sRatio;\n    var negNS = v > 0 ? s * sRatio : (1 - s) * sRatio;\n    var ns = s > 1 ? posNS : negNS;\n    var rightCorner = s > 1 - CORNER_ZONE_SIZE && v > 1 - CORNER_ZONE_SIZE;\n    var leftCorner = ns < 0 + CORNER_ZONE_SIZE && v > 1 - CORNER_ZONE_SIZE;\n    var topCorner = ns < 0 + CORNER_ZONE_SIZE && v < 0 + CORNER_ZONE_SIZE;\n\n    if (rightCorner) {\n      return {\n        s: s,\n        v: v\n      };\n    }\n\n    if (leftCorner || topCorner) {\n      margin = CORNER_MARGIN;\n    }\n\n    s = s < 0 && ns > 0 - margin ? 0 : s;\n    s = s > 1 && ns < 1 + margin ? 1 : s;\n    v = v < 0 && v > 0 - margin ? 0 : v;\n    v = v > 1 && v < 1 + margin ? 1 : v;\n    return {\n      s: s,\n      v: v\n    };\n  };\n\n  TriangleColorPicker.prototype._computeColorFromTriangle = function (_a) {\n    var x = _a.x,\n        y = _a.y;\n    var pickerSize = this.state.pickerSize;\n\n    var _b = getPickerProperties(pickerSize),\n        triangleHeight = _b.triangleHeight,\n        triangleWidth = _b.triangleWidth;\n\n    var left = pickerSize / 2 - triangleWidth / 2;\n    var top = pickerSize / 2 - 2 * triangleHeight / 3;\n    var marginLeft = (this._layout.width - this.state.pickerSize) / 2;\n    var marginTop = (this._layout.height - this.state.pickerSize) / 2;\n    var relativeX = x - this._pageX - marginLeft - left;\n    var relativeY = y - this._pageY - marginTop - top;\n\n    var h = this._getColor().h;\n\n    var deg = (h - 330 + 360) % 360;\n    var rad = deg * Math.PI / 180;\n    var center = {\n      x: triangleWidth / 2,\n      y: 2 * triangleHeight / 3\n    };\n    var rotated = rotatePoint({\n      x: relativeX,\n      y: relativeY\n    }, rad, center);\n    var line = triangleWidth * rotated.y / triangleHeight;\n    var margin = triangleWidth / 2 - triangleWidth / 2 * rotated.y / triangleHeight;\n    var s = (rotated.x - margin) / line;\n    var v = rotated.y / triangleHeight;\n\n    var normalized = this._normalizeTriangleTouch(s, v, line / triangleHeight);\n\n    return {\n      h: h,\n      s: normalized.s,\n      v: normalized.v\n    };\n  };\n\n  TriangleColorPicker.prototype.render = function () {\n    var pickerSize = this.state.pickerSize;\n    var _a = this.props,\n        oldColor = _a.oldColor,\n        style = _a.style;\n\n    var color = this._getColor();\n\n    var h = color.h;\n\n    var angle = this._hValueToRad(h);\n\n    var selectedColor = tinycolor(color).toHexString();\n    var indicatorColor = tinycolor({\n      h: h,\n      s: 1,\n      v: 1\n    }).toHexString();\n    var computed = makeComputedStyles({\n      pickerSize: pickerSize,\n      selectedColorHsv: color,\n      indicatorColor: indicatorColor,\n      angle: angle,\n      isRTL: this._isRTL\n    });\n    var rotationHack = makeRotationKey(this.props, angle);\n    return React.createElement(View, {\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      }\n    }, React.createElement(View, {\n      onLayout: this._onLayout,\n      ref: \"pickerContainer\",\n      style: styles.pickerContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      }\n    }, !pickerSize ? null : React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      }\n    }, React.createElement(View, {\n      key: rotationHack,\n      style: [styles.triangleContainer, computed.triangleContainer],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      }\n    }, React.createElement(View, {\n      style: [styles.triangleUnderlayingColor, computed.triangleUnderlayingColor],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      }\n    }), React.createElement(Image, {\n      style: [computed.triangleImage],\n      source: require(\"../resources/hsv_triangle_mask.png\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      }\n    })), React.createElement(View, _extends({}, this._pickerResponder.panHandlers, {\n      style: [computed.picker],\n      collapsable: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      }\n    }), React.createElement(Image, {\n      source: require(\"../resources/color-circle.png\"),\n      resizeMode: \"contain\",\n      style: [styles.pickerImage],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      }\n    }), React.createElement(View, {\n      key: rotationHack,\n      style: [styles.pickerIndicator, computed.pickerIndicator],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      }\n    }, React.createElement(View, {\n      style: [styles.pickerIndicatorTick, computed.pickerIndicatorTick],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      }\n    })), React.createElement(View, {\n      style: [styles.svIndicator, computed.svIndicator],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      }\n    })))), this.props.hideControls == true ? null : React.createElement(View, {\n      style: [styles.colorPreviews, computed.colorPreviews],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      }\n    }, oldColor && React.createElement(TouchableOpacity, {\n      style: [styles.colorPreview, {\n        backgroundColor: oldColor\n      }],\n      onPress: this._onOldColorSelected,\n      activeOpacity: 0.7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      }\n    }), React.createElement(TouchableOpacity, {\n      style: [styles.colorPreview, {\n        backgroundColor: selectedColor\n      }],\n      onPress: this._onColorSelected,\n      activeOpacity: 0.7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      }\n    })));\n  };\n\n  TriangleColorPicker.defaultProps = {\n    rotationHackFactor: 100\n  };\n  return TriangleColorPicker;\n}(React.PureComponent);\n\nexport { TriangleColorPicker };\n\nfunction getPickerProperties(pickerSize) {\n  var indicatorPickerRatio = 42 / 510;\n  var originalIndicatorSize = indicatorPickerRatio * pickerSize;\n  var indicatorSize = originalIndicatorSize;\n  var pickerPadding = originalIndicatorSize / 3;\n  var triangleSize = pickerSize - 6 * pickerPadding;\n  var triangleRadius = triangleSize / 2;\n  var triangleHeight = triangleRadius * 3 / 2;\n  var triangleWidth = 2 * triangleRadius * Math.sqrt(3 / 4);\n  return {\n    triangleSize: triangleSize,\n    triangleRadius: triangleRadius,\n    triangleHeight: triangleHeight,\n    triangleWidth: triangleWidth,\n    indicatorPickerRatio: indicatorPickerRatio,\n    indicatorSize: indicatorSize,\n    pickerPadding: pickerPadding\n  };\n}\n\nvar makeComputedStyles = function makeComputedStyles(_a) {\n  var _b, _c;\n\n  var indicatorColor = _a.indicatorColor,\n      angle = _a.angle,\n      pickerSize = _a.pickerSize,\n      selectedColorHsv = _a.selectedColorHsv,\n      isRTL = _a.isRTL;\n\n  var _d = getPickerProperties(pickerSize),\n      triangleSize = _d.triangleSize,\n      triangleHeight = _d.triangleHeight,\n      triangleWidth = _d.triangleWidth,\n      indicatorSize = _d.indicatorSize,\n      pickerPadding = _d.pickerPadding;\n\n  var indicatorRadius = pickerSize / 2 - indicatorSize / 2 - pickerPadding;\n  var mx = pickerSize / 2;\n  var my = pickerSize / 2;\n  var dx = Math.cos(angle) * indicatorRadius;\n  var dy = Math.sin(angle) * indicatorRadius;\n  var triangleTop = pickerPadding * 3;\n  var triangleLeft = pickerPadding * 3;\n  var triangleAngle = -angle + Math.PI / 3;\n  var markerColor = \"rgba(0,0,0,0.8)\";\n  var s = selectedColorHsv.s,\n      v = selectedColorHsv.v,\n      h = selectedColorHsv.h;\n  var svIndicatorSize = 18;\n  var svY = v * triangleHeight;\n  var margin = triangleWidth / 2 - v * (triangleWidth / 2);\n  var svX = s * (triangleWidth - 2 * margin) + margin;\n  var svIndicatorMarginLeft = (pickerSize - triangleWidth) / 2;\n  var svIndicatorMarginTop = (pickerSize - 4 * triangleHeight / 3) / 2;\n  var deg = (h - 330 + 360) % 360;\n  var rad = deg * Math.PI / 180;\n  var center = {\n    x: pickerSize / 2,\n    y: pickerSize / 2\n  };\n  var notRotatedPoint = {\n    x: svIndicatorMarginTop + svY,\n    y: svIndicatorMarginLeft + svX\n  };\n  var svIndicatorPoint = rotatePoint(notRotatedPoint, rad, center);\n  return {\n    picker: {\n      padding: pickerPadding,\n      width: pickerSize,\n      height: pickerSize\n    },\n    pickerIndicator: (_b = {\n      top: mx + dx - indicatorSize / 2\n    }, _b[isRTL ? \"right\" : \"left\"] = my + dy - indicatorSize / 2, _b.width = indicatorSize, _b.height = indicatorSize, _b.transform = [{\n      rotate: -angle + \"rad\"\n    }], _b),\n    pickerIndicatorTick: {\n      height: indicatorSize / 2,\n      backgroundColor: markerColor\n    },\n    svIndicator: (_c = {\n      top: svIndicatorPoint.x - svIndicatorSize / 2\n    }, _c[isRTL ? \"right\" : \"left\"] = svIndicatorPoint.y - svIndicatorSize / 2, _c.width = svIndicatorSize, _c.height = svIndicatorSize, _c.borderRadius = svIndicatorSize / 2, _c.borderColor = markerColor, _c),\n    triangleContainer: {\n      width: triangleSize,\n      height: triangleSize,\n      transform: [{\n        rotate: triangleAngle + \"rad\"\n      }],\n      top: triangleTop,\n      left: triangleLeft\n    },\n    triangleImage: {\n      width: triangleWidth,\n      height: triangleHeight\n    },\n    triangleUnderlayingColor: {\n      left: (triangleSize - triangleWidth) / 2,\n      borderLeftWidth: triangleWidth / 2,\n      borderRightWidth: triangleWidth / 2,\n      borderBottomWidth: triangleHeight,\n      borderBottomColor: indicatorColor\n    },\n    colorPreviews: {\n      height: pickerSize * 0.1\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  pickerContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  pickerImage: {\n    flex: 1,\n    width: null,\n    height: null\n  },\n  pickerIndicator: {\n    position: \"absolute\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  triangleContainer: {\n    position: \"absolute\",\n    alignItems: \"center\"\n  },\n  triangleUnderlayingColor: {\n    position: \"absolute\",\n    top: 0,\n    width: 0,\n    height: 0,\n    backgroundColor: \"transparent\",\n    borderStyle: \"solid\",\n    borderLeftColor: \"transparent\",\n    borderRightColor: \"transparent\"\n  },\n  pickerAlignment: {\n    alignItems: \"center\"\n  },\n  svIndicator: {\n    position: \"absolute\",\n    borderWidth: 4\n  },\n  pickerIndicatorTick: {\n    width: 5\n  },\n  colorPreviews: {\n    flexDirection: \"row\"\n  },\n  colorPreview: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["../src/TriangleColorPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {\n  I18nManager,\n  Image,\n  InteractionManager,\n  PanResponderInstance,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n} from \"react-native\"\nimport tinycolor from \"tinycolor2\"\n\nimport { HsvColor, IPickerProps, Point2D } from \"./typeHelpers\"\nimport { createPanResponder, rotatePoint } from \"./utils\"\n\nfunction makeRotationKey(props: ITrianglePickerProps, angle: number) {\n  const { rotationHackFactor } = props\n\n  if (rotationHackFactor < 1) {\n    return undefined\n  }\n\n  const key = Math.floor(angle * rotationHackFactor)\n\n  return `r${key}`\n}\n\nexport interface ITrianglePickerProps extends IPickerProps {\n  rotationHackFactor?: number;\n  hideControls?: boolean;\n}\n\nexport type ITrianglePickerState = {\n  color: HsvColor;\n  pickerSize: number;\n};\n\nexport class TriangleColorPicker extends React.PureComponent<\n  ITrianglePickerProps,\n  ITrianglePickerState\n> {\n  private _layout: { width: number; height: number; x: number; y: number };\n  private _pageX: number;\n  private _pageY: number;\n  private _isRTL: boolean;\n  private _pickerResponder: PanResponderInstance;\n  private _changingHColor: boolean;\n\n  public static defaultProps: ITrianglePickerProps = {\n    rotationHackFactor: 100,\n  };\n\n  constructor(props: ITrianglePickerProps, ctx: any) {\n    super(props, ctx)\n\n    const state = {\n      color: { h: 0, s: 1, v: 1 },\n      pickerSize: null,\n    }\n\n    if (props.oldColor) {\n      state.color = tinycolor(props.oldColor).toHsv()\n    }\n\n    if (props.defaultColor) {\n      state.color = tinycolor(props.defaultColor).toHsv()\n    }\n\n    this.state = state\n    this._layout = { width: 0, height: 0, x: 0, y: 0 }\n    this._pageX = 0\n    this._pageY = 0\n    this._onLayout = this._onLayout.bind(this)\n    this._onSValueChange = this._onSValueChange.bind(this)\n    this._onVValueChange = this._onVValueChange.bind(this)\n    this._onColorSelected = this._onColorSelected.bind(this)\n    this._onOldColorSelected = this._onOldColorSelected.bind(this)\n    this._isRTL = I18nManager.isRTL\n\n    this._pickerResponder = createPanResponder({\n      onStart: ({ x, y }) => {\n        const { s, v } = this._computeColorFromTriangle({ x, y })\n        this._changingHColor = s > 1 || s < 0 || v > 1 || v < 0\n        this._handleColorChange({ x, y })\n\n        return true\n      },\n      onMove: this._handleColorChange,\n    })\n  }\n\n  _getColor() {\n    const passedColor =\n      typeof this.props.color === \"string\"\n        ? tinycolor(this.props.color).toHsv()\n        : this.props.color\n    return passedColor || this.state.color\n  }\n\n  _onColorSelected() {\n    const { onColorSelected } = this.props\n    const color = tinycolor(this._getColor()).toHexString()\n    onColorSelected && onColorSelected(color)\n  }\n\n  _onOldColorSelected() {\n    const { oldColor, onOldColorSelected } = this.props\n    const color = tinycolor(oldColor)\n    this.setState({ color: color.toHsv() })\n    onOldColorSelected && onOldColorSelected(color.toHexString())\n  }\n\n  _onSValueChange(s) {\n    const { h, v } = this._getColor()\n    this._onColorChange({ h, s, v })\n  }\n\n  _onVValueChange(v) {\n    const { h, s } = this._getColor()\n    this._onColorChange({ h, s, v })\n  }\n\n  _onColorChange(color) {\n    this.setState({ color })\n    if (this.props.onColorChange) {\n      this.props.onColorChange(color)\n    }\n  }\n\n  _onLayout(l) {\n    this._layout = l.nativeEvent.layout\n    const { width, height } = this._layout\n    const pickerSize = Math.min(width, height)\n    if (this.state.pickerSize !== pickerSize) {\n      this.setState({ pickerSize })\n    }\n    // layout.x, layout.y is always 0\n    // we always measure because layout is the same even though picker is moved on the page\n    InteractionManager.runAfterInteractions(() => {\n      // measure only after (possible) animation ended\n      this.refs.pickerContainer &&\n        (this.refs.pickerContainer as any).measure(\n          (x, y, width, height, pageX, pageY) => {\n            // picker position in the screen\n            this._pageX = pageX\n            this._pageY = pageY\n          }\n        )\n    })\n  }\n\n  _computeHValue(x: number, y: number) {\n    const mx = this.state.pickerSize / 2\n    const my = this.state.pickerSize / 2\n    const dx = x - mx\n    const dy = y - my\n    const rad = Math.atan2(dx, dy) + Math.PI + Math.PI / 2\n    return ((rad * 180) / Math.PI) % 360\n  }\n\n  _hValueToRad(deg: number) {\n    const rad = (deg * Math.PI) / 180\n    return rad - Math.PI - Math.PI / 2\n  }\n\n  getColor() {\n    return tinycolor(this._getColor()).toHexString()\n  }\n\n  _handleColorChange = ({ x, y }: Point2D) => {\n    if (this._changingHColor) {\n      this._handleHColorChange({ x, y })\n    } else {\n      this._handleSVColorChange({ x, y })\n    }\n\n    return true\n  };\n\n  _handleHColorChange({ x, y }: Point2D) {\n    const { s, v } = this._getColor()\n    const marginLeft = (this._layout.width - this.state.pickerSize) / 2\n    const marginTop = (this._layout.height - this.state.pickerSize) / 2\n    const relativeX = x - this._pageX - marginLeft\n    const relativeY = y - this._pageY - marginTop\n    const h = this._computeHValue(relativeX, relativeY)\n    this._onColorChange({ h, s, v })\n  }\n\n  _handleSVColorChange({ x, y }) {\n    const { h, s: rawS, v: rawV } = this._computeColorFromTriangle({ x, y })\n    const s = Math.min(Math.max(0, rawS), 1)\n    const v = Math.min(Math.max(0, rawV), 1)\n    this._onColorChange({ h, s, v })\n  }\n\n  _normalizeTriangleTouch(s, v, sRatio) {\n    const CORNER_ZONE_SIZE = 0.12 // relative size to be considered as corner zone\n    const NORMAL_MARGIN = 0.1 // relative triangle margin to be considered as touch in triangle\n    const CORNER_MARGIN = 0.05 // relative triangle margin to be considered as touch in triangle in corner zone\n    let margin = NORMAL_MARGIN\n\n    const posNS = v > 0 ? 1 - (1 - s) * sRatio : 1 - s * sRatio\n    const negNS = v > 0 ? s * sRatio : (1 - s) * sRatio\n    const ns = s > 1 ? posNS : negNS // normalized s value according to ratio and s value\n\n    const rightCorner = s > 1 - CORNER_ZONE_SIZE && v > 1 - CORNER_ZONE_SIZE\n    const leftCorner = ns < 0 + CORNER_ZONE_SIZE && v > 1 - CORNER_ZONE_SIZE\n    const topCorner = ns < 0 + CORNER_ZONE_SIZE && v < 0 + CORNER_ZONE_SIZE\n    if (rightCorner) {\n      return { s, v }\n    }\n    if (leftCorner || topCorner) {\n      margin = CORNER_MARGIN\n    }\n    // color normalization according to margin\n    s = s < 0 && ns > 0 - margin ? 0 : s\n    s = s > 1 && ns < 1 + margin ? 1 : s\n    v = v < 0 && v > 0 - margin ? 0 : v\n    v = v > 1 && v < 1 + margin ? 1 : v\n    return { s, v }\n  }\n\n  /**\n   * Computes s, v from position (x, y). If position is outside of triangle,\n   * it will return invalid values (greater than 1 or lower than 0)\n   */\n  _computeColorFromTriangle({ x, y }) {\n    const { pickerSize } = this.state\n    const { triangleHeight, triangleWidth } = getPickerProperties(pickerSize)\n\n    const left = pickerSize / 2 - triangleWidth / 2\n    const top = pickerSize / 2 - (2 * triangleHeight) / 3\n\n    // triangle relative coordinates\n    const marginLeft = (this._layout.width - this.state.pickerSize) / 2\n    const marginTop = (this._layout.height - this.state.pickerSize) / 2\n    const relativeX = x - this._pageX - marginLeft - left\n    const relativeY = y - this._pageY - marginTop - top\n\n    // rotation\n    const { h } = this._getColor()\n    const deg = (h - 330 + 360) % 360 // starting angle is 330 due to comfortable calculation\n    const rad = (deg * Math.PI) / 180\n    const center = {\n      x: triangleWidth / 2,\n      y: (2 * triangleHeight) / 3,\n    }\n    const rotated = rotatePoint({ x: relativeX, y: relativeY }, rad, center)\n\n    const line = (triangleWidth * rotated.y) / triangleHeight\n    const margin =\n      triangleWidth / 2 - ((triangleWidth / 2) * rotated.y) / triangleHeight\n    const s = (rotated.x - margin) / line\n    const v = rotated.y / triangleHeight\n\n    // normalize\n    const normalized = this._normalizeTriangleTouch(\n      s,\n      v,\n      line / triangleHeight\n    )\n\n    return { h, s: normalized.s, v: normalized.v }\n  }\n\n  render() {\n    const { pickerSize } = this.state\n    const { oldColor, style } = this.props\n    const color = this._getColor()\n    const { h } = color\n    const angle = this._hValueToRad(h)\n    const selectedColor = tinycolor(color).toHexString()\n    const indicatorColor = tinycolor({ h, s: 1, v: 1 }).toHexString()\n    const computed = makeComputedStyles({\n      pickerSize,\n      selectedColorHsv: color,\n      indicatorColor,\n      angle,\n      isRTL: this._isRTL,\n    })\n    // Hack for https://github.com/instea/react-native-color-picker/issues/17\n    const rotationHack = makeRotationKey(this.props, angle)\n    return (\n      <View style={style}>\n        <View\n          onLayout={this._onLayout}\n          ref=\"pickerContainer\"\n          style={styles.pickerContainer}\n        >\n          {!pickerSize ? null : (\n            <View>\n              <View\n                key={rotationHack}\n                style={[styles.triangleContainer, computed.triangleContainer]}\n              >\n                <View\n                  style={[\n                    styles.triangleUnderlayingColor,\n                    computed.triangleUnderlayingColor,\n                  ]}\n                />\n                <Image\n                  style={[computed.triangleImage]}\n                  source={require(\"../resources/hsv_triangle_mask.png\")}\n                />\n              </View>\n              <View\n                {...this._pickerResponder.panHandlers}\n                style={[computed.picker]}\n                collapsable={false}\n              >\n                <Image\n                  source={require(\"../resources/color-circle.png\")}\n                  resizeMode=\"contain\"\n                  style={[styles.pickerImage]}\n                />\n                <View\n                  key={rotationHack}\n                  style={[styles.pickerIndicator, computed.pickerIndicator]}\n                >\n                  <View\n                    style={[\n                      styles.pickerIndicatorTick,\n                      computed.pickerIndicatorTick,\n                    ]}\n                  />\n                </View>\n                <View style={[styles.svIndicator, computed.svIndicator]} />\n              </View>\n            </View>\n          )}\n        </View>\n        {this.props.hideControls == true ? null : (\n          <View style={[styles.colorPreviews, computed.colorPreviews]}>\n            {oldColor && (\n              <TouchableOpacity\n                style={[styles.colorPreview, { backgroundColor: oldColor }]}\n                onPress={this._onOldColorSelected}\n                activeOpacity={0.7}\n              />\n            )}\n            <TouchableOpacity\n              style={[styles.colorPreview, { backgroundColor: selectedColor }]}\n              onPress={this._onColorSelected}\n              activeOpacity={0.7}\n            />\n          </View>\n        )}\n      </View>\n    )\n  }\n}\n\nfunction getPickerProperties(pickerSize) {\n  const indicatorPickerRatio = 42 / 510 // computed from picker image\n  const originalIndicatorSize = indicatorPickerRatio * pickerSize\n  const indicatorSize = originalIndicatorSize\n  const pickerPadding = originalIndicatorSize / 3\n\n  const triangleSize = pickerSize - 6 * pickerPadding\n  const triangleRadius = triangleSize / 2\n  const triangleHeight = (triangleRadius * 3) / 2\n  const triangleWidth = 2 * triangleRadius * Math.sqrt(3 / 4) // pythagorean theorem\n\n  return {\n    triangleSize,\n    triangleRadius,\n    triangleHeight,\n    triangleWidth,\n    indicatorPickerRatio,\n    indicatorSize,\n    pickerPadding,\n  }\n}\n\nconst makeComputedStyles = ({\n  indicatorColor,\n  angle,\n  pickerSize,\n  selectedColorHsv,\n  isRTL,\n}) => {\n  const {\n    triangleSize,\n    triangleHeight,\n    triangleWidth,\n    indicatorSize,\n    pickerPadding,\n  } = getPickerProperties(pickerSize)\n\n  /* ===== INDICATOR ===== */\n  const indicatorRadius = pickerSize / 2 - indicatorSize / 2 - pickerPadding\n  const mx = pickerSize / 2\n  const my = pickerSize / 2\n  const dx = Math.cos(angle) * indicatorRadius\n  const dy = Math.sin(angle) * indicatorRadius\n\n  /* ===== TRIANGLE ===== */\n  const triangleTop = pickerPadding * 3\n  const triangleLeft = pickerPadding * 3\n  const triangleAngle = -angle + Math.PI / 3\n\n  /* ===== SV INDICATOR ===== */\n  const markerColor = \"rgba(0,0,0,0.8)\"\n  const { s, v, h } = selectedColorHsv\n  const svIndicatorSize = 18\n  const svY = v * triangleHeight\n  const margin = triangleWidth / 2 - v * (triangleWidth / 2)\n  const svX = s * (triangleWidth - 2 * margin) + margin\n  const svIndicatorMarginLeft = (pickerSize - triangleWidth) / 2\n  const svIndicatorMarginTop = (pickerSize - (4 * triangleHeight) / 3) / 2\n\n  const deg = (h - 330 + 360) % 360 // starting angle is 330 due to comfortable calculation\n  const rad = (deg * Math.PI) / 180\n  const center = { x: pickerSize / 2, y: pickerSize / 2 }\n  const notRotatedPoint = {\n    x: svIndicatorMarginTop + svY,\n    y: svIndicatorMarginLeft + svX,\n  }\n  const svIndicatorPoint = rotatePoint(notRotatedPoint, rad, center)\n\n  return {\n    picker: {\n      padding: pickerPadding,\n      width: pickerSize,\n      height: pickerSize,\n    },\n    pickerIndicator: {\n      top: mx + dx - indicatorSize / 2,\n      [isRTL ? \"right\" : \"left\"]: my + dy - indicatorSize / 2,\n      width: indicatorSize,\n      height: indicatorSize,\n      transform: [\n        {\n          rotate: -angle + \"rad\",\n        },\n      ],\n    },\n    pickerIndicatorTick: {\n      height: indicatorSize / 2,\n      backgroundColor: markerColor,\n    },\n    svIndicator: {\n      top: svIndicatorPoint.x - svIndicatorSize / 2,\n      [isRTL ? \"right\" : \"left\"]: svIndicatorPoint.y - svIndicatorSize / 2,\n      width: svIndicatorSize,\n      height: svIndicatorSize,\n      borderRadius: svIndicatorSize / 2,\n      borderColor: markerColor,\n    },\n    triangleContainer: {\n      width: triangleSize,\n      height: triangleSize,\n      transform: [\n        {\n          rotate: triangleAngle + \"rad\",\n        },\n      ],\n      top: triangleTop,\n      left: triangleLeft,\n    },\n    triangleImage: {\n      width: triangleWidth,\n      height: triangleHeight,\n    },\n    triangleUnderlayingColor: {\n      left: (triangleSize - triangleWidth) / 2,\n      borderLeftWidth: triangleWidth / 2,\n      borderRightWidth: triangleWidth / 2,\n      borderBottomWidth: triangleHeight,\n      borderBottomColor: indicatorColor,\n    },\n    colorPreviews: {\n      height: pickerSize * 0.1, // responsive height\n    },\n  }\n}\n\nconst styles = StyleSheet.create({\n  pickerContainer: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  pickerImage: {\n    flex: 1,\n    width: null,\n    height: null,\n  },\n  pickerIndicator: {\n    position: \"absolute\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  triangleContainer: {\n    position: \"absolute\",\n    alignItems: \"center\",\n  },\n  triangleUnderlayingColor: {\n    position: \"absolute\",\n    top: 0,\n    width: 0,\n    height: 0,\n    backgroundColor: \"transparent\",\n    borderStyle: \"solid\",\n    borderLeftColor: \"transparent\",\n    borderRightColor: \"transparent\",\n  },\n  pickerAlignment: {\n    alignItems: \"center\",\n  },\n  svIndicator: {\n    position: \"absolute\",\n    borderWidth: 4,\n  },\n  pickerIndicatorTick: {\n    width: 5,\n  },\n  colorPreviews: {\n    flexDirection: \"row\",\n  },\n  colorPreview: {\n    flex: 1,\n  },\n})\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}