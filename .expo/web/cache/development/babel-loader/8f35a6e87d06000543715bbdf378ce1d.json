{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport qs from 'qs';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nexport function SendEmailQS(to, subject, body) {\n  var options,\n      cc,\n      bcc,\n      url,\n      query,\n      canOpen,\n      _args = arguments;\n  return _regeneratorRuntime.async(function SendEmailQS$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};\n          cc = options.cc, bcc = options.bcc;\n          url = \"mailto:\" + to;\n          query = qs.stringify({\n            subject: subject,\n            body: body,\n            cc: cc,\n            bcc: bcc\n          });\n\n          if (query.length) {\n            url += \"?\" + query;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Linking.canOpenURL(url));\n\n        case 7:\n          canOpen = _context.sent;\n\n          if (canOpen) {\n            _context.next = 10;\n            break;\n          }\n\n          throw new Error('Provided URL can not be handled');\n\n        case 10:\n          return _context.abrupt(\"return\", Linking.openURL(url));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/genericFunctions/contactUsersFunctions.js"],"names":["qs","SendEmailQS","to","subject","body","options","cc","bcc","url","query","stringify","length","Linking","canOpenURL","canOpen","Error","openURL"],"mappings":";AAAA,OAAOA,EAAP,MAAe,IAAf;;AAWA,OAAO,SAAeC,WAAf,CAA2BC,EAA3B,EAA+BC,OAA/B,EAAwCC,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8CC,UAAAA,OAA9C,2DAAwD,EAAxD;AACKC,UAAAA,EADL,GACiBD,OADjB,CACKC,EADL,EACSC,GADT,GACiBF,OADjB,CACSE,GADT;AAGCC,UAAAA,GAHD,eAGiBN,EAHjB;AAMGO,UAAAA,KANH,GAMWT,EAAE,CAACU,SAAH,CAAa;AACvBP,YAAAA,OAAO,EAAEA,OADc;AAEvBC,YAAAA,IAAI,EAAEA,IAFiB;AAGvBE,YAAAA,EAAE,EAAEA,EAHmB;AAIvBC,YAAAA,GAAG,EAAEA;AAJkB,WAAb,CANX;;AAaH,cAAIE,KAAK,CAACE,MAAV,EAAkB;AACdH,YAAAA,GAAG,UAAQC,KAAX;AACH;;AAfE;AAAA,2CAkBmBG,OAAO,CAACC,UAAR,CAAmBL,GAAnB,CAlBnB;;AAAA;AAkBGM,UAAAA,OAlBH;;AAAA,cAoBEA,OApBF;AAAA;AAAA;AAAA;;AAAA,gBAqBO,IAAIC,KAAJ,CAAU,iCAAV,CArBP;;AAAA;AAAA,2CAwBIH,OAAO,CAACI,OAAR,CAAgBR,GAAhB,CAxBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import qs from 'qs';\r\nimport { Linking } from 'react-native'; // Podemos usar react-native Linking para enviar un correo electrónico\r\n\r\n/* Forma fácil de enviar correos usando \"qs\" y \"Linking\". No se utilizó porque se activa automáticamente\r\n\r\n\r\n   Nota: Dicen en Internet que este método no permite adjuntar archivos, pero haciendo pruebas se verificó que al menos\r\n   en Android sí se logra. Ello porque esta función nos lleva a una nueva interfaz (ajena a la aplicación) en la\r\n   que hay un botón para adjuntar archivo. Lo que sí es cierto es que no podemos adjuntarlo directamente desde\r\n   aquí, pasándolo como parámetro \r\n*/\r\nexport async function SendEmailQS(to, subject, body, options = {}) {\r\n    const { cc, bcc } = options;\r\n\r\n    let url = `mailto:${to}`;\r\n\r\n    // Create email link query\r\n    const query = qs.stringify({\r\n        subject: subject,\r\n        body: body,\r\n        cc: cc,\r\n        bcc: bcc\r\n    });\r\n\r\n    if (query.length) {\r\n        url += `?${query}`;\r\n    }\r\n\r\n    // check if we can use this link\r\n    const canOpen = await Linking.canOpenURL(url);\r\n\r\n    if (!canOpen) {\r\n        throw new Error('Provided URL can not be handled');\r\n    }\r\n\r\n    return Linking.openURL(url);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}