{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\components\\\\FossilPicker.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Avatar, ListItem, Button as ButtonWithIcon, SearchBar } from 'react-native-elements';\nimport { connect } from 'react-redux';\nimport { changeStratumComponentPermission } from \"../redux/actions/popUpActions\";\nimport { FossilPicker_Texts } from \"../languages/components/FossilPicker\";\nimport { FOSSILS_NAMES } from \"../constants/fossils\";\nimport * as Log from \"../genericFunctions/logFunctions\";\nimport * as Database from \"../genericFunctions/databaseFunctions\";\nimport { genericStyles, DARK_GRAY_COLOR, WHITE_COLOR } from \"../constants/genericStyles\";\nimport * as D from \"../constants/Dimensions\";\nimport * as auxiliarFunctions from \"../genericFunctions/otherFunctions\";\n\nvar FossilPicker = function (_React$Component) {\n  _inherits(FossilPicker, _React$Component);\n\n  function FossilPicker(props) {\n    var _this;\n\n    _classCallCheck(this, FossilPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FossilPicker).call(this, props));\n\n    _this.showModal_1 = function () {\n      var p = _this.props;\n\n      if (_this.props.enteringEnabled) {\n        p.dispatchEnteringPermission(false);\n\n        _this.setState({\n          modal_1_visible: true\n        });\n\n        if (p.data.selectedFossils != null) {\n          Log.log_action(21, p.user_id, p.isCore, p.Object_id, p.stratum_key);\n        } else {\n          Log.log_action(20, p.user_id, p.isCore, p.Object_id, p.stratum_key);\n        }\n      }\n    };\n\n    _this.hideModal_1 = function () {\n      _this.props.dispatchEnteringPermission(true);\n\n      _this.setState({\n        modal_1_visible: false\n      });\n    };\n\n    _this.showModal_2 = function (item) {\n      _this.setState({\n        fossilToDelete: item,\n        modal_2_visible: true\n      });\n    };\n\n    _this.hideModal_2 = function () {\n      _this.setState({\n        modal_2_visible: false\n      });\n    };\n\n    _this.showModal_3 = function () {\n      _this.setState({\n        modal_3_visible: true,\n        filter_name: null,\n        selectedFossilsProv: _this.state.selectedFossils\n      });\n    };\n\n    _this.hideModal_3 = function () {\n      _this.setState({\n        modal_3_visible: false,\n        filter_name: null,\n        aChangeHasOccurred: false\n      });\n    };\n\n    _this.setFilter = function (text) {\n      _this.setState({\n        filter_name: text\n      });\n    };\n\n    _this.itemSelection = function _callee(item, indexItem) {\n      var selectedFossilsProv;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              selectedFossilsProv = _this.state.selectedFossilsProv;\n\n              if (!(indexItem != -1)) {\n                _context.next = 5;\n                break;\n              }\n\n              selectedFossilsProv.splice(indexItem, 1), _this.setState({\n                aChangeHasOccurred: true\n              });\n              _context.next = 7;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(_this.setState({\n                selectedFossilsProv: [].concat(_toConsumableArray(selectedFossilsProv), [item]),\n                aChangeHasOccurred: true\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.acceptChanges = function _callee2() {\n      var s, p;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              s = _this.state;\n              p = _this.props;\n\n              if (!s.aChangeHasOccurred) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(_this.setState({\n                selectedFossils: s.selectedFossilsProv\n              }));\n\n            case 5:\n              _this.create_SelectedFossils_RenderList();\n\n              _this.hideModal_3();\n\n              _this.createMatrixOfImagesToShow();\n\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(_this.saveInDatabase({\n                selectedFossils: s.selectedFossilsProv\n              }));\n\n            case 10:\n              _context2.next = 13;\n              break;\n\n            case 12:\n              _this.hideModal_3();\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      selectedFossils: _this.props.data.selectedFossils != null ? _this.props.data.selectedFossils : [],\n      fossil_imagesToShow: [],\n      numberColumnsToShow: 0,\n      numberRowsToShow: 0,\n      imageDimensions: 0,\n      componentKey: _this.props.stratum_key + '_fossil',\n      modal_1_visible: false,\n      renderList: [],\n      modal_2_visible: false,\n      fossilToDelete: null,\n      modal_3_visible: false,\n      filter_name: null,\n      aChangeHasOccurred: false,\n      selectedFossilsProv: _this.props.data.selectedFossils != null ? _this.props.data.selectedFossils : []\n    };\n    return _this;\n  }\n\n  _createClass(FossilPicker, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.dispatchEnteringPermission(true);\n      this.createMatrixOfImagesToShow();\n      this.create_SelectedFossils_RenderList();\n    }\n  }, {\n    key: \"saveInDatabase\",\n    value: function saveInDatabase(payload) {\n      return _regeneratorRuntime.async(function saveInDatabase$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Database.saveStratumModule(this.props.user_id, this.props.Object_id, this.props.index, this.state.componentKey, payload, this.props.isCore, this.props.localDB));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"createMatrixOfImagesToShow\",\n    value: function createMatrixOfImagesToShow() {\n      var s = this.state;\n      var h = this.props.height;\n\n      if (D.GLOBAL_SIZE_FOSSIL_IMAGE >= h) {\n        var imageDimensions = h - 3;\n        var numberRowsToShow = 1;\n      } else {\n        var imageDimensions = D.GLOBAL_SIZE_FOSSIL_IMAGE;\n        var numberRowsToShow = parseInt(h / D.GLOBAL_SIZE_FOSSIL_IMAGE);\n      }\n\n      var numberColumnsToShow = parseInt(D.FOSSIL_PICKER_WIDTH / imageDimensions);\n      var i = 0;\n      var len = s.selectedFossils.length;\n\n      if (len != 0) {\n        var fossil_imagesToShow = [];\n\n        for (var k = 0; k < numberRowsToShow; k++) {\n          var break_k = false;\n          var newRow = [];\n\n          for (var j = 0; j < numberColumnsToShow; j++) {\n            newRow.push(s.selectedFossils[i]);\n            i++;\n\n            if (i == len) {\n              break_k = true;\n              break;\n            }\n          }\n\n          fossil_imagesToShow.push(newRow);\n\n          if (break_k) {\n            break;\n          }\n        }\n      } else {\n        fossil_imagesToShow = [[]];\n      }\n\n      this.setState({\n        fossil_imagesToShow: fossil_imagesToShow,\n        imageDimensions: imageDimensions,\n        numberRowsToShow: numberRowsToShow,\n        numberColumnsToShow: numberColumnsToShow\n      });\n    }\n  }, {\n    key: \"external_renderFossilImages\",\n    value: function external_renderFossilImages() {\n      var s = this.state;\n      return React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        }\n      }, s.fossil_imagesToShow.map(function (rowOfImages, i) {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          }\n        }, rowOfImages.map(function (item, k) {\n          return React.createElement(Image, {\n            key: k,\n            source: item.uri,\n            style: {\n              width: s.imageDimensions,\n              height: s.imageDimensions,\n              opacity: 1\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            }\n          });\n        }));\n      }));\n    }\n  }, {\n    key: \"create_SelectedFossils_RenderList\",\n    value: function create_SelectedFossils_RenderList() {\n      var _this2 = this;\n\n      var s = this.state;\n      var p = this.props;\n      this.setState({\n        renderList: s.selectedFossils.map(function (item, index) {\n          return React.createElement(ListItem, {\n            key: index,\n            title: p.allFossilNames.find(function (element) {\n              return element.key === item.key;\n            }).name,\n            bottomDivider: true,\n            onLongPress: function onLongPress() {\n              _this2.showModal_2(item);\n            },\n            leftAvatar: React.createElement(Avatar, {\n              size: \"medium\",\n              source: item.uri,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            }\n          });\n        })\n      });\n    }\n  }, {\n    key: \"deleteFossil\",\n    value: function deleteFossil(fossilToDelete) {\n      var _this3 = this;\n\n      var p = this.props;\n\n      var deleteFossilAux = function deleteFossilAux(p, fossilToDelete) {\n        var s, key_to_delete, list;\n        return _regeneratorRuntime.async(function deleteFossilAux$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                s = _this3.state;\n                key_to_delete = fossilToDelete.key;\n                _context4.next = 4;\n                return _regeneratorRuntime.awrap(_this3.state.selectedFossils.filter(function (item) {\n                  return item.key.toString() !== key_to_delete.toString();\n                }));\n\n              case 4:\n                list = _context4.sent;\n                _context4.next = 7;\n                return _regeneratorRuntime.awrap(_this3.setState({\n                  selectedFossils: list\n                }));\n\n              case 7:\n                _this3.create_SelectedFossils_RenderList();\n\n                _this3.createMatrixOfImagesToShow();\n\n                _this3.hideModal_2();\n\n                _context4.next = 12;\n                return _regeneratorRuntime.awrap(_this3.saveInDatabase({\n                  selectedFossils: list\n                }));\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        });\n      };\n\n      Alert.alert(p.allMessages[12], p.allMessages[13], [{\n        text: p.allMessages[14],\n        onPress: function onPress() {\n          return deleteFossilAux(p, fossilToDelete);\n        }\n      }, {\n        text: p.allMessages[15]\n      }]);\n    }\n  }, {\n    key: \"touchableFossilToPick\",\n    value: function touchableFossilToPick(item, indexItem, i) {\n      var _this4 = this;\n\n      var isChecked = indexItem != -1;\n      return React.createElement(View, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        }\n      }, React.createElement(ListItem, {\n        title: item.name,\n        leftAvatar: React.createElement(Avatar, {\n          size: \"medium\",\n          source: item.uri,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          }\n        }),\n        checkBox: {\n          checked: isChecked,\n          onPress: function onPress() {\n            return _this4.itemSelection({\n              key: item.key,\n              uri: item.uri\n            }, indexItem);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        }\n      }));\n    }\n  }, {\n    key: \"renderFossilsToSelect\",\n    value: function renderFossilsToSelect(filter_name) {\n      var _this5 = this;\n\n      var p = this.props;\n\n      if (filter_name == null) {\n        return p.sortedFossils.map(function (item, i) {\n          return _this5.touchableFossilToPick(item, _this5.state.selectedFossilsProv.findIndex(function (element) {\n            return element.key === item.key;\n          }), i);\n        });\n      }\n\n      return p.sortedFossils.filter(function (item) {\n        return auxiliarFunctions.stringIncludesSubstring_NoStrict(item.name, filter_name);\n      }).map(function (item, i) {\n        return _this5.touchableFossilToPick(item, _this5.state.selectedFossilsProv.findIndex(function (element) {\n          return element.key === item.key;\n        }), i);\n      });\n    }\n  }, {\n    key: \"dontAcceptChanges\",\n    value: function dontAcceptChanges() {\n      var s = this.state;\n      var p = this.props;\n\n      if (s.aChangeHasOccurred) {\n        Alert.alert(p.allMessages[12], p.allMessages[0]);\n      }\n\n      ;\n      this.setState({\n        selectedFossilsProv: s.selectedFossils\n      });\n      this.hideModal_3();\n    }\n  }, {\n    key: \"Modal_1_View\",\n    value: function Modal_1_View() {\n      var _this6 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        }\n      }, React.createElement(Modal, {\n        animationType: \"fade\",\n        transparent: true,\n        visible: s.modal_1_visible,\n        onRequestClose: function onRequestClose() {\n          return _this6.hideModal_1();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        }\n      }, React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        }\n      }, React.createElement(View, {\n        style: genericStyles.modalHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        }\n      }, React.createElement(Text, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 17,\n          fontWeight: 'bold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        }\n      }, p.allMessages[1], \": \", p.stratumName)), React.createElement(View, {\n        style: {\n          flex: 0.9,\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        }\n      }, s.renderList)), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingRight: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[4],\n        color: DARK_GRAY_COLOR,\n        onPress: this.hideModal_1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingLeft: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[2],\n        icon: {\n          name: 'playlist-add'\n        },\n        onPress: this.showModal_3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        }\n      }))))));\n    }\n  }, {\n    key: \"Modal_2_View\",\n    value: function Modal_2_View() {\n      var _this7 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        }\n      }, React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: false,\n        visible: s.modal_2_visible,\n        onRequestClose: function onRequestClose() {\n          return _this7.hideModal_2();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n          marginTop: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginTop: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[3],\n        color: \"red\",\n        onPress: function onPress() {\n          return _this7.deleteFossil(s.fossilToDelete);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          marginTop: 70\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        color: DARK_GRAY_COLOR,\n        title: p.allMessages[4],\n        onPress: this.hideModal_2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        }\n      })))));\n    }\n  }, {\n    key: \"Modal_3_View\",\n    value: function Modal_3_View() {\n      var _this8 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        }\n      }, React.createElement(Modal, {\n        animationType: \"fade\",\n        transparent: false,\n        visible: s.modal_3_visible,\n        onRequestClose: function onRequestClose() {\n          return _this8.hideModal_3();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        }\n      }, React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        }\n      }, React.createElement(View, {\n        style: genericStyles.white_background_without_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        }\n      }, React.createElement(SearchBar, {\n        value: s.filter_name,\n        selectTextOnFocus: true,\n        lightTheme: true,\n        textAlign: 'center',\n        inputStyle: {\n          color: 'black',\n          backgroundColor: WHITE_COLOR\n        },\n        placeholder: p.allMessages[7],\n        placeholderTextColor: 'gray',\n        onChangeText: function onChangeText(text) {\n          return _this8.setFilter(text);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466\n        }\n      }), React.createElement(View, {\n        style: localStyles.fossilPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        }\n      }, this.renderFossilsToSelect(s.filter_name)))), React.createElement(View, {\n        style: genericStyles.smallRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: 'blue'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        }\n      }, s.selectedFossilsProv.length, \" \", p.allMessages[8])), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingRight: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        color: DARK_GRAY_COLOR,\n        title: p.allMessages[9],\n        onPress: function onPress() {\n          return _this8.dontAcceptChanges();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingLeft: 25\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504\n        }\n      }, React.createElement(ButtonWithIcon, {\n        raised: true,\n        title: p.allMessages[10],\n        icon: {\n          name: 'check'\n        },\n        onPress: function onPress() {\n          return _this8.acceptChanges();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        }\n      }))))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this9 = this;\n\n      var s = this.state;\n      var p = this.props;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        }\n      }, this.Modal_1_View(), this.Modal_2_View(), this.Modal_3_View(), s.selectedFossils.length == 0 && p.takingShot && React.createElement(View, {\n        style: {\n          width: D.FOSSIL_PICKER_WIDTH,\n          height: p.height,\n          borderWidth: 1,\n          borderColor: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        }\n      }), s.selectedFossils.length == 0 && p.height < 18 && !p.takingShot && React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          _this9.showModal_1();\n        },\n        style: {\n          width: D.FOSSIL_PICKER_WIDTH,\n          height: p.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        }\n      }, React.createElement(View, {\n        style: localStyles.showInstructionsObjectScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        }\n      })), s.selectedFossils.length == 0 && p.height >= 18 && !p.takingShot && React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          _this9.showModal_1();\n        },\n        style: {\n          width: D.FOSSIL_PICKER_WIDTH,\n          height: p.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        }\n      }, React.createElement(View, {\n        style: localStyles.showInstructionsObjectScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        }\n      }, p.allMessages[11]))), s.selectedFossils.length != 0 && React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          _this9.showModal_1();\n        },\n        style: {\n          width: D.FOSSIL_PICKER_WIDTH,\n          height: p.height\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        }\n      }, React.createElement(View, {\n        style: localStyles.showInstructionsObjectScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561\n        }\n      }, this.external_renderFossilImages())));\n    }\n  }]);\n\n  return FossilPicker;\n}(React.Component);\n\nvar localStyles = StyleSheet.create({\n  showInstructionsObjectScreen: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: 'black',\n    borderWidth: 1\n  },\n  fossilPicker: {\n    flex: 8,\n    flexDirection: 'column',\n    padding: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: FossilPicker_Texts[state.appPreferencesReducer.language],\n    user_id: state.userReducer.user_id,\n    localDB: state.userReducer.localDB,\n    sortedFossils: state.libraryReducer.sortedFossils,\n    enteringEnabled: state.popUpReducer.stratumComponentEnabled,\n    allFossilNames: FOSSILS_NAMES[state.appPreferencesReducer.language]\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchEnteringPermission: function dispatchEnteringPermission(bool) {\n      return dispatch(changeStratumComponentPermission(bool));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FossilPicker);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/components/FossilPicker.js"],"names":["React","Avatar","ListItem","Button","ButtonWithIcon","SearchBar","connect","changeStratumComponentPermission","FossilPicker_Texts","FOSSILS_NAMES","Log","Database","genericStyles","DARK_GRAY_COLOR","WHITE_COLOR","D","auxiliarFunctions","FossilPicker","props","showModal_1","p","enteringEnabled","dispatchEnteringPermission","setState","modal_1_visible","data","selectedFossils","log_action","user_id","isCore","Object_id","stratum_key","hideModal_1","showModal_2","item","fossilToDelete","modal_2_visible","hideModal_2","showModal_3","modal_3_visible","filter_name","selectedFossilsProv","state","hideModal_3","aChangeHasOccurred","setFilter","text","itemSelection","indexItem","splice","acceptChanges","s","create_SelectedFossils_RenderList","createMatrixOfImagesToShow","saveInDatabase","fossil_imagesToShow","numberColumnsToShow","numberRowsToShow","imageDimensions","componentKey","renderList","payload","saveStratumModule","index","localDB","h","height","GLOBAL_SIZE_FOSSIL_IMAGE","parseInt","FOSSIL_PICKER_WIDTH","i","len","length","k","break_k","newRow","j","push","justifyContent","alignItems","map","rowOfImages","flexDirection","uri","width","opacity","allFossilNames","find","element","key","name","deleteFossilAux","key_to_delete","filter","toString","list","Alert","alert","allMessages","onPress","isChecked","checked","sortedFossils","touchableFossilToPick","findIndex","stringIncludesSubstring_NoStrict","lightGray_background","modalHeader","fontSize","fontWeight","stratumName","flex","down_buttons","paddingRight","paddingLeft","marginTop","deleteFossil","white_background_without_ScrollView","color","backgroundColor","localStyles","fossilPicker","renderFossilsToSelect","smallRow","textAlign","dontAcceptChanges","Modal_1_View","Modal_2_View","Modal_3_View","takingShot","borderWidth","borderColor","showInstructionsObjectScreen","external_renderFossilImages","Component","StyleSheet","create","padding","mapStateToProps","appPreferencesReducer","language","userReducer","libraryReducer","popUpReducer","stratumComponentEnabled","mapDispatchToProps","dispatch","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, Button as ButtonNoIcon, Image, View, Alert,\n\t\t TouchableHighlight, StyleSheet, Modal, ScrollView,\n\t\t FlatList, TextInput } from 'react-native'\n\nimport { Avatar, ListItem, Button as ButtonWithIcon, SearchBar} from 'react-native-elements'\n\nimport { connect } from 'react-redux'\nimport { changeStratumComponentPermission } from '../redux/actions/popUpActions'\nimport { FossilPicker_Texts } from '../languages/components/FossilPicker'\n\nimport { FOSSILS_NAMES } from '../constants/fossils'\n\nimport * as Log          from '../genericFunctions/logFunctions'\nimport * as Database     from '../genericFunctions/databaseFunctions'\nimport { genericStyles, DARK_GRAY_COLOR, WHITE_COLOR } from '../constants/genericStyles'\nimport * as D            from '../constants/Dimensions'\n\nimport * as auxiliarFunctions from '../genericFunctions/otherFunctions'\n\n\nclass FossilPicker extends React.Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\n\t\t// Hay tres modales y una vista externa, así que clasificaremos las variables según pertenezcan a cada uno\n\t\tthis.state = {\n\n\t\t\t//******* Variables comunes a todas las vistas (modales), o variables de la vista externa (lo que se muestra en el ObjectScreen)\n\n\t\t\t// Aquí se almacenan todos los fósiles que se han seleccionado y que se han almacenado en la base de datos\n\t\t\tselectedFossils:     (this.props.data.selectedFossils != null) ? this.props.data.selectedFossils : [], \n\n\t\t\tfossil_imagesToShow: [], /* Lista de imágenes que se muestran en la ventana externa.\n\t\t\t                            (No siempre se pueden mostrar todos los fósiles que han sido seleccionados)*/\n\t\t\tnumberColumnsToShow: 0,  // Cantidad de imágenes que se mostrarán en el ObjectScreen por cada fila que quepa\n\t\t\tnumberRowsToShow:    0,  // Cantidad de filas de imágenes que es posible mostrar en el ObjectScreen\n\t\t\timageDimensions:     0,  // Dimensiones de cada imagen a mostrar\n\n\t\t\tcomponentKey: this.props.stratum_key + '_fossil', // Para que se sepa qué parte del estrato se va a salvar\n\n\t\t\t/******** Variables del modal 1, que es el más externo, que se abre por defecto cuando el usuario presiona desde la ventana\n\t\t\t   externa para agregar o quitar fósiles */\n\t\t\tmodal_1_visible: false, // Determina si el usuario entró a la vista en donde se despliegan los fósiles que ya ha seleccionado para este estrato\n\t\t\trenderList:      [],   // Lista de fósiles que se muestran en la ventana principal, que son los ya agregados por el usuario\n\n\n\t\t\t/******** Variables del modal 2, que es el que se despliega cuando el usuario presiona sobre un fósil de los que ya había añadido,\n\t\t\t   posiblemente para eliminarlo */\n\t\t\tmodal_2_visible: false, // Determina si hay que mostrar o no este modal\n\t\t\tfossilToDelete:  null,  // Fósil que posiblemente será eliminado\n\t\t\n\n\t\t\t//******* Variables del modal 3, que es el que se despliega cuando el usuario le da al botón de \"Nuevo fósil\"\n\t\t\tmodal_3_visible:    false, // Determina si hay que mostrar o no este modal\n\t\t\tfilter_name:        null,  // Almacenará el nombre que ingrese el usuario para filtrar la búsqueda de fósiles\n\t\t\taChangeHasOccurred: false, // Determina si el usuario seleccionó o deseleccionó algún fósil\n\n\t\t\t// Aquí se almacenan los fósiles que el usuario va marcando, pero esta lista no se guardará en la base de datos hasta que el usuario le dé al botón de aceptar\n\t\t\tselectedFossilsProv: (this.props.data.selectedFossils != null) ? this.props.data.selectedFossils : [], \t\t\n\t\t}\n\t}\n\n\t//******************* Métodos comunes o para la vista externa (lo que se muestra en el ObjectScreen) **********************/\n\tcomponentDidMount(){\n\t\t/* Si no colocáramos esto, si el programador refresca esta página estando dentro de ella en la aplicación, se regresará a la \n\t\t   ventana externa sin haber vuelto a habilitar el permiso de poder ingresar a los componentes. Antes lo habilitábamos una sola vez\n\t\t   en la ventana externa, pero ahora en todos los componentes */\n\t\tthis.props.dispatchEnteringPermission(true);\n\n\t\tthis.createMatrixOfImagesToShow();\n\t\tthis.create_SelectedFossils_RenderList();\n\t}\n\n\t// Procedimiento para salvar los cambios realizados en la base de datos del usuario\n\tasync saveInDatabase(payload){\n\t\tawait Database.saveStratumModule(this.props.user_id, this.props.Object_id, this.props.index, this.state.componentKey, payload, this.props.isCore, this.props.localDB);\n\t}\n\n\t// Aquí creamos la lista de imágenes de fósiles seleccionados que se pueden mostrar en la pantalla del ObjectScreen\n\tcreateMatrixOfImagesToShow(){\n\t\tvar s = this.state;\n\t\tvar h = this.props.height;\n\n\t\tif (D.GLOBAL_SIZE_FOSSIL_IMAGE >= h){\n\t\t\tvar imageDimensions  = h - 3;\n\t\t\tvar numberRowsToShow = 1; \n\t\t} else {\n\t\t\tvar imageDimensions  = D.GLOBAL_SIZE_FOSSIL_IMAGE;\n\t\t\tvar numberRowsToShow = parseInt(h / D.GLOBAL_SIZE_FOSSIL_IMAGE); \n\t\t}\n\t\tvar numberColumnsToShow  = parseInt(D.FOSSIL_PICKER_WIDTH / imageDimensions);\n\n\t\tvar i = 0;\n\t\tvar len = s.selectedFossils.length;\n\n\t\tif (len != 0){\n\t\t\tvar fossil_imagesToShow = [];\n\t\t\tfor (var k = 0; k < numberRowsToShow; k++){\n\t\t\t\tvar break_k = false;\n\t\t\t\tvar newRow  = [];\n\n\t\t\t\tfor (var j = 0; j < numberColumnsToShow; j++){\n\t\t\t\t\tnewRow.push(s.selectedFossils[i]);\n\t\t\t\t\ti ++;\n\n\t\t\t\t\tif (i == len){\n\t\t\t\t\t\tbreak_k = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfossil_imagesToShow.push(newRow);\n\t\t\t\tif (break_k){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\n\t\t} else {\n\t\t\tfossil_imagesToShow = [[]];\n\t\t}\t\n\t\tthis.setState({fossil_imagesToShow, imageDimensions, numberRowsToShow, numberColumnsToShow});\n\t}\n\n\t// Función para mostrar en la ventana externa las imágenes de algunos de los fósiles que ya han sido seleccionados \n\texternal_renderFossilImages(){\n\t\tlet s = this.state;\n\n\t\treturn (\n\t\t\t<View style = {{justifyContent: 'center', alignItems: 'center'}}>\n\t\t\t\t{s.fossil_imagesToShow.map((rowOfImages, i) => (\n\t\t\t\t\t<View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}} key={i}>\n\t\t\t\t\t\t{rowOfImages.map((item, k) => (\n\t\t\t\t\t\t\t<Image \n\t\t\t\t\t\t\t\tkey    = {k}\n\t\t\t\t\t\t\t\tsource = {item.uri} \n\t\t\t\t\t\t\t\tstyle  = {{width: s.imageDimensions, height: s.imageDimensions, opacity: 1}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</View>\n\t\t\t\t))}\t\n\t\t\t</View>\n\t\t)\n\t}\n\n\t//******************* Métodos para el modal 1, que muestra los fósiles ya seleccionados **********************/\n\n\t// Activa el modal \n\tshowModal_1 = () => {\n\t\tlet p = this.props;\n\t\tif (this.props.enteringEnabled){\n\t\t\tp.dispatchEnteringPermission(false);\n\t\t\tthis.setState({modal_1_visible: true});\n\n\t\t\tif (p.data.selectedFossils != null) {\n\t\t\t\tLog.log_action(21, p.user_id, p.isCore, p.Object_id, p.stratum_key);\n\t\t\t}\n\t\t\telse {\t\n\t\t\t\tLog.log_action(20, p.user_id, p.isCore, p.Object_id, p.stratum_key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Oculta el modal\n\thideModal_1 = () => {\n\t\tthis.props.dispatchEnteringPermission(true);\n\t\tthis.setState({modal_1_visible: false});\n\t}\n\n\t// Crea la lista de fósiles ya seleccionados, que muestra la imagen junto al nombre\n\tcreate_SelectedFossils_RenderList(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\t\tthis.setState({\n\t\t\trenderList: s.selectedFossils.map((item, index) => (\n\t\t\t\t<ListItem\t\t\t\t\t\t\t\n\t\t\t\t\tkey         = {index}\n\t\t\t\t\ttitle       = {p.allFossilNames.find(element => element.key === item.key).name}  \n\t\t\t\t\tbottomDivider\n\t\t\t\t\tonLongPress = {() => {this.showModal_2(item)}}\n\t\t\t\t\tleftAvatar  = {<Avatar  size=\"medium\"  source={item.uri}/>}\n\t\t\t\t/>\n\t\t\t))\n\t\t})\n\t}\n\n\t//******************* Métodos para el modal 2, que permite eliminar un fósil seleccionado previamente **********************/\n\n\t// Activa el modal \n\tshowModal_2 = (item) => {\n\t\tthis.setState({fossilToDelete: item, modal_2_visible: true});\n\t}\n\n\t// Oculta el modal\n\thideModal_2 = () => {\n\t\tthis.setState({modal_2_visible: false});\t\n\t}\n\n\t// Aquí eliminamos el fósil tanto de la base de datos como del estado de esta vista\n\tdeleteFossil (fossilToDelete) {\n\t\tlet p = this.props;\t\n\n\t\t// Procedimiento auxiliar que se invoca cuando se confirma que se desea eliminar el fósil\n\t\tlet deleteFossilAux = async(p, fossilToDelete) => {\n\t\t\tlet s = this.state;\n\n\t\t\t// Borrar el fósil de las variables de esta vista, que no están en la base de datos\n\t\t\tconst key_to_delete = fossilToDelete.key;\n\t\t\tconst list = await this.state.selectedFossils.filter(function(item){\n\t\t\t\treturn item.key.toString() !== key_to_delete.toString()\n\t\t\t})\n\t\t\tawait this.setState({selectedFossils: list});\n\n\t\t\t// Tenemos que actualizar las listas de fósiles seleccionados\n\t\t\tthis.create_SelectedFossils_RenderList(); // Lista completa de fósiles seleccionados\n\t\t\tthis.createMatrixOfImagesToShow(); // Matriz parcial, con sólo las imágenes que se pueden mostrar en la vista externa\n\n\t\t\tthis.hideModal_2();\n\t\t\tawait this.saveInDatabase({selectedFossils: list}); // Salvamos la lista de fósiles actualizada en la base de datos\n\t\t}\n\n\t\t// Alerta: \"¿Seguro de que desea eliminar el fósil?\"\n\t\tAlert.alert(p.allMessages[12], p.allMessages[13],\n\t\t\t[\n\t\t\t\t// Mensaje: \"Sí\"\n\t\t\t\t{text: p.allMessages[14], onPress: () => deleteFossilAux(p, fossilToDelete)},\n\t\t\t\t// Mensaje: \"No\"\n\t\t\t\t{text: p.allMessages[15]},\n\t\t\t] \n\t\t)\n\t}\n\n\t//******************* Métodos para el modal 3, que permite agregar o quitar fósiles **********************/\n\n\t// Activa el modal \n\tshowModal_3 = () => {\n\t\tthis.setState({\n\t\t\tmodal_3_visible: true, \n\t\t\tfilter_name:     null,\n\t\t\tselectedFossilsProv: this.state.selectedFossils,\t\t\n\t\t})\n\t}\n\n\t// Oculta el modal \n\thideModal_3 = () => {\n\t\tthis.setState({\n\t\t\tmodal_3_visible:     false,\n\t\t\tfilter_name:         null,\t\n\t\t\taChangeHasOccurred:  false\n\t\t})\n\t}\n\n\t// Una vez que se cambia el texto en el que se filtran los fósiles, se invoca este procedimiento\n\tsetFilter = (text) => {\n\t\tthis.setState({filter_name: text})\n\t}\n\n\t// Usado cuando el usuario presiona sobre un TouchableHighlight para seleccionar un fósil\n\titemSelection = async(item, indexItem) => {\n\t\tconst { selectedFossilsProv } = this.state;\n\n\t\t// Esto asegura que varios ckeckboxes no se vean afectados cuando se presiona uno\n\t\tif (indexItem != -1) {\n\t\t\tselectedFossilsProv.splice(indexItem, 1),\n\t\t\tthis.setState({ \n\t\t\t\taChangeHasOccurred:  true,\n\t\t\t});\n\n\t\t} else {\n\t\t\tawait this.setState({ \n\t\t\t\tselectedFossilsProv: [...selectedFossilsProv, item], \n\t\t\t\taChangeHasOccurred:  true, \n\t\t\t});\n\t\t}\n\t};\n\n\t// Cada botón que representa un fósil a seleccionar\n\ttouchableFossilToPick(item, indexItem, i) {\n\t\tlet isChecked = (indexItem != -1);\n\t\treturn (\n\t\t\t<View key = {i}>\n\t\t\t\t<ListItem\n\t\t\t\t\ttitle      = {item.name}\n\t\t\t\t\tleftAvatar = {<Avatar  size=\"medium\"  source={item.uri}/>}\n\t\t\t\t\tcheckBox = {{\n\t\t\t\t\t\tchecked: isChecked,\n\t\t\t\t\t\tonPress: () => this.itemSelection({key: item.key, uri: item.uri}, indexItem),\t\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t/// Función para mostrar los fósiles como botones en la lista de fósiles a seleccionar\n\trenderFossilsToSelect (filter_name) {\n\t\tlet p = this.props;\n\n\t\t// Caso en que el usuario no ha puesto ningún nombre para filtrar\n\t\tif (filter_name == null) {\n\t\t\treturn p.sortedFossils.map((item, i) => (\n\t\t\t\tthis.touchableFossilToPick(item, this.state.selectedFossilsProv.findIndex(element => element.key === item.key), i)\n\t\t\t))\n\t\t}\n\t\t// Caso en que el usuario ya ha ingresado un nombre para comenzar a filtrar\n\t\treturn (\n\t\t\tp.sortedFossils.filter(item => auxiliarFunctions.stringIncludesSubstring_NoStrict(item.name,filter_name))\n\t\t\t\t.map((item, i) => (\n\t\t\t\t\tthis.touchableFossilToPick(item, this.state.selectedFossilsProv.findIndex(element => element.key === item.key), i)\n\t\t\t\t))\n\t\t)\n\t}\n\n\t// Usado cuando el usuario presiona el botón \"Cancelar\" para no guardar los cambios\n\tdontAcceptChanges(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tif (s.aChangeHasOccurred){\n\t\t\t// Alerta: \"No se salvaron los cambios\"\n\t\t\tAlert.alert(p.allMessages[12], p.allMessages[0]);\n\t\t};\n\t\tthis.setState({selectedFossilsProv: s.selectedFossils})\n\t\tthis.hideModal_3();\n\t}\n\n\t// Usado cuando el usuario presiona el botón \"Aceptar\" para añadir el fósil que había seleccionado\n\tacceptChanges = async() =>{\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\tif (s.aChangeHasOccurred){\n\t\t\tawait this.setState({selectedFossils: s.selectedFossilsProv});\n\n\t\t\t// Tenemos que actualizar las listas de fósiles seleccionados\n\t\t\tthis.create_SelectedFossils_RenderList(); // Lista completa\n\t\t\tthis.hideModal_3();\t\n\t\t\tthis.createMatrixOfImagesToShow(); // Matriz parcial, con sólo las imágenes que se pueden mostrar en la vista externa\n\n\t\t\tawait this.saveInDatabase({selectedFossils: s.selectedFossilsProv}); // Salvamos la lista de fósiles actualizada en la base de datos\n\t\t}\n\t\telse {\n\t\t\tthis.hideModal_3();\n\t\t}\n\t}\n\n\t// ************************************** Distintas vistas para el usuario **********************************************\n\n\t// Esto es lo que se muestra cuando el usuario entra en la ventana para agregar o eliminar fósiles desde la vista externa (ObjectScreen)\n\tModal_1_View(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Modal\n\t\t\t\t\tanimationType  = \"fade\"\n\t\t\t\t\ttransparent    = {true}\n\t\t\t\t\tvisible        = {s.modal_1_visible}\n\t\t\t\t\tonRequestClose = {() => this.hideModal_1()}\n\t\t\t\t>\n\n\t\t\t\t\t<View style = {genericStyles.lightGray_background}>\n\n\t\t\t\t\t\t{/*Cabecera de la pantalla que dice el nombre del estrato que se está modificando*/}\n\t\t\t\t\t\t<View style = {genericStyles.modalHeader}>\n\t\t\t\t\t\t\t{/* Mensaje: \"Fósiles del estrato\"*/}\n\t\t\t\t\t\t\t<Text style = {{justifyContent: 'center', alignItems: 'center', fontSize: 17, fontWeight: 'bold'}}>\n\t\t\t\t\t\t\t\t{p.allMessages[1]}: {p.stratumName}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{/*Lista desplegada de fósiles que se han añadido*/}\n\t\t\t\t\t\t<View style = {{ flex: 0.9, flexDirection: 'row'}}>\n\t\t\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t\t\t{s.renderList}\n\t\t\t\t\t\t\t</ScrollView>      \t\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{/*//Vista de los botones \"Volver\" y \"Añadir o quitar\"*/}\n\t\t\t\t\t\t<View style = {genericStyles.down_buttons}>\n\n\t\t\t\t\t\t\t<View style = {{paddingRight: 25}}>\n\t\t\t\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[4]} // Mensaje: \"Volver\"\n\t\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\t\tonPress = {this.hideModal_1}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t<View style = {{paddingLeft: 25}}>\n\t\t\t\t\t\t\t\t<ButtonWithIcon\n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[2]} /// Mensaje: \"Añadir o quitar\"\n\t\t\t\t\t\t\t\t\ticon    = {{name: 'playlist-add'}}\n\t\t\t\t\t\t\t\t\tonPress = {this.showModal_3}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t</View>\n\t\t\t\t</Modal>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t/// Esto es lo que se muestra cuando el usuario presiona sobre uno de los fósiles que ya había seleccionado, con la itención de eliminarlo posiblemente\n\tModal_2_View(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Modal\n\t\t\t\t\tanimationType  = \"slide\"\n\t\t\t\t\ttransparent    = {false}\n\t\t\t\t\tvisible        = {s.modal_2_visible}\n\t\t\t\t\tonRequestClose = {() => this.hideModal_2()}\n\t\t\t\t>\n\n\t\t\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center', flexDirection: 'column', marginTop: 70}}>\n\n\t\t\t\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center', marginTop: 70}}>\n\t\t\t\t\t\t\t<ButtonNoIcon // Botón para eliminar el fósil\n\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\ttitle   = {p.allMessages[3]} // Mensaje: \"Eliminar fósil\" \n\t\t\t\t\t\t\t\tcolor   = 'red'\n\t\t\t\t\t\t\t\tonPress = {() => this.deleteFossil(s.fossilToDelete)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center', marginTop: 70}}>\n\t\t\t\t\t\t\t<ButtonNoIcon  /// Botón para regresar a la lista de fósiles, es decir, cerrar el \"modal\"\n\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\ttitle   = {p.allMessages[4]} // Mensaje: \"Volver\"\n\t\t\t\t\t\t\t\tonPress = {this.hideModal_2}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\n\t\t\t\t</Modal>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Lo que se muestra cuando el usuario le da al botón de \"Nuevo fósil\"\n\tModal_3_View(){\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Modal\n\t\t\t\t\tanimationType  = \"fade\"\n\t\t\t\t\ttransparent    = {false}\n\t\t\t\t\tvisible        = {s.modal_3_visible}\n\t\t\t\t\tonRequestClose = {() => this.hideModal_3()}\n\t\t\t\t>\n\t\t\t\t\t<View style = {genericStyles.lightGray_background}>\n\n\t\t\t\t\t\t{/*Primer sector que incluye el filtro de búsqueda y la lista desplegada de fósiles*/}\n\t\t\t\t\t\t<View style = {genericStyles.white_background_without_ScrollView}>\n\n\t\t\t\t\t\t\t{/*Aquí el usuario puede filtrar la búsqueda del fósil*/}\n\t\t\t\t\t\t\t<SearchBar\n\t\t\t\t\t\t\t\tvalue                  = {s.filter_name}\n\t\t\t\t\t\t\t\tselectTextOnFocus      = {true}\n\t\t\t\t\t\t\t\tlightTheme             = {true}\n\t\t\t\t\t\t\t\ttextAlign              = {'center'} \n\t\t\t\t\t\t\t\tinputStyle             = {{color: 'black', backgroundColor: WHITE_COLOR}}\n\t\t\t\t\t\t\t\tplaceholder            = {p.allMessages[7]} // Mensaje: \"Buscar...\"\n\t\t\t\t\t\t\t\tplaceholderTextColor   = {'gray'}\n\t\t\t\t\t\t\t\tonChangeText           = {text => this.setFilter(text)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{/*En esta parte deben mostrarse los fósiles*/}\n\t\t\t\t\t\t\t<View style = {localStyles.fossilPicker}>\n\t\t\t\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t\t\t\t{this.renderFossilsToSelect(s.filter_name)}\n\t\t\t\t\t\t\t\t</ScrollView>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t{/*//Parte en la que se muestra la cantidad de fósiles seleccionados*/}\n\t\t\t\t\t\t<View style = {genericStyles.smallRow}>\n\t\t\t\t\t\t\t<Text style = {{textAlign: 'center', justifyContent: 'center', alignItems: 'center', color: 'blue'}}>\n\t\t\t\t\t\t\t\t{s.selectedFossilsProv.length} {p.allMessages[8]}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t<View style = {genericStyles.down_buttons}>\n\n\t\t\t\t\t\t\t<View style = {{paddingRight: 25}}>\n\t\t\t\t\t\t\t\t<ButtonNoIcon\n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[9]} /// Mensaje: \"Cancelar\"\n\t\t\t\t\t\t\t\t\tonPress = {() => this.dontAcceptChanges()}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t\t<View style = {{paddingLeft: 25}}>\n\t\t\t\t\t\t\t\t<ButtonWithIcon\n\t\t\t\t\t\t\t\t\traised\n\t\t\t\t\t\t\t\t\ttitle   = {p.allMessages[10]} // Mensaje: \"Aceptar\"\n\t\t\t\t\t\t\t\t\ticon    = {{name: 'check'}}\n\t\t\t\t\t\t\t\t\tonPress = {() => this.acceptChanges()}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</View>\n\n\t\t\t\t\t\t</View>\n\n\t\t\t\t\t</View>\n\t\t\t\t</Modal>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t// Ventana principal \n\trender() {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\treturn (\n\t\t\t<View>\n\n\t\t\t\t{/*Modales*/}\n\t\t\t\t{this.Modal_1_View()} \n\t\t\t\t{this.Modal_2_View()}\n\t\t\t\t{this.Modal_3_View()}\n\n\t\t\t\t{/*Esto es la parte que ve el usuario cuando está en la ventana externa*/}\n\n\t\t\t\t{ // Caso en que no se ha seleccionado ningún fósil y se está haciendo una captura del afloramiento\n\t\t\t\t(s.selectedFossils.length == 0) && p.takingShot &&\n\t\t\t\t\t<View style = {{width: D.FOSSIL_PICKER_WIDTH, height: p.height, borderWidth: 1, borderColor: 'black'}}/>\n\t\t\t\t}\n\n\t\t\t\t{ // Caso en que no se ha seleccionado ningún fósil, la altura es menor que 18 y no se está haciendo una captura del afloramiento\n\t\t\t\t(s.selectedFossils.length == 0) && (p.height < 18) && (!p.takingShot) &&\n\t\t\t\t\t<TouchableHighlight onPress={()=>{this.showModal_1()}}  style={{width: D.FOSSIL_PICKER_WIDTH, height: p.height}}>\n\t\t\t\t\t\t<View style = {localStyles.showInstructionsObjectScreen}/>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t}\n\n\t\t\t\t{ /// Caso en que no se ha seleccionado ningún fósil, la altura es mayor o igual que 18 y no se está haciendo una captura del afloramiento\n\t\t\t\t(s.selectedFossils.length == 0) && (p.height >= 18) && (!p.takingShot) &&\n\t\t\t\t\t<TouchableHighlight onPress={()=>{this.showModal_1()}}  style={{width: D.FOSSIL_PICKER_WIDTH, height: p.height}}>\n\t\t\t\t\t\t<View style = {localStyles.showInstructionsObjectScreen}>\n\t\t\t\t\t\t\t{/*Mensaje: \"(Toque para agregar fósiles)\"*/}\n\t\t\t\t\t\t\t<Text>{p.allMessages[11]}</Text>\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t}\n\n\t\t\t\t{ /// Caso en que ya ha sido seleccionado algún fósil\n\t\t\t\t(s.selectedFossils.length != 0) && \n\t\t\t\t\t<TouchableHighlight onPress={()=>{this.showModal_1()}}  style={{width: D.FOSSIL_PICKER_WIDTH, height: p.height}}>\n\t\t\t\t\t\t<View style = {localStyles.showInstructionsObjectScreen}>\n\t\t\t\t\t\t\t{this.external_renderFossilImages()}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t}\n\t\t\t</View>\n\t\t);\n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla\nconst localStyles = StyleSheet.create({\n\n\t// Empleado para mostrar en la ventana \"ObjectScreen\" el texto que indica que se debe tocar allí para cambiar el fósil, o bien los fósiles seleccionados\n\tshowInstructionsObjectScreen: {\n\t\tflex:           1,\n\t\tflexDirection:  'column',\n\t\tjustifyContent: 'center',\n\t\talignItems:     'center',\n\t\tborderColor:    'black',\n\t\tborderWidth:    1,\n\t},\n\n\t// Formato para mostrar la lista completa de fósiles a seleccionar\n\tfossilPicker: {\n\t\tflex:           8,\n\t\tflexDirection:  'column',\n\t\tpadding:        10\n\t},\n\n});\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages:     FossilPicker_Texts[state.appPreferencesReducer.language], \n\t\tuser_id:         state.userReducer.user_id,\n\t\tlocalDB:         state.userReducer.localDB,\n\t\tsortedFossils:   state.libraryReducer.sortedFossils,\n\t\tenteringEnabled: state.popUpReducer.stratumComponentEnabled,\n\n\t\t// Aquí almacenamos los nombres de los fósiles que se le mostrarán al usuario\n\t\tallFossilNames:  FOSSILS_NAMES[state.appPreferencesReducer.language],\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchEnteringPermission: (bool) => dispatch(changeStratumComponentPermission(bool)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FossilPicker);"]},"metadata":{},"sourceType":"module"}