{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHANGE_LOAD_VIEW, CHANGE_GAMMA_RAY_EXTRACT, CHANGE_STRATUM_COMPONENT_PERMISSION, CHANGE_STACK_SCREENPROPS_FUNCTION } from \"../reduxTypes\";\nvar initialState = {\n  loadView: false,\n  gammaRayValues_Extract: {},\n  stratumComponentEnabled: true,\n  stackScreenPropsFunction: {\n    ref: function ref() {}\n  }\n};\n\nvar popUpReducer = function popUpReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CHANGE_LOAD_VIEW:\n      return _objectSpread({}, state, {\n        loadView: action.payload\n      });\n\n    case CHANGE_GAMMA_RAY_EXTRACT:\n      return _objectSpread({}, state, {\n        gammaRayValues_Extract: action.payload\n      });\n\n    case CHANGE_STRATUM_COMPONENT_PERMISSION:\n      return _objectSpread({}, state, {\n        stratumComponentEnabled: action.payload\n      });\n\n    case CHANGE_STACK_SCREENPROPS_FUNCTION:\n      var newState = _objectSpread({}, state);\n\n      newState.stackScreenPropsFunction.ref = action.payload;\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport default popUpReducer;","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/redux/reducers/popUpReducer.js"],"names":["CHANGE_LOAD_VIEW","CHANGE_GAMMA_RAY_EXTRACT","CHANGE_STRATUM_COMPONENT_PERMISSION","CHANGE_STACK_SCREENPROPS_FUNCTION","initialState","loadView","gammaRayValues_Extract","stratumComponentEnabled","stackScreenPropsFunction","ref","popUpReducer","state","action","type","payload","newState"],"mappings":";;;;;;AAGA,SAASA,gBAAT,EAA2BC,wBAA3B,EACGC,mCADH,EACwCC,iCADxC;AAGA,IAAMC,YAAY,GAAG;AACpBC,EAAAA,QAAQ,EAAE,KADU;AAEpBC,EAAAA,sBAAsB,EAAE,EAFJ;AAGpBC,EAAAA,uBAAuB,EAAE,IAHL;AAOpBC,EAAAA,wBAAwB,EAAE;AAACC,IAAAA,GAAG,EAAE,eAAM,CAAE;AAAd;AAPN,CAArB;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AACtD,UAAQA,MAAM,CAACC,IAAf;AAGC,SAAKb,gBAAL;AACC,+BACIW,KADJ;AAECN,QAAAA,QAAQ,EAAEO,MAAM,CAACE;AAFlB;;AAMD,SAAKb,wBAAL;AACC,+BACIU,KADJ;AAECL,QAAAA,sBAAsB,EAAEM,MAAM,CAACE;AAFhC;;AAMD,SAAKZ,mCAAL;AACC,+BACIS,KADJ;AAECJ,QAAAA,uBAAuB,EAAEK,MAAM,CAACE;AAFjC;;AAMD,SAAKX,iCAAL;AACC,UAAMY,QAAQ,qBAAOJ,KAAP,CAAd;;AACAI,MAAAA,QAAQ,CAACP,wBAAT,CAAkCC,GAAlC,GAAwCG,MAAM,CAACE,OAA/C;AACA,aAAOC,QAAP;;AAGD;AACC,aAAOJ,KAAP;AA/BF;AAiCA,CAlCD;;AAoCA,eAAeD,YAAf","sourcesContent":["/* Aquí están los reductores que mantendrán control sobre el flujo de las vistas de la aplicación,\r\n   como determinar si una vista debe recargar datos desde la base de datos o no */\r\n\r\nimport { CHANGE_LOAD_VIEW, CHANGE_GAMMA_RAY_EXTRACT, \r\n\t\t CHANGE_STRATUM_COMPONENT_PERMISSION, CHANGE_STACK_SCREENPROPS_FUNCTION} from '../reduxTypes'\r\n\r\nconst initialState = {\r\n\tloadView: false,\r\n\tgammaRayValues_Extract: {},\r\n\tstratumComponentEnabled: true,\r\n\r\n\t// Las funciones que guardemos las colocaremos dentro de la propiedad \"ref\" de un objeto, porque si hacemos que esta variable almacene directamente la referencia\r\n\t// de la función, Redux lo interpreta como que constantemente se esta actualizando el estado, y eso no lo deseamos.\r\n\tstackScreenPropsFunction: {ref: () => {}}, \r\n};\r\n\r\nconst popUpReducer = (state = initialState, action) => {\r\n\tswitch (action.type){\r\n\r\n\t\t// Caso en que debe cambiarse el booleano que indica si una vista debe volver a cargar datos o no\r\n\t\tcase CHANGE_LOAD_VIEW:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tloadView: action.payload,\r\n\t\t\t}\r\n\r\n\t\t// Caso en que debe cambiarse el extracto de valores de la gráfica de gamma-ray que se está mostrando en un momento dado\r\n\t\tcase CHANGE_GAMMA_RAY_EXTRACT:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tgammaRayValues_Extract: action.payload,\r\n\t\t\t}\r\n\r\n\t\t// Caso en que debe cambiarse la variable booleana que permite o impide el acceso a un componente de un estrato (Litología, Estructura sedimentaria, ...)\r\n\t\tcase CHANGE_STRATUM_COMPONENT_PERMISSION:\r\n\t\t\treturn {\r\n\t\t\t\t...state, // Mantenemos igual el resto de la información del estado\r\n\t\t\t\tstratumComponentEnabled: action.payload,\r\n\t\t\t}\r\n\r\n\t\t// Caso en que debe cambiarse la función que está almacenada en el \r\n\t\tcase CHANGE_STACK_SCREENPROPS_FUNCTION:\r\n\t\t\tconst newState = {...state}; // Mantenemos igual el resto de la información del estado\r\n\t\t\tnewState.stackScreenPropsFunction.ref = action.payload;\r\n\t\t\treturn newState;\r\n\r\n\t\t// Caso por defecto, que se utiliza si el tipo de la acción no coincide con ninguno de los establecidos aquí\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default popUpReducer;"]},"metadata":{},"sourceType":"module"}