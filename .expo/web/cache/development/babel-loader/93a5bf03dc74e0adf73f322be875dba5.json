{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\contactUsers\\\\ListOfUsersRequesting.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Avatar, ListItem, SearchBar } from \"react-native-elements\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { NavigationEvents } from 'react-navigation';\nimport { connect } from 'react-redux';\nimport { changeLoadView, changeStackScreenPropsFunction } from \"../../redux/actions/popUpActions\";\nimport { ListOfUsersRequesting_Texts } from \"../../languages/screens/contactUsers/ListOfUsersRequesting\";\nimport * as Log from \"../../genericFunctions/logFunctions\";\nimport * as Database from \"../../genericFunctions/databaseFunctions\";\nimport { genericStyles, WHITE_COLOR } from \"../../constants/genericStyles\";\nimport * as auxiliarFunctions from \"../../genericFunctions/otherFunctions\";\nimport { DEFAULT_USER_ICON } from \"../../constants/genericImages\";\nimport PouchDB from 'pouchdb-react-native';\n\nvar ListOfUsersRequesting = function (_Component) {\n  _inherits(ListOfUsersRequesting, _Component);\n\n  function ListOfUsersRequesting(props) {\n    var _this;\n\n    _classCallCheck(this, ListOfUsersRequesting);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListOfUsersRequesting).call(this, props));\n\n    _this.loadUsersRequesting = function _callee2() {\n      var usersRequestingList, db;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              usersRequestingList = [];\n              db = new PouchDB('lithodex');\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(db.get('default').then(function _callee(database) {\n                var usersRequesting_ids, usersRequestingList, keysList, user;\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        usersRequesting_ids = database.users[_this.props.user_id].friendRequests.received;\n                        usersRequestingList = [];\n                        keysList = Object.keys(usersRequesting_ids);\n\n                        for (i = 0; i < keysList.length; i++) {\n                          user = database.users[keysList[i]];\n                          usersRequestingList.push({\n                            _id: user._id,\n                            userName: user.userName,\n                            profileImage: user.information.profileImage\n                          });\n                        }\n\n                        usersRequestingList = usersRequestingList.sort(function (a, b) {\n                          return a.userName.toLowerCase() > b.userName.toLowerCase() ? 1 : -1;\n                        });\n\n                        _this.setState({\n                          usersRequestingList: usersRequestingList,\n                          loading: false\n                        });\n\n                      case 6:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                });\n              }).catch(function (error) {\n                console.error(error.toString());\n\n                _this.setState({\n                  loading: false\n                });\n              }));\n\n            case 4:\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(_this.props.dispatchChangeLoadView(false));\n\n            case 6:\n              _this.props.dispatchStackScreenPropsFunction(_this.props.navigation.openDrawer);\n\n              _this.setState({\n                loadFunctionOpened: true\n              });\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.goToUserView = function (user_id) {\n      var payload = {\n        _id: user_id\n      };\n\n      _this.props.screenProps.stackNavigation.navigate({\n        key: 'UserView',\n        routeName: 'UserView',\n        params: payload\n      });\n    };\n\n    _this.setFilter = function (text) {\n      _this.setState({\n        filter_name: text\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      loadFunctionOpened: true,\n      filter_name: null,\n      usersRequestingList: null\n    };\n    return _this;\n  }\n\n  _createClass(ListOfUsersRequesting, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.dispatchChangeLoadView(false);\n    }\n  }, {\n    key: \"renderUsersRequesting\",\n    value: function renderUsersRequesting(filter_name) {\n      var _this2 = this;\n\n      var s = this.state;\n      var myList = filter_name == null ? s.usersRequestingList : s.usersRequestingList.filter(function (item) {\n        return auxiliarFunctions.stringIncludesSubstring_NoStrict(item.userName, filter_name);\n      });\n      return React.createElement(FlatList, {\n        ItemSeparatorComponent: Platform.OS !== 'android' && function (_ref) {\n          var highlighted = _ref.highlighted;\n          return React.createElement(View, {\n            style: [style.separator, highlighted && {\n              marginLeft: 0\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            }\n          });\n        },\n        data: myList,\n        keyExtractor: function keyExtractor(item) {\n          return item._id.toString();\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item,\n              index = _ref2.index,\n              separators = _ref2.separators;\n          return React.createElement(TouchableHighlight, {\n            key: item.key,\n            onPress: function onPress() {\n              return _this2.goToUserView(item._id);\n            },\n            onShowUnderlay: separators.highlight,\n            onHideUnderlay: separators.unhighlight,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            }\n          }, React.createElement(ListItem, {\n            title: item.userName,\n            key: index,\n            leftAvatar: React.createElement(Avatar, {\n              size: \"medium\",\n              source: item.profileImage != null ? {\n                uri: item.profileImage\n              } : DEFAULT_USER_ICON,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 120\n              }\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            }\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      });\n    }\n  }, {\n    key: \"activateLoadUsersRequesting\",\n    value: function activateLoadUsersRequesting() {\n      if (this.state.loadFunctionOpened) {\n        this.setState({\n          loadFunctionOpened: false\n        });\n        this.loadUsersRequesting();\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var s = this.state;\n      var p = this.props;\n\n      if (s.loading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'flex-start'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          }\n        }, React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          }\n        }, this.activateLoadUsersRequesting(), React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          }\n        }), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          }\n        }, p.allMessages[1], \"...\")));\n      }\n\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        }\n      }, !p.loadView && React.createElement(NavigationEvents, {\n        onWillFocus: function onWillFocus(payload) {\n          return _this3.loadUsersRequesting();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        }\n      }), p.loadView && this.activateLoadUsersRequesting(), s.usersRequestingList.length != 0 && React.createElement(View, {\n        style: _objectSpread({}, genericStyles.white_background_without_ScrollView, {\n          flex: 1\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        }\n      }, React.createElement(SearchBar, {\n        value: s.filter_name,\n        selectTextOnFocus: true,\n        lightTheme: true,\n        textAlign: 'center',\n        inputStyle: {\n          color: 'black',\n          backgroundColor: WHITE_COLOR\n        },\n        placeholder: p.allMessages[2],\n        placeholderTextColor: 'gray',\n        onChangeText: function onChangeText(text) {\n          return _this3.setFilter(text);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        }\n      }), React.createElement(View, {\n        style: localStyles.userPicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, this.renderUsersRequesting(s.filter_name))), s.usersRequestingList.length == 0 && React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 14\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        }\n      }, p.allMessages[3])));\n    }\n  }]);\n\n  return ListOfUsersRequesting;\n}(Component);\n\nListOfUsersRequesting.navigationOptions = function (_ref3) {\n  var screenProps = _ref3.screenProps;\n  return {\n    title: ListOfUsersRequesting_Texts[screenProps.stackNavigation.getScreenProps().language][0],\n    drawerIcon: function drawerIcon() {\n      return React.createElement(Icon, {\n        name: \"user-plus\",\n        color: \"black\",\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      });\n    }\n  };\n};\n\nvar localStyles = StyleSheet.create({\n  userPicker: {\n    flex: 8,\n    flexDirection: 'column',\n    padding: 10\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: ListOfUsersRequesting_Texts[state.appPreferencesReducer.language],\n    user_id: state.userReducer.user_id,\n    loadView: state.popUpReducer.loadView\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchChangeLoadView: function dispatchChangeLoadView(bool) {\n      return dispatch(changeLoadView(bool));\n    },\n    dispatchStackScreenPropsFunction: function dispatchStackScreenPropsFunction(globalFunction) {\n      return dispatch(changeStackScreenPropsFunction(globalFunction));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfUsersRequesting);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/contactUsers/ListOfUsersRequesting.js"],"names":["React","Component","Avatar","ListItem","SearchBar","Icon","NavigationEvents","connect","changeLoadView","changeStackScreenPropsFunction","ListOfUsersRequesting_Texts","Log","Database","genericStyles","WHITE_COLOR","auxiliarFunctions","DEFAULT_USER_ICON","PouchDB","ListOfUsersRequesting","props","loadUsersRequesting","usersRequestingList","db","get","then","database","usersRequesting_ids","users","user_id","friendRequests","received","keysList","Object","keys","i","length","user","push","_id","userName","profileImage","information","sort","a","b","toLowerCase","setState","loading","catch","error","console","toString","dispatchChangeLoadView","dispatchStackScreenPropsFunction","navigation","openDrawer","loadFunctionOpened","goToUserView","payload","screenProps","stackNavigation","navigate","key","routeName","params","setFilter","text","filter_name","state","s","myList","filter","item","stringIncludesSubstring_NoStrict","Platform","OS","highlighted","style","separator","marginLeft","index","separators","highlight","unhighlight","uri","p","flex","alignItems","justifyContent","flexDirection","activateLoadUsersRequesting","allMessages","lightGray_background","loadView","white_background_without_ScrollView","color","backgroundColor","localStyles","userPicker","renderUsersRequesting","fontSize","navigationOptions","title","getScreenProps","language","drawerIcon","StyleSheet","create","padding","mapStateToProps","appPreferencesReducer","userReducer","popUpReducer","mapDispatchToProps","dispatch","bool","globalFunction"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;AAIA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA2C,uBAA3C;AAEA,OAAOC,IAAP;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,8BAAzB;AACA,SAASC,2BAAT;AAEA,OAAO,KAAKC,GAAZ;AACA,OAAO,KAAKC,QAAZ;AACA,SAASC,aAAT,EAAwBC,WAAxB;AAEA,OAAO,KAAKC,iBAAZ;AACA,SAAQC,iBAAR;AAEA,OAAOC,OAAP,MAAoB,sBAApB;;IAGMC,qB;;;AAEL,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,+FAAMA,KAAN;;AADkB,UAkBnBC,mBAlBmB,GAkBG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,cAAAA,mBADiB,GACK,EADL;AAEfC,cAAAA,EAFe,GAEV,IAAIL,OAAJ,CAAY,UAAZ,CAFU;AAAA;AAAA,+CAIfK,EAAE,CAACC,GAAH,CAAO,SAAP,EACJC,IADI,CACC,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAEDC,wBAAAA,mBAFC,GAEqBD,QAAQ,CAACE,KAAT,CAAe,MAAKR,KAAL,CAAWS,OAA1B,EAAmCC,cAAnC,CAAkDC,QAFvE;AAKDT,wBAAAA,mBALC,GAKqB,EALrB;AAMDU,wBAAAA,QANC,GAMUC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CANV;;AAOL,6BAAKQ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,QAAQ,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AAChCE,0BAAAA,IADgC,GACzBX,QAAQ,CAACE,KAAT,CAAeI,QAAQ,CAACG,CAAD,CAAvB,CADyB;AAEpCb,0BAAAA,mBAAmB,CAACgB,IAApB,CAAyB;AAACC,4BAAAA,GAAG,EAAEF,IAAI,CAACE,GAAX;AAAgBC,4BAAAA,QAAQ,EAAEH,IAAI,CAACG,QAA/B;AAAyCC,4BAAAA,YAAY,EAAEJ,IAAI,CAACK,WAAL,CAAiBD;AAAxE,2BAAzB;AACA;;AAGDnB,wBAAAA,mBAAmB,GAAGA,mBAAmB,CAACqB,IAApB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iCAAWD,CAAC,CAACJ,QAAF,CAAWM,WAAX,KAA2BD,CAAC,CAACL,QAAF,CAAWM,WAAX,EAA5B,GAAwD,CAAxD,GAA4D,CAAC,CAAvE;AAAA,yBAAzB,CAAtB;;AACA,8BAAKC,QAAL,CAAc;AAACzB,0BAAAA,mBAAmB,EAAnBA,mBAAD;AAAsB0B,0BAAAA,OAAO,EAAE;AAA/B,yBAAd;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,EAiBFC,KAjBE,CAiBI,UAAAC,KAAK,EAAI;AACjBC,gBAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,QAAN,EAAd;;AACA,sBAAKL,QAAL,CAAc;AAACC,kBAAAA,OAAO,EAAE;AAAV,iBAAd;AACA,eApBI,CAJe;;AAAA;AAAA;AAAA,+CAyBf,MAAK5B,KAAL,CAAWiC,sBAAX,CAAkC,KAAlC,CAzBe;;AAAA;AA2BrB,oBAAKjC,KAAL,CAAWkC,gCAAX,CAA4C,MAAKlC,KAAL,CAAWmC,UAAX,CAAsBC,UAAlE;;AACA,oBAAKT,QAAL,CAAc;AAACU,gBAAAA,kBAAkB,EAAE;AAArB,eAAd;;AA5BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlBH;;AAAA,UAwDnBC,YAxDmB,GAwDJ,UAAC7B,OAAD,EAAa;AAC3B,UAAI8B,OAAO,GAAG;AAACpB,QAAAA,GAAG,EAAEV;AAAN,OAAd;;AACA,YAAKT,KAAL,CAAWwC,WAAX,CAAuBC,eAAvB,CAAuCC,QAAvC,CAAgD;AAACC,QAAAA,GAAG,EAAE,UAAN;AAAkBC,QAAAA,SAAS,EAAE,UAA7B;AAAyCC,QAAAA,MAAM,EAAEN;AAAjD,OAAhD;AACA,KA3DkB;;AAAA,UA8DnBO,SA9DmB,GA8DP,UAACC,IAAD,EAAU;AACrB,YAAKpB,QAAL,CAAc;AAACqB,QAAAA,WAAW,EAAED;AAAd,OAAd;AACA,KAhEkB;;AAGlB,UAAKE,KAAL,GAAa;AACZrB,MAAAA,OAAO,EAAc,IADT;AAEZS,MAAAA,kBAAkB,EAAG,IAFT;AAGZW,MAAAA,WAAW,EAAU,IAHT;AAIZ9C,MAAAA,mBAAmB,EAAE;AAJT,KAAb;AAHkB;AASlB;;;;2CA0CqB;AACrB,WAAKF,KAAL,CAAWiC,sBAAX,CAAkC,KAAlC;AACA;;;0CAcqBe,W,EAAY;AAAA;;AACjC,UAAIE,CAAC,GAAG,KAAKD,KAAb;AACA,UAAIE,MAAM,GAAIH,WAAW,IAAI,IAAhB,GAAwBE,CAAC,CAAChD,mBAA1B,GAAgDgD,CAAC,CAAChD,mBAAF,CAAsBkD,MAAtB,CAA6B,UAAAC,IAAI;AAAA,eAAIzD,iBAAiB,CAAC0D,gCAAlB,CAAmDD,IAAI,CAACjC,QAAxD,EAAiE4B,WAAjE,CAAJ;AAAA,OAAjC,CAA7D;AACA,aACC,oBAAC,QAAD;AACC,QAAA,sBAAsB,EAAIO,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA8B;AAAA,cAAGC,WAAH,QAAGA,WAAH;AAAA,iBACvD,oBAAC,IAAD;AACC,YAAA,KAAK,EAAI,CACRC,KAAK,CAACC,SADE,EAERF,WAAW,IAAI;AAAEG,cAAAA,UAAU,EAAE;AAAd,aAFP,CADV;AAAA;AAAA;AAAA;AAAA;AAAA,YADuD;AAAA,SADzD;AASC,QAAA,IAAI,EAAYT,MATjB;AAUC,QAAA,YAAY,EAAI,sBAACE,IAAD;AAAA,iBAAUA,IAAI,CAAClC,GAAL,CAASa,QAAT,EAAV;AAAA,SAVjB;AAWC,QAAA,UAAU,EAAM;AAAA,cAAGqB,IAAH,SAAGA,IAAH;AAAA,cAASQ,KAAT,SAASA,KAAT;AAAA,cAAgBC,UAAhB,SAAgBA,UAAhB;AAAA,iBACf,oBAAC,kBAAD;AACC,YAAA,GAAG,EAAeT,IAAI,CAACV,GADxB;AAEC,YAAA,OAAO,EAAW;AAAA,qBAAM,MAAI,CAACL,YAAL,CAAkBe,IAAI,CAAClC,GAAvB,CAAN;AAAA,aAFnB;AAGC,YAAA,cAAc,EAAI2C,UAAU,CAACC,SAH9B;AAIC,YAAA,cAAc,EAAID,UAAU,CAACE,WAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA,aAMC,oBAAC,QAAD;AACC,YAAA,KAAK,EAASX,IAAI,CAACjC,QADpB;AAEC,YAAA,GAAG,EAAWyC,KAFf;AAGC,YAAA,UAAU,EACT,oBAAC,MAAD;AACC,cAAA,IAAI,EAAK,QADV;AAEC,cAAA,MAAM,EAAKR,IAAI,CAAChC,YAAL,IAAqB,IAAtB,GAA8B;AAAC4C,gBAAAA,GAAG,EAAEZ,IAAI,CAAChC;AAAX,eAA9B,GAAyDxB,iBAFpE;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAND,CADe;AAAA,SAXjB;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAiCA;;;kDAK4B;AAC5B,UAAI,KAAKoD,KAAL,CAAWZ,kBAAf,EAAkC;AACjC,aAAKV,QAAL,CAAc;AAACU,UAAAA,kBAAkB,EAAE;AAArB,SAAd;AACA,aAAKpC,mBAAL;AACA;;AACD,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACA;;;6BAGQ;AAAA;;AACR,UAAIiD,CAAC,GAAG,KAAKD,KAAb;AACA,UAAIiB,CAAC,GAAG,KAAKlE,KAAb;;AAGA,UAAIkD,CAAC,CAACtB,OAAN,EAAc;AACb,eACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAI;AAAEuC,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,UAAU,EAAE,QAAvB;AAAiCC,YAAAA,cAAc,EAAE;AAAjD,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAI;AAAEF,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,UAAU,EAAE,QAAvB;AAAiCC,YAAAA,cAAc,EAAE,QAAjD;AAA2DC,YAAAA,aAAa,EAAE;AAA1E,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,KAAKC,2BAAL,EADF,EAEC,oBAAC,iBAAD;AAAmB,UAAA,IAAI,EAAG,OAA1B;AAAkC,UAAA,KAAK,EAAG,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA,UAFD,EAIC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOL,CAAC,CAACM,WAAF,CAAc,CAAd,CAAP,QAJD,CADD,CADD;AAUA;;AAGD,aACC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI9E,aAAa,CAAC+E,oBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,SAEG,CAACP,CAAC,CAACQ,QAAJ,IAAiB,oBAAC,gBAAD;AAAkB,QAAA,WAAW,EAAI,qBAAAnC,OAAO;AAAA,iBAAI,MAAI,CAACtC,mBAAL,EAAJ;AAAA,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,QAFnB,EAKEiE,CAAC,CAACQ,QAAF,IAAc,KAAKH,2BAAL,EALhB,EAOGrB,CAAC,CAAChD,mBAAF,CAAsBc,MAAtB,IAAgC,CAAjC,IACA,oBACA,IADA;AACK,QAAA,KAAK,oBAAQtB,aAAa,CAACiF,mCAAtB;AAA2DR,UAAAA,IAAI,EAAE;AAAjE,UADV;AAAA;AAAA;AAAA;AAAA;AAAA,SAGC,oBAAC,SAAD;AACC,QAAA,KAAK,EAAqBjB,CAAC,CAACF,WAD7B;AAEC,QAAA,iBAAiB,EAAS,IAF3B;AAGC,QAAA,UAAU,EAAgB,IAH3B;AAIC,QAAA,SAAS,EAAiB,QAJ3B;AAKC,QAAA,UAAU,EAAgB;AAAC4B,UAAAA,KAAK,EAAE,OAAR;AAAiBC,UAAAA,eAAe,EAAElF;AAAlC,SAL3B;AAMC,QAAA,WAAW,EAAeuE,CAAC,CAACM,WAAF,CAAc,CAAd,CAN3B;AAOC,QAAA,oBAAoB,EAAM,MAP3B;AAQC,QAAA,YAAY,EAAc,sBAAAzB,IAAI;AAAA,iBAAI,MAAI,CAACD,SAAL,CAAeC,IAAf,CAAJ;AAAA,SAR/B;AAAA;AAAA;AAAA;AAAA;AAAA,QAHD,EAeC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI+B,WAAW,CAACC,UAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAKC,qBAAL,CAA2B9B,CAAC,CAACF,WAA7B,CADF,CAfD,CARF,EA6BGE,CAAC,CAAChD,mBAAF,CAAsBc,MAAtB,IAAgC,CAAjC,IACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AAACmD,UAAAA,IAAI,EAAE,CAAP;AAAUE,UAAAA,cAAc,EAAE,QAA1B;AAAoCD,UAAAA,UAAU,EAAE;AAAhD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AAACa,UAAAA,QAAQ,EAAE;AAAX,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCf,CAAC,CAACM,WAAF,CAAc,CAAd,CAAhC,CAFD,CA9BF,CADD;AAsCA;;;;EAhLkC1F,S;;AAA9BiB,qB,CAcEmF,iB,GAAoB;AAAA,MAAG1C,WAAH,SAAGA,WAAH;AAAA,SAAsB;AAChD2C,IAAAA,KAAK,EAAE5F,2BAA2B,CAACiD,WAAW,CAACC,eAAZ,CAA4B2C,cAA5B,GAA6CC,QAA9C,CAA3B,CAAmF,CAAnF,CADyC;AAEhDC,IAAAA,UAAU,EAAE;AAAA,aAAO,oBAAC,IAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAyB,QAAA,KAAK,EAAC,OAA/B;AAAwC,QAAA,IAAI,EAAE,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAAA;AAFoC,GAAtB;AAAA,C;;AAsK5B,IAAMR,WAAW,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAGrCT,EAAAA,UAAU,EAAE;AACXZ,IAAAA,IAAI,EAAW,CADJ;AAEXG,IAAAA,aAAa,EAAE,QAFJ;AAGXmB,IAAAA,OAAO,EAAQ;AAHJ;AAHyB,CAAlB,CAApB;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACzC,KAAD,EAAW;AAClC,SAAO;AACNuB,IAAAA,WAAW,EAAEjF,2BAA2B,CAAC0D,KAAK,CAAC0C,qBAAN,CAA4BN,QAA7B,CADlC;AAEN5E,IAAAA,OAAO,EAAMwC,KAAK,CAAC2C,WAAN,CAAkBnF,OAFzB;AAGNiE,IAAAA,QAAQ,EAAKzB,KAAK,CAAC4C,YAAN,CAAmBnB;AAH1B,GAAP;AAKA,CAND;;AAQA,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACxC,SAAO;AACN9D,IAAAA,sBAAsB,EAAE,gCAAC+D,IAAD;AAAA,aAAUD,QAAQ,CAAC1G,cAAc,CAAC2G,IAAD,CAAf,CAAlB;AAAA,KADlB;AAEN9D,IAAAA,gCAAgC,EAAE,0CAAC+D,cAAD;AAAA,aAAoBF,QAAQ,CAACzG,8BAA8B,CAAC2G,cAAD,CAA/B,CAA5B;AAAA;AAF5B,GAAP;AAIA,CALD;;AAOA,eAAe7G,OAAO,CAACsG,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C/F,qBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Text, View, StyleSheet, TextInput, ScrollView, TouchableHighlight,\n\t\tActivityIndicator, FlatList} from 'react-native'\n\nimport { Avatar, ListItem, SearchBar} from \"react-native-elements\"\n\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport { NavigationEvents } from 'react-navigation'\n\nimport { connect } from 'react-redux'\nimport { changeLoadView, changeStackScreenPropsFunction } from '../../redux/actions/popUpActions'\nimport { ListOfUsersRequesting_Texts } from '../../languages/screens/contactUsers/ListOfUsersRequesting'\n\nimport * as Log          from '../../genericFunctions/logFunctions'\nimport * as Database     from '../../genericFunctions/databaseFunctions'\nimport { genericStyles, WHITE_COLOR } from '../../constants/genericStyles'\n\nimport * as auxiliarFunctions from '../../genericFunctions/otherFunctions'\nimport {DEFAULT_USER_ICON} from '../../constants/genericImages'\n\nimport PouchDB from 'pouchdb-react-native'\n\n\nclass ListOfUsersRequesting extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tloading:             true, // Variable que determina si se están cargando los amigos desde la base de datos\n\t\t\tloadFunctionOpened:  true, // Indica si se puede ingresar a la función loadUsersRequesting\n\t\t\tfilter_name:         null, // Almacenará el la cadena de caracteres que ingrese el usuario para filtrar la búsqueda de usuarios\n\t\t\tusersRequestingList: null, // Lista de todos los amigos del usuario actual\n\t\t}\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle: ListOfUsersRequesting_Texts[screenProps.stackNavigation.getScreenProps().language][0],\n\t\tdrawerIcon: () => (<Icon  name=\"user-plus\"  color=\"black\"  size={20}/>)\n\t});\n\n\t// Cargamos los usuarios solicitando amistad al actual desde la base de datos, y los almacenamos en una variable de estado local\n\tloadUsersRequesting = async() => {\n\t\tvar usersRequestingList = [];\n\t\tconst db = new PouchDB('lithodex');\n\n\t\tawait db.get('default')\n\t\t\t.then(async(database) => {  \n\t\t\t\t// Identificadores de usuario de los que le han realizado una solicitud de amistad al actual\n\t\t\t\tlet usersRequesting_ids = database.users[this.props.user_id].friendRequests.received;\n\n\t\t\t\t// Aquí obtenemos la lista de usuarios con solicitud, sólo manteniendo las propiedades necesarias de cada uno, para no sobrecargar la memoria\n\t\t\t\tvar usersRequestingList = [];\n\t\t\t\tvar keysList = Object.keys(usersRequesting_ids);\n\t\t\t\tfor (i = 0; i < keysList.length; i++){\n\t\t\t\t\tlet user = database.users[keysList[i]];\n\t\t\t\t\tusersRequestingList.push({_id: user._id, userName: user.userName, profileImage: user.information.profileImage})\n\t\t\t\t}\n\n\t\t\t\t// Ordenamos la lista de usuarios solicitantes\n\t\t\t\tusersRequestingList = usersRequestingList.sort((a, b) => (a.userName.toLowerCase() > b.userName.toLowerCase()) ? 1 : -1);\n\t\t\t\tthis.setState({usersRequestingList, loading: false});\n\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.error(error.toString());\n\t\t\t\tthis.setState({loading: false})\n\t\t\t})\n\t\tawait this.props.dispatchChangeLoadView(false);\n\t\t// Esto hace que el botón de tres líneas que está en la parte derecha de la cabecera pueda abrir el DrawerNavigator\n\t\tthis.props.dispatchStackScreenPropsFunction(this.props.navigation.openDrawer);\n\t\tthis.setState({loadFunctionOpened: true});\n\t}\n\n\t// Por si acaso desmontamos esta vista antes de que a la función de cargar desde la base de datos le dé tiempo\n\t// de despachar esta variable como falsa\n\tcomponentWillUnmount(){\n\t\tthis.props.dispatchChangeLoadView(false);\n\t}\n\n\t// Para ir a la vista del usuario que se va a examinar\n\tgoToUserView = (user_id) => {\n\t\tlet payload = {_id: user_id}\n\t\tthis.props.screenProps.stackNavigation.navigate({key: 'UserView', routeName: 'UserView', params: payload});\n\t}\n\n\t// Una vez que se cambia el texto en el que se filtran los nombres, se invoca este procedimiento\n\tsetFilter = (text) => {\n\t\tthis.setState({filter_name: text})\n\t}\n\n\t// Función para mostrar los usuarios como una lista de botones\n\trenderUsersRequesting(filter_name){\n\t\tlet s = this.state;\n\t\tlet myList = (filter_name == null) ? s.usersRequestingList : s.usersRequestingList.filter(item => auxiliarFunctions.stringIncludesSubstring_NoStrict(item.userName,filter_name));\n\t\treturn(\n\t\t\t<FlatList\n\t\t\t\tItemSeparatorComponent = {Platform.OS !== 'android' && (({ highlighted }) => (\n\t\t\t\t\t<View // Esto aparentemente servirá cuando trabajemos con iOS\n\t\t\t\t\t\tstyle = {[\n\t\t\t\t\t\t\tstyle.separator,\n\t\t\t\t\t\t\thighlighted && { marginLeft: 0 }\n\t\t\t\t\t\t]}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\tdata         = {myList} // Arreglo con los elementos que queremos listar\n\t\t\t\tkeyExtractor = {(item) => item._id.toString()} // Sirve para indicarle que lo que debe usar como \"key\" por cada elemento es el atributo \"_id\"\n\t\t\t\trenderItem   = {({ item, index, separators }) => (\n\t\t\t\t\t<TouchableHighlight\n\t\t\t\t\t\tkey            = {item.key}\n\t\t\t\t\t\tonPress        = {() => this.goToUserView(item._id)}\n\t\t\t\t\t\tonShowUnderlay = {separators.highlight}\n\t\t\t\t\t\tonHideUnderlay = {separators.unhighlight}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\ttitle      = {item.userName}\n\t\t\t\t\t\t\tkey        = {index}\n\t\t\t\t\t\t\tleftAvatar = {\n\t\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\t\tsize   = \"medium\"\n\t\t\t\t\t\t\t\t\tsource = {(item.profileImage != null) ? {uri: item.profileImage} : DEFAULT_USER_ICON}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TouchableHighlight>\n\t\t\t\t)}\n\t\t\t/>\n\t\t)\n\t}\n\n\t// Sirve para activar la función que lee desde la base de datos. Esto es útil cuando estamos emulando la aplicación y refrescamos la página\n\t// en caliente, ya que hacer eso volverá a colocar this.state.loading en su valor inicial (true) pero este componente ya estará montado, por lo que \n\t// no se activará el NavigationEvents onWillFocus, y en consecuencia la vista se quedará pegada en \"Cargando\"\n\tactivateLoadUsersRequesting(){\n\t\tif (this.state.loadFunctionOpened){\n\t\t\tthis.setState({loadFunctionOpened: false});\n\t\t\tthis.loadUsersRequesting();\n\t\t}\n\t\treturn(<View/>)\n\t}\n\n\t// Lo que se le mostrará al usuario\n\trender() {\n\t\tlet s = this.state;\n\t\tlet p = this.props;\n\n\t\t// Caso en que todavía no se ha cargado la información desde la base de datos\n\t\tif (s.loading){\n\t\t\treturn(\n\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'flex-start'}}>\n\t\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n\t\t\t\t\t\t{this.activateLoadUsersRequesting()}\n\t\t\t\t\t\t<ActivityIndicator size = \"large\" color = \"#0000ff\" />\n\t\t\t\t\t\t{/*Mensaje: \"Cargando\"*/}\n\t\t\t\t\t\t<Text>{p.allMessages[1]}...</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t)\n\t\t}\n\n\t\t/// Caso en que ya se han cargado los usuarios\n\t\treturn (\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t{/* Caso en que regresamos de otra vista del DrawerNavigator*/}\n\t\t\t\t{(!p.loadView) && <NavigationEvents onWillFocus = {payload => this.loadUsersRequesting()}/>}\n\t\t\t\t\n\t\t\t\t{/*Caso en que regresamos de una vista del StackNavigator*/}\n\t\t\t\t{p.loadView && this.activateLoadUsersRequesting()}\n\t\t\t\t\n\t\t\t\t{(s.usersRequestingList.length != 0) &&\n\t\t\t\t\t< // Parte en la que el usuario ve la lista de otros usuarios\n\t\t\t\t\tView style = {{...genericStyles.white_background_without_ScrollView, flex: 1}}>\n\t\t\t\t\t\t{/*Aquí el usuario puede filtrar la búsqueda del otro usuario a buscar*/}\n\t\t\t\t\t\t<SearchBar\n\t\t\t\t\t\t\tvalue                  = {s.filter_name}\n\t\t\t\t\t\t\tselectTextOnFocus      = {true}\n\t\t\t\t\t\t\tlightTheme             = {true}\n\t\t\t\t\t\t\ttextAlign              = {'center'} \n\t\t\t\t\t\t\tinputStyle             = {{color: 'black', backgroundColor: WHITE_COLOR}}\n\t\t\t\t\t\t\tplaceholder            = {p.allMessages[2]} // Mensaje: \"Buscar solicitudes...\"\n\t\t\t\t\t\t\tplaceholderTextColor   = {'gray'}\n\t\t\t\t\t\t\tonChangeText           = {text => this.setFilter(text)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t{/*En esta parte debe mostrarse la lista de usuarios*/}\n\t\t\t\t\t\t<View style = {localStyles.userPicker}>\n\t\t\t\t\t\t\t{this.renderUsersRequesting(s.filter_name)}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\n\t\t\t\t{(s.usersRequestingList.length == 0) &&\n\t\t\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n\t\t\t\t\t\t{/*Mensaje: \"No hay solicitudes de amistad pendientes\"*/}\n\t\t\t\t\t\t<Text style = {{fontSize: 14}}>{p.allMessages[3]}</Text>\n\t\t\t\t\t</View>\n\t\t\t\t}\n\t\t\t</View>\n\t\t); \n\t}\n}\n\n/// Constante para darle formato a los diversos componentes de esta pantalla\nconst localStyles = StyleSheet.create({\n\n\t// Formato para mostrar un usuario (no la lista completa, sino uno específico)\n\tuserPicker: {\n\t\tflex:          8,\n\t\tflexDirection: 'column',\n\t\tpadding:       10,\n\t},\n\n});\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: ListOfUsersRequesting_Texts[state.appPreferencesReducer.language], \n\t\tuser_id:     state.userReducer.user_id,\n\t\tloadView:    state.popUpReducer.loadView,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchChangeLoadView: (bool) => dispatch(changeLoadView(bool)),\n\t\tdispatchStackScreenPropsFunction: (globalFunction) => dispatch(changeStackScreenPropsFunction(globalFunction)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListOfUsersRequesting);"]},"metadata":{},"sourceType":"module"}