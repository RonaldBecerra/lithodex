{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\ConsultLog.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { connect } from 'react-redux';\nimport PouchDB from 'pouchdb-react-native';\nimport { ConsultLog_Texts } from \"../languages/screens/ConsultLog\";\nimport { genericStyles, DARK_GRAY_COLOR } from \"../constants/genericStyles\";\n\nvar ConsultLog = function (_Component) {\n  _inherits(ConsultLog, _Component);\n\n  function ConsultLog(props) {\n    var _this;\n\n    _classCallCheck(this, ConsultLog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConsultLog).call(this, props));\n    _this.state = {\n      loading: true,\n      completeLog: null\n    };\n    return _this;\n  }\n\n  _createClass(ConsultLog, [{\n    key: \"loadLog\",\n    value: function loadLog() {\n      var _this2 = this;\n\n      var db = new PouchDB('lithodex');\n      db.get('default').then(function (database) {\n        _this2.setState({\n          completeLog: database.log,\n          loading: false\n        });\n      }).catch(function (error) {\n        console.error(error.toString());\n      });\n    }\n  }, {\n    key: \"renderEntryField\",\n    value: function renderEntryField(name, value) {\n      if (value == null) {\n        value = \"---\";\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: 'blue'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }, \"* \", name, \":\", React.createElement(Text, {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      }, \" \", value)));\n    }\n  }, {\n    key: \"renderLog\",\n    value: function renderLog() {\n      var _this3 = this;\n\n      var p = this.props;\n      return this.state.completeLog.map(function (item, i) {\n        return React.createElement(View, {\n          key: i,\n          style: {\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: 'blue'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          }\n        }, \"\\n\", p.allMessages[3]), React.createElement(Text, {\n          style: {\n            color: 'blue'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          }\n        }, \"--------------------\"), _this3.renderEntryField(p.allMessages[4], item._id), _this3.renderEntryField(p.allMessages[5], item.user_id), _this3.renderEntryField(p.allMessages[6], item.user_ip), _this3.renderEntryField(p.allMessages[7], item.latitude), _this3.renderEntryField(p.allMessages[8], item.longitude), _this3.renderEntryField(p.allMessages[9], item.action), _this3.renderEntryField(p.allMessages[10], item.code), _this3.renderEntryField(p.allMessages[11], item.time), _this3.renderEntryField(p.allMessages[12], item.objectOfStudy_type), _this3.renderEntryField(p.allMessages[13], item.objectOfStudy_id), _this3.renderEntryField(p.allMessages[14], item.stratum_key));\n      });\n    }\n  }, {\n    key: \"activateLoadLog\",\n    value: function activateLoadLog() {\n      this.loadLog();\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var p = this.props;\n\n      if (this.state.loading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'flex-start'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          }\n        }, this.activateLoadLog(), React.createElement(View, {\n          style: {\n            flex: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#0000ff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          }\n        }), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          }\n        }, p.allMessages[1], \"...\")));\n      }\n\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        }\n      }, React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        }\n      }, React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        }\n      }, this.renderLog())), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[0],\n        color: DARK_GRAY_COLOR,\n        onPress: function onPress() {\n          _this4.props.navigation.goBack();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        }\n      })));\n    }\n  }]);\n\n  return ConsultLog;\n}(Component);\n\nConsultLog.navigationOptions = function (_ref) {\n  var screenProps = _ref.screenProps;\n  return {\n    title: ConsultLog_Texts[screenProps.language][2],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader)\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: ConsultLog_Texts[state.appPreferencesReducer.language]\n  };\n};\n\nexport default connect(mapStateToProps)(ConsultLog);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/ConsultLog.js"],"names":["React","Component","connect","PouchDB","ConsultLog_Texts","genericStyles","DARK_GRAY_COLOR","ConsultLog","props","state","loading","completeLog","db","get","then","database","setState","log","catch","error","console","toString","name","value","color","p","map","item","i","flexDirection","allMessages","renderEntryField","_id","user_id","user_ip","latitude","longitude","action","code","time","objectOfStudy_type","objectOfStudy_id","stratum_key","loadLog","flex","alignItems","justifyContent","activateLoadLog","lightGray_background","white_background_with_ScrollView","renderLog","down_buttons","navigation","goBack","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","mapStateToProps","appPreferencesReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, Button as ButtonNoIcon, ScrollView, ActivityIndicator } from 'react-native';\n\nimport { connect } from 'react-redux'\nimport PouchDB from 'pouchdb-react-native'\n\nimport { ConsultLog_Texts } from '../languages/screens/ConsultLog'\nimport { genericStyles, DARK_GRAY_COLOR } from '../constants/genericStyles'\n\n\nclass ConsultLog extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tloading:     true,\n\t\t\tcompleteLog: null,\n\t\t}\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle:           ConsultLog_Texts[screenProps.language][2],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t}\n\t});\n\n\t// Función para cargar el \"log\" desde la base de datos\n\tloadLog(){\t\n\t\tconst db = new PouchDB('lithodex');\n\t\tdb.get('default')\n\t\t\t.then(database => {\n\t\t\t\tthis.setState({completeLog: database.log, loading: false})\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.error(error.toString());\n\t\t\t})\n\t}\n\n\t// Formato con el que saldrá cada una de las filas (campos) de una entrada del log\n\trenderEntryField(name, value){\n\t\tif (value == null){\n\t\t\tvalue = \"---\"\n\t\t}\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Text style = {{color: 'blue'}}>* {name}:\n\t\t\t\t\t<Text style = {{color: 'black'}}> {value}</Text>\n\t\t\t\t</Text>\n\t\t\t</View>\n\t\t)\n\t}\n\n\t/// Función para obtener uno por uno los campos de cada entrada del \"log\", ya que no es posible imprimir directamente un objeto de JavaScript\n\trenderLog() {\n\t\tconst p = this.props;\n\n\t\treturn this.state.completeLog.map((item,i) => (\n\t\t\t<View  key={i}  style={{flexDirection: 'column'}}>\n\t\t\t\t<Text style = {{color: 'blue'}}>{\"\\n\"}{p.allMessages[3]}</Text>\n\t\t\t\t<Text style = {{color: 'blue'}}>--------------------</Text>\t\n\n\t\t\t\t{/*Mensaje: \"id entrada\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[4],item._id)}\n\n\t\t\t\t{/*Mensaje: \"id usuario\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[5],item.user_id)}\n\n\t\t\t\t{/*Mensaje: \"ip usuario\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[6],item.user_ip)}\n\n\t\t\t\t{/*Mensaje: \"latitud\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[7],item.latitude)}\n\n\t\t\t\t{/*Mensaje: \"longitud\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[8],item.longitude)}\n\n\t\t\t\t{/*Mensaje: \"acción\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[9],item.action)}\n\n\t\t\t\t{/*Mensaje: \"código\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[10],item.code)}\n\n\t\t\t\t{/*Mensaje: \"momento\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[11],item.time)}\t\n\n\t\t\t\t{/*Mensaje: \"tipo de objeto de estudio\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[12],item.objectOfStudy_type)}\t\n\n\t\t\t\t{/*Mensaje: \"id objeto de estudio\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[13],item.objectOfStudy_id)}\n\n\t\t\t\t{/*Mensaje: \"clave de estrato\"*/}\n\t\t\t\t{this.renderEntryField(p.allMessages[14],item.stratum_key)}\n\t\t\t\t\t\t\n\t\t\t</View>\n\t\t))\n\t}\n\n\t/// Sirve para activar la función que lee desde la base de datos. Esto es útil cuando estamos emulando la aplicación y refrescamos la página\n\t// en caliente, ya que hacer eso volverá a colocar this.state.loading en su valor inicial (true) pero este componente ya estará montado, por lo que \n\t// no se activará el NavigationEvents onWillFocus, y en consecuencia la vista se quedará pegada en \"Cargando\"\n\tactivateLoadLog(){\n\t\tthis.loadLog();\n\t\treturn(<View/>)\n\t}\n\n\t/// Lo que se muestra al usuario en total en esta ventana\n\trender (){\n\t\tlet p = this.props;\n\n\t\t// Vista para cuando se está cargando el \"log\" completo desde la base de datos\n\t\tif (this.state.loading){\n\t\t\treturn (\n\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'flex-start'}}>\n\t\t\t\t\t{this.activateLoadLog()}\n\t\t\t\t\t<View style = {{ flex: 1, alignItems: 'center', justifyContent: 'center', flexDirection: 'column'}}>\n\t\t\t\t\t\t<ActivityIndicator size = \"large\" color = \"#0000ff\" />\n\t\t\t\t\t\t{/*Mensaje: \"Cargando\"*/}\n\t\t\t\t\t\t<Text>{p.allMessages[1]}...</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t);\t\n\t\t} \n\n\t\t/// Vista para cuando ya se cargó el log desde la base de datos\n\t\treturn(\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\n\t\t\t\t{/*En esta parte se despliegan las entradas del log*/}\n\t\t\t\t<View style = {genericStyles.white_background_with_ScrollView}>\n\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t{this.renderLog()}\n\t\t\t\t\t</ScrollView>\n\n\t\t\t\t</View>\n\n\t\t\t\t{/*Vista del botón para darle Volver*/}\n\t\t\t\t<View style = {genericStyles.down_buttons}>\n\n\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\traised\n\t\t\t\t\t\ttitle   = {p.allMessages[0]} // Mensaje: \"Volver\"\n\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\tonPress = {() => {this.props.navigation.goBack()}}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: ConsultLog_Texts[state.appPreferencesReducer.language], \n\t}\n};\n\nexport default connect(mapStateToProps)(ConsultLog)"]},"metadata":{},"sourceType":"module"}