{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PouchDB from 'pouchdb-react-native';\nimport * as Log from \"./logFunctions\";\nimport * as appConstants from \"../constants/appConstants\";\nimport publicIP from 'react-native-public-ip';\nimport * as Location from 'expo-location';\nimport * as Permissions from 'expo-permissions';\nimport _ from \"lodash\";\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\nvar OUTCROPS_DOCUMENT = {\n  _id: appConstants.OUTCROPS_DOCUMENT_ID,\n  objects: {}\n};\nvar CORES_DOCUMENT = {\n  _id: appConstants.CORES_DOCUMENT_ID,\n  objects: {}\n};\nvar UNAUTHENTICATED_PROPERTIES = {\n  _id: appConstants.UNAUTHENTICATED_ID,\n  privileges: 0,\n  profileImage: null,\n  log: [],\n  log_length: 0\n};\nvar NEW_USER_PROPERTIES = {\n  _id: appConstants.DEFAULT_DOCUMENT_ID,\n  privileges: 0,\n  friends: {},\n  friendRequests: {\n    received: {},\n    made: {}\n  }\n};\nvar localLithodex = new PouchDB(appConstants.LOCAL_LITHODEX);\nvar remoteLithodex = new PouchDB(appConstants.REMOTE_GENERIC_LITHODEX);\nexport function dummy_database() {\n  var unauthenticatedDB;\n  return _regeneratorRuntime.async(function dummy_database$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(localLithodex.put({\n            _id: appConstants.DEFAULT_DOCUMENT_ID,\n            language: 'spanish',\n            currentUser: _objectSpread({}, UNAUTHENTICATED_PROPERTIES),\n            remoteLog: []\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 2:\n          unauthenticatedDB = new PouchDB(appConstants.UNAUTHENTICATED_ID);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(unauthenticatedDB.put({\n            _id: appConstants.DEFAULT_DOCUMENT_ID,\n            privileges: 0\n          }));\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(unauthenticatedDB.put(_objectSpread({}, OUTCROPS_DOCUMENT)));\n\n        case 7:\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(unauthenticatedDB.put(_objectSpread({}, CORES_DOCUMENT)));\n\n        case 9:\n          return _context.abrupt(\"return\", true);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function new_database() {\n  return _regeneratorRuntime.async(function new_database$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID).then(function () {\n            return true;\n          }).catch(function (e) {\n            return dummy_database();\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\nexport function logOut() {\n  localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID).then(function (document) {\n    document.currentUser = _objectSpread({}, UNAUTHENTICATED_PROPERTIES);\n    return localLithodex.put(_objectSpread({}, document, {\n      _rev: document._rev\n    }));\n  }).catch(function (error) {\n    console.error(error.toString());\n  });\n}\nexport function saveUserInfo(payload, localUserDB, isNew, acquireInformation) {\n  var _id, information, userName, password, newUserDefaultDocument, newUserOutcropsDocument, newUserCoresDocument, unauthenticatedDB;\n\n  return _regeneratorRuntime.async(function saveUserInfo$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _id = payload._id, information = payload.information, userName = payload.userName, password = payload.password;\n\n          if (!isNew) {\n            _context7.next = 22;\n            break;\n          }\n\n          newUserDefaultDocument = _objectSpread({}, NEW_USER_PROPERTIES, {\n            information: information,\n            userName: userName,\n            password: password\n          });\n          newUserOutcropsDocument = _objectSpread({}, OUTCROPS_DOCUMENT);\n          newUserCoresDocument = _objectSpread({}, CORES_DOCUMENT);\n\n          if (!acquireInformation) {\n            _context7.next = 12;\n            break;\n          }\n\n          unauthenticatedDB = new PouchDB(appConstants.UNAUTHENTICATED_ID);\n          _context7.next = 9;\n          return _regeneratorRuntime.awrap(unauthenticatedDB.get(appConstants.OUTCROPS_DOCUMENT_ID).then(function _callee(document) {\n            return _regeneratorRuntime.async(function _callee$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(document.objects);\n\n                  case 2:\n                    newUserOutcropsDocument.objects = _context3.sent;\n                    document.objects = {};\n                    unauthenticatedDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 9:\n          _context7.next = 11;\n          return _regeneratorRuntime.awrap(unauthenticatedDB.get(appConstants.CORES_DOCUMENT_ID).then(function _callee2(document) {\n            return _regeneratorRuntime.async(function _callee2$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(document.objects);\n\n                  case 2:\n                    newUserCoresDocument.objects = _context4.sent;\n                    document.objects = {};\n                    unauthenticatedDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 11:\n          exportLogEntries(_id, true);\n\n        case 12:\n          _context7.next = 14;\n          return _regeneratorRuntime.awrap(localUserDB.put(newUserDefaultDocument));\n\n        case 14:\n          _context7.next = 16;\n          return _regeneratorRuntime.awrap(localUserDB.put(newUserOutcropsDocument));\n\n        case 16:\n          _context7.next = 18;\n          return _regeneratorRuntime.awrap(localUserDB.put(newUserCoresDocument));\n\n        case 18:\n          _context7.next = 20;\n          return _regeneratorRuntime.awrap(remoteLithodex.get(appConstants.USERNAMES_DOCUMENT_ID).then(function (document) {\n            document.userNames[userName] = {\n              _id: _id,\n              password: password,\n              privileges: 0\n            };\n            return remoteLithodex.put(_objectSpread({}, document, {\n              _rev: document._rev\n            }));\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 20:\n          _context7.next = 24;\n          break;\n\n        case 22:\n          _context7.next = 24;\n          return _regeneratorRuntime.awrap(localUserDB.get(appConstants.DEFAULT_DOCUMENT_ID).then(function _callee4(document) {\n            var _document, friends, friendRequests, privileges, updatedUser, userNameChanged, passwordChanged;\n\n            return _regeneratorRuntime.async(function _callee4$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _document = document, friends = _document.friends, friendRequests = _document.friendRequests, privileges = _document.privileges;\n                    updatedUser = {\n                      _id: DEFAULT_DOCUMENT_ID,\n                      information: information,\n                      userName: userName,\n                      password: password,\n                      friends: friends,\n                      friendRequests: friendRequests,\n                      privileges: privileges\n                    };\n                    userNameChanged = document.userName != userName;\n                    passwordChanged = document.password != password;\n\n                    if (!(userNameChanged || passwordChanged)) {\n                      _context6.next = 7;\n                      break;\n                    }\n\n                    _context6.next = 7;\n                    return _regeneratorRuntime.awrap(remoteLithodex.get(appConstants.USERNAMES_DOCUMENT_ID).then(function _callee3(remote_document) {\n                      return _regeneratorRuntime.async(function _callee3$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              remote_document.userNames[userName] = {\n                                _id: _id,\n                                password: password,\n                                privileges: privileges\n                              };\n\n                              if (userNameChanged) {\n                                delete remote_document.userNames[document.userName];\n                              }\n\n                              return _context5.abrupt(\"return\", remoteLithodex.put(_objectSpread({}, remote_document, {\n                                _rev: remote_document._rev\n                              })));\n\n                            case 3:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      });\n                    }).catch(function (error) {\n                      console.error(error.toString());\n                    }));\n\n                  case 7:\n                    document = updatedUser;\n                    return _context6.abrupt(\"return\", localUserDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    })));\n\n                  case 9:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 24:\n          _context7.next = 26;\n          return _regeneratorRuntime.awrap(localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID).then(function (document) {\n            document.currentUser._id = _id;\n            document.currentUser.profileImage = information.profileImage;\n            return localLithodex.put(_objectSpread({}, document, {\n              _rev: document._rev\n            }));\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 26:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  });\n}\nexport function exportLogEntries(user_id) {\n  var from_unauthenticated,\n      user_ip,\n      _await$Permissions$as,\n      status,\n      longitude,\n      latitude,\n      geographicLocation,\n      _args10 = arguments;\n\n  return _regeneratorRuntime.async(function exportLogEntries$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          from_unauthenticated = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : true;\n          console.log(\"\\n\\nEntré en exportLogEntries\");\n          user_ip = null;\n          _context10.next = 5;\n          return _regeneratorRuntime.awrap(publicIP().then(function (ip) {\n            user_ip = ip;\n          }));\n\n        case 5:\n          _context10.next = 7;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n        case 7:\n          _await$Permissions$as = _context10.sent;\n          status = _await$Permissions$as.status;\n\n          if (!(status !== 'granted')) {\n            _context10.next = 14;\n            break;\n          }\n\n          longitude = 'Undetermined';\n          latitude = 'Undetermined';\n          _context10.next = 19;\n          break;\n\n        case 14:\n          _context10.next = 16;\n          return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({\n            enableHighAccuracy: true\n          }));\n\n        case 16:\n          geographicLocation = _context10.sent;\n          longitude = JSON.stringify(geographicLocation.coords.longitude);\n          latitude = JSON.stringify(geographicLocation.coords.latitude);\n\n        case 19:\n          localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID).then(function _callee6(localDocument) {\n            var localLogRemaining;\n            return _regeneratorRuntime.async(function _callee6$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    localLogRemaining = [];\n                    _context9.next = 3;\n                    return _regeneratorRuntime.awrap(remoteLithodex.get(appConstants.LOG_DOCUMENT_ID).then(function _callee5(remoteDocument) {\n                      var log, originUser, log_entry;\n                      return _regeneratorRuntime.async(function _callee5$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              log = localDocument.remoteLog;\n                              originUser = from_unauthenticated ? appConstants.UNAUTHENTICATED_ID : user_id;\n                              log_entry = null;\n                              i = 0;\n\n                            case 4:\n                              if (!(i < log.length)) {\n                                _context8.next = 19;\n                                break;\n                              }\n\n                              log_entry = log[i];\n\n                              if (!(log_entry[\"user_id\"] == originUser)) {\n                                _context8.next = 14;\n                                break;\n                              }\n\n                              if (log_entry[\"user_ip\"] == null) {\n                                log_entry[\"user_ip\"] = user_ip;\n                              }\n\n                              if (log_entry[\"latitude\"] == null) {\n                                log_entry[\"latitude\"] = latitude;\n                                log_entry[\"longitude\"] = longitude;\n                              }\n\n                              log_entry = _objectSpread({}, log_entry, {\n                                user_id: user_id\n                              });\n                              _context8.next = 12;\n                              return _regeneratorRuntime.awrap(remoteDocument.log.push(log_entry));\n\n                            case 12:\n                              _context8.next = 16;\n                              break;\n\n                            case 14:\n                              _context8.next = 16;\n                              return _regeneratorRuntime.awrap(localLogRemaining.push(log_entry));\n\n                            case 16:\n                              i++;\n                              _context8.next = 4;\n                              break;\n\n                            case 19:\n                              _context8.next = 21;\n                              return _regeneratorRuntime.awrap(localLogRemaining);\n\n                            case 21:\n                              localDocument.remoteLog = _context8.sent;\n                              return _context8.abrupt(\"return\", remoteLithodex.put(_objectSpread({}, remoteDocument, {\n                                _rev: remoteDocument._rev\n                              })));\n\n                            case 23:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      });\n                    }).catch(function (error) {\n                      console.error(error.toString());\n                    }));\n\n                  case 3:\n                    return _context9.abrupt(\"return\", localLithodex.put(_objectSpread({}, localDocument, {\n                      _rev: localDocument._rev\n                    })));\n\n                  case 4:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          });\n\n        case 20:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  });\n}\nexport function deleteUserData(user_id, localDB, remoteDB) {\n  return _regeneratorRuntime.async(function deleteUserData$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          localDB.get(DEFAULT_DOCUMENT_ID).then(function _callee7(document) {\n            var currentUser;\n            return _regeneratorRuntime.async(function _callee7$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    currentUser = document.users[user_id];\n                    currentUser.outcrops = [];\n                    currentUser.cores = [];\n                    return _context11.abrupt(\"return\", localDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    })));\n\n                  case 4:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          });\n\n        case 1:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  });\n}\nexport function deleteOwnUser(user_id, localDB, remoteDB) {\n  return _regeneratorRuntime.async(function deleteOwnUser$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          localDB.get(DEFAULT_DOCUMENT_ID).then(function _callee8(document) {\n            var currentUserName;\n            return _regeneratorRuntime.async(function _callee8$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    currentUserName = document.users[user_id].userName;\n                    delete document.users[user_id];\n                    delete document.userNames[currentUserName];\n                    document.currentUser_id = 'unauthenticated';\n                    return _context13.abrupt(\"return\", localDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    })));\n\n                  case 5:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          });\n\n        case 1:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  });\n}\nexport function updateRelationship(source_id, destination_id, source_database, destination_database, kind) {\n  return _regeneratorRuntime.async(function updateRelationship$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return _regeneratorRuntime.awrap(source_database.get(appConstants.DEFAULT_DOCUMENT_ID).then(function _callee10(sourceUser_doc) {\n            return _regeneratorRuntime.async(function _callee10$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    _context16.next = 2;\n                    return _regeneratorRuntime.awrap(destination_database.get(appConstants.DEFAULT_DOCUMENT_ID).then(function _callee9(destinationUser_doc) {\n                      return _regeneratorRuntime.async(function _callee9$(_context15) {\n                        while (1) {\n                          switch (_context15.prev = _context15.next) {\n                            case 0:\n                              if (kind == 0) {\n                                sourceUser_doc.friendRequests.made[destination_id] = true;\n                                destinationUser_doc.friendRequests.received[source_id] = true;\n                              } else if (kind < 3) {\n                                delete sourceUser_doc.friendRequests.made[destination_id];\n                                delete destinationUser_doc.friendRequests.received[source_id];\n\n                                if (kind == 2) {\n                                  sourceUser_doc.friends[destination_id] = true;\n                                  destinationUser_doc.friends[source_id] = true;\n                                }\n                              } else {\n                                delete sourceUser_doc.friends[destination_id];\n                                delete destinationUser_doc.friends[source_id];\n                              }\n\n                              return _context15.abrupt(\"return\", destination_database.put(_objectSpread({}, destinationUser_doc, {\n                                _rev: destinationUser_doc._rev\n                              })));\n\n                            case 2:\n                            case \"end\":\n                              return _context15.stop();\n                          }\n                        }\n                      });\n                    }).catch(function (error) {\n                      console.error(error.toString());\n                    }));\n\n                  case 2:\n                    return _context16.abrupt(\"return\", source_database.put(_objectSpread({}, sourceUser_doc, {\n                      _rev: sourceUser_doc._rev\n                    })));\n\n                  case 3:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  });\n}\nexport function saveObjectOfStudyInfo(payload, isCore, isNew, user_id, object_id, localDB) {\n  return _regeneratorRuntime.async(function saveObjectOfStudyInfo$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return _regeneratorRuntime.awrap(localDB.get(isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID).then(function _callee11(document) {\n            return _regeneratorRuntime.async(function _callee11$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    _context18.next = 2;\n                    return _regeneratorRuntime.awrap(payload);\n\n                  case 2:\n                    document.objects[object_id] = _context18.sent;\n\n                    if (isNew) {\n                      Log.log_action(6, user_id, isCore, object_id);\n                    } else {\n                      Log.log_action(8, user_id, isCore, object_id);\n                    }\n\n                    return _context18.abrupt(\"return\", localDB.put(_objectSpread({}, document, {\n                      _rev: document._rev\n                    })));\n\n                  case 5:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            });\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  });\n}\nexport function deleteObjectOfStudy(object_id, isCore, user_id, localDB) {\n  return _regeneratorRuntime.async(function deleteObjectOfStudy$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          localDB.get(isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID).then(function (document) {\n            delete document.objects[object_id];\n            Log.log_action(9, user_id, isCore, object_id);\n            return localDB.put(_objectSpread({}, document, {\n              _rev: document._rev\n            }));\n          }).catch(function (error) {\n            console.error(error.toString());\n          });\n\n        case 1:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  });\n}\nexport function saveLayerList(user_id, objectOfStudy_id, layerList, isCore, localDB) {\n  var stratum_key,\n      kind,\n      _args21 = arguments;\n  return _regeneratorRuntime.async(function saveLayerList$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          stratum_key = _args21.length > 5 && _args21[5] !== undefined ? _args21[5] : null;\n          kind = _args21.length > 6 && _args21[6] !== undefined ? _args21[6] : null;\n          _context21.next = 4;\n          return _regeneratorRuntime.awrap(localDB.get(isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID).then(function (document) {\n            document.objects[objectOfStudy_id].layerList = layerList;\n\n            if (kind != null) {\n              switch (kind) {\n                case 0:\n                  Log.log_action(12, user_id, isCore, objectOfStudy_id, stratum_key);\n                  break;\n\n                case 1:\n                  Log.log_action(14, user_id, isCore, objectOfStudy_id, stratum_key);\n                  break;\n\n                case 2:\n                  Log.log_action(15, user_id, isCore, objectOfStudy_id, stratum_key);\n                  break;\n\n                default:\n                  break;\n              }\n            }\n\n            return localDB.put(_objectSpread({}, document, {\n              _rev: document._rev\n            }));\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 4:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  });\n}\nexport function saveStratumModule(user_id, objectOfStudy_id, index, componentKey, payload, isCore, localDB) {\n  return _regeneratorRuntime.async(function saveStratumModule$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return _regeneratorRuntime.awrap(localDB.get(isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID).then(function (document) {\n            var currentLayer = document.objects[objectOfStudy_id].layerList[index];\n\n            if (componentKey.includes('lithology')) {\n              currentLayer.lithology_data = payload;\n            } else if (componentKey.includes('structure')) {\n              currentLayer.structure_data = payload;\n            } else if (componentKey.includes('fossil')) {\n              currentLayer.fossil_data = payload;\n            } else if (componentKey.includes('image')) {\n              currentLayer.image_data = payload;\n            } else if (componentKey.includes('note')) {\n              currentLayer.note_data = payload;\n            }\n\n            return localDB.put(_objectSpread({}, document, {\n              _rev: document._rev\n            }));\n          }).catch(function (error) {\n            console.error(error.toString());\n          }));\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/genericFunctions/databaseFunctions.js"],"names":["PouchDB","Log","appConstants","publicIP","Location","Permissions","_","plugin","require","default","OUTCROPS_DOCUMENT","_id","OUTCROPS_DOCUMENT_ID","objects","CORES_DOCUMENT","CORES_DOCUMENT_ID","UNAUTHENTICATED_PROPERTIES","UNAUTHENTICATED_ID","privileges","profileImage","log","log_length","NEW_USER_PROPERTIES","DEFAULT_DOCUMENT_ID","friends","friendRequests","received","made","localLithodex","LOCAL_LITHODEX","remoteLithodex","REMOTE_GENERIC_LITHODEX","dummy_database","put","language","currentUser","remoteLog","catch","error","console","toString","unauthenticatedDB","new_database","get","then","e","logOut","document","_rev","saveUserInfo","payload","localUserDB","isNew","acquireInformation","information","userName","password","newUserDefaultDocument","newUserOutcropsDocument","newUserCoresDocument","exportLogEntries","USERNAMES_DOCUMENT_ID","userNames","updatedUser","userNameChanged","passwordChanged","remote_document","user_id","from_unauthenticated","user_ip","ip","askAsync","LOCATION","status","longitude","latitude","getCurrentPositionAsync","enableHighAccuracy","geographicLocation","JSON","stringify","coords","localDocument","localLogRemaining","LOG_DOCUMENT_ID","remoteDocument","originUser","log_entry","i","length","push","deleteUserData","localDB","remoteDB","users","outcrops","cores","deleteOwnUser","currentUserName","currentUser_id","updateRelationship","source_id","destination_id","source_database","destination_database","kind","sourceUser_doc","destinationUser_doc","saveObjectOfStudyInfo","isCore","object_id","log_action","deleteObjectOfStudy","saveLayerList","objectOfStudy_id","layerList","stratum_key","saveStratumModule","index","componentKey","currentLayer","includes","lithology_data","structure_data","fossil_data","image_data","note_data"],"mappings":"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","sourcesContent":["import PouchDB  from 'pouchdb-react-native'\nimport * as Log from './logFunctions'\nimport * as appConstants from '../constants/appConstants'\n\nimport publicIP from 'react-native-public-ip'\nimport * as Location from 'expo-location'\nimport * as Permissions from 'expo-permissions'\n\nimport _ from \"lodash\"\n\nPouchDB.plugin(require('pouchdb-adapter-asyncstorage').default);\n\n/* En la siguiente página se puede ver la lista de posibles errores que puede lanzar PouchDB\n   https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-errors/src/index.js\n*/\n\n// Estructura del documento que tendrá cada usuario, el cual almacena los afloramientos\nconst OUTCROPS_DOCUMENT = {  \n\t_id:     appConstants.OUTCROPS_DOCUMENT_ID,\n\tobjects: {},\n} \n\n// Estructura del documento que tendrá cada usuario, el cual almacena los núcleos\nconst CORES_DOCUMENT = {  \n\t_id:     appConstants.CORES_DOCUMENT_ID,\n\tobjects: {},\n} \n\n// Propiedades del usuario no autenticado que interesa conocer en la base de datos local genérica\nconst UNAUTHENTICATED_PROPERTIES = { \n\t_id:          appConstants.UNAUTHENTICATED_ID,\n\tprivileges:   0,\n\tprofileImage: null,\n\tlog:          [], // Log personal que sirve para que la aplicación detecte si el usuario tiene dificultades con su manejo\n\tlog_length:   0, // Tamaño del \"log\"\n}\n\n// Propiedades que siempre son iguales en un usuario que se está registrando\nconst NEW_USER_PROPERTIES = {\n\t_id:            appConstants.DEFAULT_DOCUMENT_ID,\n\tprivileges:     0,\n\tfriends:        {}, // Objeto que funciona como lista de identificadores de usuario de los que son amigos del actual. El nombre de la propiedad es el identificador, y el valor será \"true\"\n\tfriendRequests: {received: {}, made: {}}, /* Solicitudes de amistad. El objeto \"received\" almacena los identificadores de usuario de quienes le han enviado solicitud al actual,\n\t\t\t\t\t\t\t\t                 y el objeto \"made\" almacena los de quienes el actual les ha enviado solicitud */\n}\n\n// Creamos la base de datos con la información general. Ella permite que al volver abrir la aplicación se sigan usando algunos parámetros que se\n// habían dejado antes de cerrarla, como cuál es el usuario que estaba activo y cuál es el idioma actual en la aplicación\nconst localLithodex = new PouchDB(appConstants.LOCAL_LITHODEX); \n\n// Base de datos remota genérica para todos los usuarios, que debe existir ya para cuando esta aplicación haya sido lanzada\nconst remoteLithodex = new PouchDB(appConstants.REMOTE_GENERIC_LITHODEX);\n\n// Esta función se llama cuando no se ha creado ninguna base de datos\nexport async function dummy_database() {\n\tawait localLithodex.put({\n\t\t_id:         appConstants.DEFAULT_DOCUMENT_ID, \n\t\tlanguage:    'spanish', // El idioma por defecto es el español en esta aplicación\n\t\tcurrentUser: {...UNAUTHENTICATED_PROPERTIES}, // Datos del usuario actualmente usando la aplicación en el dispositivo\n\t\tremoteLog:   [], // Mientras el usuario no esté autenticado, en este log registraremos las accciones que deberían incluirse en\n\t\t                 // el log de la base de datos remota con información común para todos los usuarios. Cuando el usuario inicie sesión,\n\t\t                 // añadimos estos registros a esa base de datos remota\n\t}).catch(function (error){\n\t\tconsole.error(error.toString());\n\t})\n\n\t// Creamos la base de datos con la información salvada por el usuario mientras no inicie sesión\n\tconst unauthenticatedDB = new PouchDB(appConstants.UNAUTHENTICATED_ID); \n\n\t/* La base de datos de cada usuario debe tener al menos tres documentos básicos: \n\t * 1) el de información general, \n\t * 2) el de los núcleos,\n\t * 3) el de los afloramientos.\n\t *\n\t * El de información general no parece ser necesario por ahora para el usuario no autenticado,\n\t * pero lo incluimos por si acaso\n\t */\n\n\t// Documento de informqación general\n\tawait unauthenticatedDB.put({ \n\t\t_id:         appConstants.DEFAULT_DOCUMENT_ID,\n\t\tprivileges:  0, // El privilegio 0 es el de un usuario normal\n\t}) \n\tawait unauthenticatedDB.put({...OUTCROPS_DOCUMENT}) // Documento con los afloramientos\n\tawait unauthenticatedDB.put({...CORES_DOCUMENT}) // Documento con los núcleos\n\n\treturn true;\n}\n\n// Esta función es utilizada por el archivo \"App.js\"\nexport async function new_database() {\n\tawait localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t.then(() => {\n\t\t\treturn true;\n\t\t})\n\t\t.catch(e => {\n\t\t\t// Si da error es porque no había una base de datos local de Lithodex en la memoria del dispositivo, así que la creamos\n\t\t\treturn dummy_database()\n\t\t});\n}\n\n// Función utilizada por MainMenu.js para cerrar la sesión de un usuario y así volver al modo de usuario no autenticado\nexport function logOut(){\n\tlocalLithodex.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t.then(function(document){\n\t\t\t// Hacemos que la información del usuario actual vuelva a ser la genérica de uno no autenticado\n\t\t\tdocument.currentUser = {...UNAUTHENTICATED_PROPERTIES};\n\t\t\treturn localLithodex.put({...document, _rev: document._rev});\n\t\t})\n\t\t.catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\t\n}\n\n// Función utilizada por el archivo UserForm.js para crear o actualizar los datos personales de un usuario\nexport async function saveUserInfo(payload, localUserDB, isNew, acquireInformation) {\n\tlet {_id, information, userName, password} = payload;\n\n\tif (isNew){\n\t\t// Documento con información general del usuario (nótese que dejamos casi todas las propiedades dentro de una sola más externa\n\t\t// llamada \"information\". Las que dejamos afuera de ella son \"userName\", \"password\" y las de NEW_USER_PROPERTIES).\n\t\tconst newUserDefaultDocument = {  \n\t\t\t...NEW_USER_PROPERTIES,\n\t\t\tinformation, userName, password, // Información obtenida del payload\n\t\t} \n\t\tconst newUserOutcropsDocument = {...OUTCROPS_DOCUMENT} // Documento que almacena los afloramientos salvados por el usuario\n\t\tconst newUserCoresDocument = {...CORES_DOCUMENT} // Documento que almacena los núcleos salvados por el usuario\n\n\t\t// Caso en que se desea que el nuevo usuario adquiera la información del usuario no autenticado\n\t\t// Esa información se elimina del usuario no autenticado, y se deja sólo en la base de datos del nuevo usuario\n\t\tif (acquireInformation){\n\t\t\tconst unauthenticatedDB = new PouchDB(appConstants.UNAUTHENTICATED_ID); \n\n\t\t\t// Adquirimos los afloramientos\n\t\t\tawait unauthenticatedDB.get(appConstants.OUTCROPS_DOCUMENT_ID)\n\t\t\t\t.then(async function(document){ \n\t\t\t\t\tnewUserOutcropsDocument.objects = await document.objects;\n\t\t\t\t\tdocument.objects = {};\n\n\t\t\t\t\tunauthenticatedDB.put({...document, _rev: document._rev});\n\t\t\t\t}).catch(function (error){\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t})\n\n\t\t\t// Adquirimos los núcleos\n\t\t\tawait unauthenticatedDB.get(appConstants.CORES_DOCUMENT_ID)\n\t\t\t\t.then(async function(document){ \n\t\t\t\t\tnewUserCoresDocument.objects = await document.objects;\n\t\t\t\t\tdocument.objects = {};\n\n\t\t\t\t\tunauthenticatedDB.put({...document, _rev: document._rev});\n\t\t\t\t}).catch(function (error){\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t})\n\n\t\t\t// Hacemos que las entradas de log que se habían registrado en la base de datos local se transfieran a la remota\n\t\t\texportLogEntries(_id, true);\n\t\t}\n\n\t\t// Salvamos la información del nuevo usuario en su base de datos local\n\t\tawait localUserDB.put(newUserDefaultDocument);\n\t\tawait localUserDB.put(newUserOutcropsDocument);\n\t\tawait localUserDB.put(newUserCoresDocument);\n\n\t\t// En la base de datos remota genérica salvamos el nombre del nuevo usuario en la tabla de usuarios\n\t\tawait remoteLithodex.get(appConstants.USERNAMES_DOCUMENT_ID)\n\t\t\t.then(function(document){\n\t\t\t\tdocument.userNames[userName] = {_id, password, privileges: 0};\n\t\t\t\treturn remoteLithodex.put({...document, _rev: document._rev});\n\t\t\t}).catch(function (error){\n\t\t\t\tconsole.error(error.toString());\n\t\t\t})\n\t} \n\telse { // Caso en que estamos modificando la información de un usuario ya creado\n\t\tawait localUserDB.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t\t.then(async function(document){  \n\t\t\t\tlet {friends, friendRequests, privileges} = document;\n\t\t\t\n\t\t\t\tconst updatedUser = {  \n\t\t\t\t\t_id: DEFAULT_DOCUMENT_ID,\n\t\t\t\t\tinformation, userName, password, // Información obtenida del payload\n\t\t\t\t\tfriends, friendRequests, privileges, // Información obtenida de document\n\t\t\t\t} \n\t\t\t\tconst userNameChanged = (document.userName != userName);\n\t\t\t\tconst passwordChanged = (document.password != password);\n\n\t\t\t\t// Caso en que el nombre de usuario cambió, o la contraseña cambió\n\t\t\t\tif (userNameChanged || passwordChanged) {\n\t\t\t\t\tawait remoteLithodex.get(appConstants.USERNAMES_DOCUMENT_ID)\n\t\t\t\t\t\t.then(async function(remote_document){\n\t\t\t\t\t\t\tremote_document.userNames[userName] = {_id, password, privileges}; \n\t\t\t\t\t\t\tif (userNameChanged){\n\t\t\t\t\t\t\t\tdelete remote_document.userNames[document.userName]; \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn remoteLithodex.put({...remote_document, _rev: remote_document._rev});\n\t\t\t\t\t\t}).catch(function (error){\n\t\t\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tdocument = updatedUser;\n\t\t\t\treturn localUserDB.put({...document, _rev: document._rev});\n\t\t\t\t\n\t\t\t}).catch(function (error){\n\t\t\t\tconsole.error(error.toString());\n\t\t\t})\t\n\t}\t\n\n\t// En la base de datos local genérica indicamos que el usuario actual es el que se acaba de registrar, o si estaba registrado,\n\t// indicamos los nuevos datos pertinentes.\n\tawait localLithodex.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t.then(function(document){\n\t\t\tdocument.currentUser._id = _id;\n\t\t\tdocument.currentUser.profileImage = information.profileImage;\n\t\t\treturn localLithodex.put({...document, _rev: document._rev});\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n// Función utilizada tanto por UserForm.js como por Login.js para transferir los registros de log del usuario \n// que por falta de conectividad se hayan tenido que almacenar localmente, a la base de datos remota genérica de todos los usuarios\nexport async function exportLogEntries(user_id, from_unauthenticated = true){\n\n\tconsole.log(\"\\n\\nEntré en exportLogEntries\")\n\n\t// Determinamos la dirección ip del usuario\n\tlet user_ip = null;\n\tawait publicIP()\n\t.then(ip => {\n\t\tuser_ip = ip;\n\t})\n\n\t// Determinamos la localización geográfica del usuario\n\tlet { status } = await Permissions.askAsync(Permissions.LOCATION);\n\tif (status !== 'granted') {\n\t\tvar longitude = 'Undetermined';\n\t\tvar latitude  = 'Undetermined';\n\t}\n\telse {\n\t\tconst geographicLocation = await Location.getCurrentPositionAsync({enableHighAccuracy: true});\n\t\tvar longitude = JSON.stringify(geographicLocation.coords.longitude);\n\t\tvar latitude  = JSON.stringify(geographicLocation.coords.latitude);\n\t}\n\n\tlocalLithodex.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t.then(async function(localDocument){\n\t\t\tlet localLogRemaining = []; // Tendrá lo que sea necesario mantener del log que vamos a transferir\n\n\t\t\tawait remoteLithodex.get(appConstants.LOG_DOCUMENT_ID)\n\t\t\t\t.then(async function(remoteDocument){\n\t\t\t\t\tlet log               = localDocument.remoteLog;\t\t\t\n\t\t\t\t\tconst originUser      = (from_unauthenticated ? appConstants.UNAUTHENTICATED_ID : user_id)\n\t\t\t\t\tlet log_entry         = null;\n\n\t\t\t\t\tfor (i=0; i < log.length; i++){\n\t\t\t\t\t\tlog_entry = log[i];\n\t\t\t\t\t\tif (log_entry[\"user_id\"] == originUser){\n\t\t\t\t\t\t\t// Añadimos los valores faltantes que sean necesarios\n\t\t\t\t\t\t\tif (log_entry[\"user_ip\"] == null){\n\t\t\t\t\t\t\t\tlog_entry[\"user_ip\"] = user_ip;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (log_entry[\"latitude\"] == null){\n\t\t\t\t\t\t\t\tlog_entry[\"latitude\"] = latitude;\n\t\t\t\t\t\t\t\tlog_entry[\"longitude\"] = longitude;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlog_entry = {\n\t\t\t\t\t\t\t\t...log_entry,\n\t\t\t\t\t\t\t\tuser_id,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait remoteDocument.log.push(log_entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tawait localLogRemaining.push(log_entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlocalDocument.remoteLog = await localLogRemaining;\n\t\t\t\t\treturn remoteLithodex.put({...remoteDocument, _rev: remoteDocument._rev});\n\t\t\t\t})\n\t\t\t\t.catch(function (error){\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t})\n\t\t\treturn localLithodex.put({...localDocument, _rev: localDocument._rev});\n\t\t})\n\t\t.catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\t\n}\n\n// PENDIENTE ---------------------- Función utilizada por Settings.js para eliminar los datos (afloramientos y núcleos) guardados por un usuario en la base de datos. No elimina su información personal.\nexport async function deleteUserData(user_id, localDB, remoteDB){\n\tlocalDB.get(DEFAULT_DOCUMENT_ID)\n\t\t.then(async function(document){  \n\t\t\tlet currentUser      = document.users[user_id]; // Usuario actual en la lista de usuarios\n\t\t\tcurrentUser.outcrops = [];\n\t\t\tcurrentUser.cores    = [];\n\t\t\treturn localDB.put({...document, _rev: document._rev});\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n// PENDIENTE ---------------------- Función utilizada por Settings.js para que un usuario se elimine a sí mismo de la base de datos\nexport async function deleteOwnUser(user_id, localDB, remoteDB){\n\tlocalDB.get(DEFAULT_DOCUMENT_ID)\n\t\t.then(async function(document){  \n\t\t\tlet currentUserName = document.users[user_id].userName;\n\n\t\t\t// Eliminamos al usuario, y también su nombre de usuario de la tabla de nombres de usuario creados\n\t\t\tdelete document.users[user_id];\n\t\t\tdelete document.userNames[currentUserName];\n\n\t\t\t// Hacemos que el usuario actual sea el no autenticado\n\t\t\tdocument.currentUser_id = 'unauthenticated';\n\n\t\t\treturn localDB.put({...document, _rev: document._rev});\n\t\t\t\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n/* Función utilizada por el archivo UserView.js. La acción que realiza depende del valor de \"kind\"\n\n\t* Si kind = 0, un usuario le está haciendo una solicitud de amistad a otro.\n\t* Si kind = 1, se está eliminando una solicitud de amistad, independientemente de si fue el mismo que la había hecho que la canceló, o el otro se la rechazó.\n\t* Si kind = 2, se está aprobando una solicitud de amistad.\n\t* Si kind = 3, se está eliminando a otro usuario de la lista de amigos\n*/\nexport async function updateRelationship(source_id, destination_id, source_database, destination_database, kind) {\n\tawait source_database.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t.then(async function(sourceUser_doc){ \n\t\t\tawait destination_database.get(appConstants.DEFAULT_DOCUMENT_ID)\n\t\t\t\t.then(async function(destinationUser_doc){\n\t\t\t\t\tif (kind == 0){ // Caso en que un usuario le hace una solicitud de amistad a otro\n\t\t\t\t\t\tsourceUser_doc.friendRequests.made[destination_id]     = true;\n\t\t\t\t\t\tdestinationUser_doc.friendRequests.received[source_id] = true;\n\t\t\t\t\t}\n\t\t\t\t\telse if (kind < 3){ // Tanto si kind es 1 como si es 2, tenemos que eliminar a los usuarios de las listas de solicitudes pendientes\n\t\t\t\t\t\tdelete sourceUser_doc.friendRequests.made[destination_id];\n\t\t\t\t\t\tdelete destinationUser_doc.friendRequests.received[source_id];\n\n\t\t\t\t\t\t// Si tenemos que aprobar una solicitud, adicionalmente tenemos que agregarlos a sus respectivas listas de amigos\n\t\t\t\t\t\tif (kind == 2){\n\t\t\t\t\t\t\tsourceUser_doc.friends[destination_id] = true;\n\t\t\t\t\t\t\tdestinationUser_doc.friends[source_id] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { // Caso en que los dos usuarios dejan de ser amigos\n\n\t\t\t\t\t\tdelete sourceUser_doc.friends[destination_id];\n\t\t\t\t\t\tdelete destinationUser_doc.friends[source_id];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn destination_database.put({...destinationUser_doc, _rev: destinationUser_doc._rev});\n\t\t\t\t}).catch(function (error){\n\t\t\t\t\tconsole.error(error.toString());\n\t\t\t\t})\n\t\t\treturn source_database.put({...sourceUser_doc, _rev: sourceUser_doc._rev});\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n// Función utilizada por el archivo ObjectForm.js para crear o actualizar un afloramiento o un núcleo\nexport async function saveObjectOfStudyInfo(payload, isCore, isNew, user_id, object_id, localDB) {\n\tawait localDB.get((isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID))\n\t\t.then(async function(document){       \n\t\t\tdocument.objects[object_id] = await payload;\n\n\t\t\t// Registramos en el \"log\" los cambios realizados\n\t\t\tif (isNew){\n\t\t\t\tLog.log_action(6, user_id, isCore, object_id);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLog.log_action(8, user_id, isCore, object_id);\n\t\t\t}\n\t\t\treturn localDB.put({...document, _rev: document._rev});\n\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n// Función utilizada por el archivo ObjectGallery.js para eliminar un afloramiento o un núcleo\nexport async function deleteObjectOfStudy(object_id, isCore, user_id, localDB) {\t\n\tlocalDB.get((isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID))\n\t\t.then(function(document){           \n\t\t\tdelete document.objects[object_id];\n\n\t\t\t// Registramos esto en el \"log\"\n\t\t\tLog.log_action(9, user_id, isCore, object_id);\n\n\t\t\treturn localDB.put({...document, _rev: document._rev})\n\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n// Función utilizada por ObjectStratumForm.js cuando se añade, edita o elimina un estrato,\n// y también por ObjectScreen.js cuando se elimina un estrato límite (el superior o el inferior)\nexport async function saveLayerList(user_id, objectOfStudy_id, layerList, isCore, localDB, stratum_key=null, kind=null){\n\t/* kind puede ser: \n\t\t0 -> Estamos agregando un estrato nuevo\n\t\t1 -> Estamos modificando un estrato ya existente\n\t\t2 -> Estamos eliminando un estrato\n\t*/\n\n\tawait localDB.get((isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID))\n\t\t.then(function(document){\n\t\t\t// Guardamos la nueva lista de estratos en el núcleo o afloramiento correspondiente\n\t\t\tdocument.objects[objectOfStudy_id].layerList = layerList; \n\n\t\t\tif (kind != null){\n\t\t\t\t// Colocamos en el \"log\" los cambios realizados\n\t\t\t\tswitch (kind){\n\t\t\t\t\tcase 0: \n\t\t\t\t\t\tLog.log_action(12, user_id, isCore, objectOfStudy_id, stratum_key);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tLog.log_action(14, user_id, isCore, objectOfStudy_id, stratum_key);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tLog.log_action(15, user_id, isCore, objectOfStudy_id, stratum_key); \n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn localDB.put({...document, _rev: document._rev});\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}\n\n/* Esta función es utilizada por los archivos FossilPicker.js, ImagePicker.js, etc.,\n   para guardar los datos que se acaban de modificar de un estrato*/\nexport async function saveStratumModule(user_id, objectOfStudy_id, index, componentKey, payload, isCore, localDB){\n\tawait localDB.get((isCore ? appConstants.CORES_DOCUMENT_ID : appConstants.OUTCROPS_DOCUMENT_ID))\n\t\t.then(function(document){\n\t\t\t// Estrato a modificar del núcleo o afloramiento correspondiente\n\t\t\tconst currentLayer = document.objects[objectOfStudy_id].layerList[index]; \n\n\t\t\tif (componentKey.includes('lithology')){\n\t\t\t\tcurrentLayer.lithology_data = payload;\n\t\t\t} else if (componentKey.includes('structure')){\n\t\t\t\tcurrentLayer.structure_data = payload;\n\t\t\t} else if (componentKey.includes('fossil')){\n\t\t\t\tcurrentLayer.fossil_data    = payload;\n\t\t\t} else if (componentKey.includes('image')){\n\t\t\t\tcurrentLayer.image_data     = payload;\n\t\t\t} else if (componentKey.includes('note')){\n\t\t\t\tcurrentLayer.note_data      = payload;\n\t\t\t}\n\t\n\t\t\treturn localDB.put({...document, _rev: document._rev})\n\t\t}).catch(function (error){\n\t\t\tconsole.error(error.toString());\n\t\t})\n}"]},"metadata":{},"sourceType":"module"}