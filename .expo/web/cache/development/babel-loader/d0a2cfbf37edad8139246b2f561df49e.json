{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\App.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Provider } from 'react-redux';\nimport configureStore from \"./src/redux/store/configureStore\";\nimport * as Database from \"./src/genericFunctions/databaseFunctions\";\nimport RootComponent from \"./RootComponent\";\nvar store = configureStore();\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      dontRender: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Database.new_database());\n\n            case 2:\n              this.setState({\n                dontRender: false\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.dontRender) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      }, React.createElement(Provider, {\n        store: store,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }\n      }, React.createElement(RootComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/App.js"],"names":["React","Component","Provider","configureStore","Database","RootComponent","store","App","props","state","dontRender","new_database","setState","flex"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAIA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,cAAP;AAEA,OAAO,KAAKC,QAAZ;AACA,OAAOC,aAAP;AAIA,IAAMC,KAAK,GAAGH,cAAc,EAA5B;;IAesBI,G;;;AAErB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACZC,MAAAA,UAAU,EAAE;AADA,KAAb;AAFkB;AAKlB;;;;;;;;;;+CAGMN,QAAQ,CAACO,YAAT,E;;;AACN,mBAAKC,QAAL,CAAc;AAACF,gBAAAA,UAAU,EAAE;AAAb,eAAd;;;;;;;;;;;6BAGQ;AACR,UAAI,KAAKD,KAAL,CAAWC,UAAf,EAA0B;AACzB,eAAQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACA;;AAKD,aACC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AAACG,UAAAA,IAAI,EAAC;AAAN,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAIP,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADD,CADD;AAOA;;;;EA7BgCL,S;;SAAZM,G","sourcesContent":["import React, { Component } from 'react';\nimport { View } from 'react-native';\n\n// Importamos los archivos de redux\nimport { Provider } from 'react-redux'\nimport configureStore from './src/redux/store/configureStore' // Función creada por nosotros para obtener nuestra tienda Redux  \n\nimport * as Database  from './src/genericFunctions/databaseFunctions'\nimport RootComponent from './RootComponent'\n\n\n// Store de Redux\nconst store = configureStore();\n\n\n/* Originalmente, en este mismo código se creaba el AppNavigator y el AppContainer, y el AppContainer\n lo invocábamos en donde ahora se hace la llamada a <RootComponent/>. Sin embargo, los movimos al archivo\n separado RootComponent.js.\n\n Eso se debe a que el AppStackContainer que creamos en ese archivo recibe unos parámetros a través de screenProps que deben actualizarse\n cuando ocurre un cambio en ellos en la Tienda Redux. Tenerlos en ese archivo aparte permite visualizar esos cambios porque accedemos a\n ellos a través de la función connect, lo cual no puede hacerse aquí porque apenas aquí es cuando estamos creando la Tienda.\n\n Esta solución se logró basándose en:\n https://github.com/react-navigation/react-navigation/issues/2435\n */\n\n export default class App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdontRender: true,\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tawait Database.new_database()\n\t\tthis.setState({dontRender: false})\n\t}\n\n\trender() {\n\t\tif (this.state.dontRender){\n\t\t\treturn (<View/>)\t\n\t\t}\n\t\t/* Se intentó crear en esta misma vista el AppStackContainer de RootComponent e invocarlo aquí donde se invoca RootComponent.\n\t\t    Para obtener los datos de la Tienda Redux que luego se le pasan como parámetros en \"screenProps\", se usaba la función\n\t\t    store.getState(), que nos permite obtener el estado (árbol de reductores) de la Tienda. Pero como ya se dijo, de esa forma\n\t\t    no se actualizaban los datos de screenProps cuando en la Tienda Redux cambiaba alguno de esos parámetros */\n\t\treturn (\n\t\t\t<View style = {{flex:1}}>\n\t\t\t\t<Provider store = {store}>\n\t\t\t\t\t<RootComponent/>\n\t\t\t\t</Provider>\n\t\t\t</View>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}