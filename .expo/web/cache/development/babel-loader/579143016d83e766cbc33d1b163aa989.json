{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\GoogleMaps.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport MapView from 'react-native-maps';\nimport View from \"react-native-web/dist/exports/View\";\nimport ButtonNoIcon from \"react-native-web/dist/exports/Button\";\nimport { connect } from 'react-redux';\nimport { GoogleMaps_Texts } from \"../languages/screens/GoogleMaps\";\nimport { genericStyles, DARK_GRAY_COLOR } from \"../constants/genericStyles\";\n\nvar GoogleMaps = function (_Component) {\n  _inherits(GoogleMaps, _Component);\n\n  function GoogleMaps(props) {\n    _classCallCheck(this, GoogleMaps);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleMaps).call(this, props));\n  }\n\n  _createClass(GoogleMaps, [{\n    key: \"render\",\n    value: function render() {\n      var p = this.props;\n      var s = this.state;\n      return React.createElement(View, {\n        style: genericStyles.lightGray_background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        }\n      }, React.createElement(View, {\n        style: genericStyles.white_background_with_ScrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        }\n      }, React.createElement(MapView, {\n        style: {\n          flex: 1\n        },\n        region: {\n          latitude: p.navigation.getParam('latitude')[0],\n          longitude: p.navigation.getParam('longitude')[0],\n          latitudeDelta: 0.0143,\n          longitudeDelta: 0.0134\n        },\n        showsUserLocation: true,\n        loadingEnabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        }\n      })), React.createElement(View, {\n        style: genericStyles.down_buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        }\n      }, React.createElement(ButtonNoIcon, {\n        raised: true,\n        title: p.allMessages[1],\n        color: DARK_GRAY_COLOR,\n        onPress: function onPress() {\n          p.navigation.goBack();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      })));\n    }\n  }]);\n\n  return GoogleMaps;\n}(Component);\n\nGoogleMaps.navigationOptions = function (_ref) {\n  var screenProps = _ref.screenProps;\n  return {\n    title: GoogleMaps_Texts[screenProps.language][0],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader)\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allMessages: GoogleMaps_Texts[state.appPreferencesReducer.language]\n  };\n};\n\nexport default connect(mapStateToProps)(GoogleMaps);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/GoogleMaps.js"],"names":["React","Component","MapView","connect","GoogleMaps_Texts","genericStyles","DARK_GRAY_COLOR","GoogleMaps","props","p","s","state","lightGray_background","white_background_with_ScrollView","flex","latitude","navigation","getParam","longitude","latitudeDelta","longitudeDelta","down_buttons","allMessages","goBack","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","mapStateToProps","appPreferencesReducer"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AAIA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT;AACA,SAASC,aAAT,EAAwBC,eAAxB;;IAEMC,U;;;AAEL,sBAAYC,KAAZ,EAAkB;AAAA;;AAAA,mFACXA,KADW;AAEjB;;;;6BAYO;AACP,UAAIC,CAAC,GAAG,KAAKD,KAAb;AACA,UAAIE,CAAC,GAAG,KAAKC,KAAb;AAEA,aACC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAIN,aAAa,CAACO,oBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAIP,aAAa,CAACQ,gCAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,OAAD;AACC,QAAA,KAAK,EAAK;AAACC,UAAAA,IAAI,EAAE;AAAP,SADX;AAEC,QAAA,MAAM,EAAI;AACTC,UAAAA,QAAQ,EAAGN,CAAC,CAACO,UAAF,CAAaC,QAAb,CAAsB,UAAtB,EAAkC,CAAlC,CADF;AAETC,UAAAA,SAAS,EAAET,CAAC,CAACO,UAAF,CAAaC,QAAb,CAAsB,WAAtB,EAAmC,CAAnC,CAFF;AAGTE,UAAAA,aAAa,EAAG,MAHP;AAITC,UAAAA,cAAc,EAAE;AAJP,SAFX;AAQC,QAAA,iBAAiB,MARlB;AASC,QAAA,cAAc,MATf;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CAFD,EAiBC,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAIf,aAAa,CAACgB,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC,oBAAC,YAAD;AACC,QAAA,MAAM,MADP;AAEC,QAAA,KAAK,EAAMZ,CAAC,CAACa,WAAF,CAAc,CAAd,CAFZ;AAGC,QAAA,KAAK,EAAMhB,eAHZ;AAIC,QAAA,OAAO,EAAI,mBAAM;AAACG,UAAAA,CAAC,CAACO,UAAF,CAAaO,MAAb;AAAsB,SAJzC;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CAjBD,CADD;AA6BA;;;;EAjDuBtB,S;;AAAnBM,U,CAOEiB,iB,GAAoB;AAAA,MAAGC,WAAH,QAAGA,WAAH;AAAA,SAAsB;AAChDC,IAAAA,KAAK,EAAYtB,gBAAgB,CAACqB,WAAW,CAACE,QAAb,CAAhB,CAAuC,CAAvC,CAD+B;AAEhDC,IAAAA,eAAe,EAAEH,WAAW,CAACG,eAFmB;AAGhDC,IAAAA,WAAW;AACVC,MAAAA,eAAe,EAAEL,WAAW,CAACM;AADnB,OAEP1B,aAAa,CAAC2B,gBAFP;AAHqC,GAAtB;AAAA,C;;AA8C5B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACtB,KAAD,EAAW;AAClC,SAAO;AACNW,IAAAA,WAAW,EAAElB,gBAAgB,CAACO,KAAK,CAACuB,qBAAN,CAA4BP,QAA7B;AADvB,GAAP;AAGA,CAJD;;AAMA,eAAexB,OAAO,CAAC8B,eAAD,CAAP,CAAyB1B,UAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport MapView from 'react-native-maps'\n\nimport { View, Button as ButtonNoIcon, } from 'react-native';\n\nimport { connect } from 'react-redux'\nimport { GoogleMaps_Texts } from '../languages/screens/GoogleMaps'\nimport { genericStyles, DARK_GRAY_COLOR }    from '../constants/genericStyles'\n\nclass GoogleMaps extends Component{\n\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle:           GoogleMaps_Texts[screenProps.language][0],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t}\n\t});\n\n\trender(){\n\t\tlet p = this.props;\n\t\tlet s = this.state;\n\t\t\n\t\treturn(\n\t\t\t<View style = {genericStyles.lightGray_background}>\n\t\t\t\t{/*En esta parte se muestra el mapa*/}\n\t\t\t\t<View style = {genericStyles.white_background_with_ScrollView}>\n\t\t\t\t\t<MapView\n\t\t\t\t\t\tstyle  = {{flex: 1}}\n\t\t\t\t\t\tregion = {{\n\t\t\t\t\t\t\tlatitude:  p.navigation.getParam('latitude')[0],\n\t\t\t\t\t\t\tlongitude: p.navigation.getParam('longitude')[0],\n\t\t\t\t\t\t\tlatitudeDelta:  0.0143,\n\t\t\t\t\t\t\tlongitudeDelta: 0.0134,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tshowsUserLocation\n\t\t\t\t\t\tloadingEnabled\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\n\t\t\t\t{/*//Vista del botón \"Volver\"*/}\n\t\t\t\t<View style = {genericStyles.down_buttons}>\n\n\t\t\t\t\t<ButtonNoIcon \n\t\t\t\t\t\traised\n\t\t\t\t\t\ttitle   = {p.allMessages[1]} // Mensaje: \"Volver\"\n\t\t\t\t\t\tcolor   = {DARK_GRAY_COLOR}\n\t\t\t\t\t\tonPress = {() => {p.navigation.goBack()}}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n/// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tallMessages: GoogleMaps_Texts[state.appPreferencesReducer.language],  \n\t}\n};\n\nexport default connect(mapStateToProps)(GoogleMaps);"]},"metadata":{},"sourceType":"module"}