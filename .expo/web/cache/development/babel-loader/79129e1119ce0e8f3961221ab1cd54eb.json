{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\RootComponent.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { createAppContainer } from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { connect } from 'react-redux';\nimport { changeLanguage } from \"./src/redux/actions/appPreferencesActions\";\nimport { changeUser, changeUserProfileImage, changeUserPrivileges } from \"./src/redux/actions/userActions\";\nimport * as Screens from \"./src/screens\";\nimport globalTest from \"./src/globalTest\";\nimport PouchDB from 'pouchdb-react-native';\nimport { DEFAULT_DOCUMENT_ID, LOCAL_LITHODEX } from \"./src/constants/appConstants\";\nvar AppStackNavigator = createStackNavigator({\n  MainMenu: {\n    screen: Screens.MainMenu\n  },\n  UserForm: {\n    screen: Screens.UserForm\n  },\n  Login: {\n    screen: Screens.Login\n  },\n  AboutLithoDex: {\n    screen: Screens.AboutLithoDex\n  },\n  Settings: {\n    screen: Screens.Settings\n  },\n  GoogleMaps: {\n    screen: Screens.GoogleMaps\n  },\n  ConsultLog: {\n    screen: Screens.ConsultLog\n  },\n  ObjectGallery: {\n    screen: Screens.ObjectGallery\n  },\n  ObjectForm: {\n    screen: Screens.ObjectForm\n  },\n  ObjectScreen: {\n    screen: Screens.ObjectScreen\n  },\n  ObjectStratumForm: {\n    screen: Screens.ObjectStratumForm\n  },\n  ContactUsersRootComponent: {\n    screen: Screens.ContactUsersRootComponent\n  },\n  UserView: {\n    screen: Screens.UserView\n  }\n});\nvar AppStackContainer = createAppContainer(AppStackNavigator);\n\nvar RootComponent = function (_Component) {\n  _inherits(RootComponent, _Component);\n\n  function RootComponent(props) {\n    var _this;\n\n    _classCallCheck(this, RootComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RootComponent).call(this, props));\n    _this.state = {\n      loading: true,\n      currentIp: null,\n      testsFulfilled: false\n    };\n    return _this;\n  }\n\n  _createClass(RootComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var localLithodex;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.setState({\n                testsFulfilled: globalTest()\n              });\n              localLithodex = new PouchDB(LOCAL_LITHODEX);\n              localLithodex.get(DEFAULT_DOCUMENT_ID).then(function (database) {\n                _this2.props.dispatchChangeLanguage(database.language);\n\n                var cu = database.currentUser;\n\n                _this2.props.dispatchUser(cu._id);\n\n                _this2.props.dispatchProfileImage(cu.profileImage);\n\n                _this2.props.dispatchUserPrivileges(cu.privileges);\n              }).catch(function (error) {\n                console.error(error.toString());\n              });\n              this.setState({\n                loading: false\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          }\n        });\n      }\n\n      if (this.state.testsFulfilled) {\n        return React.createElement(AppStackContainer, {\n          screenProps: {\n            language: this.props.language,\n            headerTintColor: this.props.headerTintColor,\n            headerBackgroundColor: this.props.headerBackgroundColor,\n            function: this.props.function\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          }\n        });\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        }\n      }, \"Not all the tests were fulfilled\"));\n    }\n  }]);\n\n  return RootComponent;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    language: state.appPreferencesReducer.language,\n    headerTintColor: state.appPreferencesReducer.headerTintColor,\n    headerBackgroundColor: state.appPreferencesReducer.headerBackgroundColor,\n    function: state.popUpReducer.stackScreenPropsFunction\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchChangeLanguage: function dispatchChangeLanguage(language) {\n      return dispatch(changeLanguage(language));\n    },\n    dispatchUser: function dispatchUser(user_id) {\n      return dispatch(changeUser(user_id));\n    },\n    dispatchProfileImage: function dispatchProfileImage(image) {\n      return dispatch(changeUserProfileImage(image));\n    },\n    dispatchUserPrivileges: function dispatchUserPrivileges(privileges) {\n      return dispatch(changeUserPrivileges(privileges));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RootComponent);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/RootComponent.js"],"names":["React","Component","createAppContainer","createStackNavigator","connect","changeLanguage","changeUser","changeUserProfileImage","changeUserPrivileges","Screens","globalTest","PouchDB","DEFAULT_DOCUMENT_ID","LOCAL_LITHODEX","AppStackNavigator","MainMenu","screen","UserForm","Login","AboutLithoDex","Settings","GoogleMaps","ConsultLog","ObjectGallery","ObjectForm","ObjectScreen","ObjectStratumForm","ContactUsersRootComponent","UserView","AppStackContainer","RootComponent","props","state","loading","currentIp","testsFulfilled","setState","localLithodex","get","then","database","dispatchChangeLanguage","language","cu","currentUser","dispatchUser","_id","dispatchProfileImage","profileImage","dispatchUserPrivileges","privileges","catch","error","console","toString","headerTintColor","headerBackgroundColor","function","flex","justifyContent","alignItems","textAlign","mapStateToProps","appPreferencesReducer","popUpReducer","stackScreenPropsFunction","mapDispatchToProps","dispatch","user_id","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\n\nimport { createAppContainer }   from 'react-navigation';\nimport { createStackNavigator } from 'react-navigation-stack';\n\n// Importamos los archivos de redux\nimport { connect } from 'react-redux'\nimport { changeLanguage } from './src/redux/actions/appPreferencesActions'\nimport { changeUser, changeUserProfileImage, changeUserPrivileges } from './src/redux/actions/userActions'\n\n// Aquí importamos todas las ventanas creadas\nimport * as Screens from './src/screens'\n\nimport globalTest from './src/globalTest'\n\nimport PouchDB from 'pouchdb-react-native'\nimport { DEFAULT_DOCUMENT_ID, LOCAL_LITHODEX } from './src/constants/appConstants'\n\n// Aquí establecemos cuáles serán las ventanas que tendrá nuestra aplicación\nconst AppStackNavigator = createStackNavigator({\n\n\t// Vista inicial en la que el usuario tiene la opción de dirigirse a cualquiera de las galerías, \n\t// ir al menú de configuración, ir a la información de la aplicación, consultar el log, o ir al módulo de contactar usuarios.\n\tMainMenu: {screen: Screens.MainMenu},\n\n\t// ----------------------------- Vistas genéricas -------------------------------\n\n\t// Formulario en el que el usuario rellena sus datos\n\tUserForm: {screen: Screens.UserForm},\n\n\t// Formulario en el que el usuario inicia sesión\n\tLogin: {screen: Screens.Login},\n\n\t// Información de esta aplicación, como los profesores tutores y los desarrolladores\n\tAboutLithoDex: {screen: Screens.AboutLithoDex},\n\n\t// Aquí el usuario tiene la opción de configurar la aplicación, como borrar la base de datos completa, cambiar el idioma, etc.\n\tSettings: {screen: Screens.Settings},\n\n\t// Aquí se ve la localización de un afloramiento o de un núcleo en Google Maps\n\tGoogleMaps: {screen: Screens.GoogleMaps},\n\n\t// Aquí el administrador tiene la capacidad de visualizar el \"log\"\n\tConsultLog: {screen: Screens.ConsultLog},\n\n\t// ----- Vistas referentes a objetos de estudio : afloramientos o núcleos -------\n\n\t// Vista donde se despliegan todos los afloramientos o núcleos creados por el usuario actual\n\tObjectGallery: {screen: Screens.ObjectGallery},\n\n\t// Vista donde el usuario rellena los campos de un nuevo afloramiento o núcleo\n\tObjectForm: {screen: Screens.ObjectForm},\n\n\t// Vista donde el usuario rellena los campos de un nuevo afloramiento o núcleo\n\tObjectScreen: {screen: Screens.ObjectScreen},\n\n\t// Vista donde el usuario rellena los campos de un nuevo estrato de un afloramiento o núcleo\n\tObjectStratumForm: {screen: Screens.ObjectStratumForm},\n\n\t// ---------------- Vistas referentes a contactar otros usuarios -----------------\n\n\t// Módulo que tiene varias vistas referentes a contactar a otros usuarios\n\tContactUsersRootComponent: {screen: Screens.ContactUsersRootComponent},\n\n\t// Vista en la que un usuario ve la información de otro usuario, pudiendo añadirlo como amigo o enviarle un mensaje\n\tUserView: {screen: Screens.UserView},\n});\n\nconst AppStackContainer = createAppContainer(AppStackNavigator);\n\n\n/* Si no se quiere que se utilicen los valores iniciales de la tienda de Redux sino que por el contrario se desea que al iniciar la aplicación\n   se carguen algunos datos desde la base de datos y se despachen a la tienda, ésta es la clase en la que se debe hacer */\nclass RootComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tloading:        true,\n\t\t\tcurrentIp:      null,\n\t\t\ttestsFulfilled: false,\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\t// Aquí verificamos si se pasaron todas las pruebas\n\t\tthis.setState({testsFulfilled: globalTest()})\n\n\t\t// Actualizamos datos de la aplicación local según se hayan guardado en la base de datos del dispositivo\n\t\tconst localLithodex = new PouchDB(LOCAL_LITHODEX); \n\t\tlocalLithodex.get(DEFAULT_DOCUMENT_ID)\n\t\t\t.then(database => {\n\t\t\t\t// El idioma en la aplicación será el mismo usado la última vez\n\t\t\t\tthis.props.dispatchChangeLanguage(database.language); \n\n\t\t\t\t// Se mantiene el mismo usuario que estaba activo antes de cerrar la aplicación\n\t\t\t\tlet cu = database.currentUser;\n\t\t\t\tthis.props.dispatchUser(cu._id);\n\t\t\t\tthis.props.dispatchProfileImage(cu.profileImage);\n\t\t\t\tthis.props.dispatchUserPrivileges(cu.privileges);\n\t\t\t}).catch(function (error){\n\t\t\t\tconsole.error(error.toString());\n\t\t\t})\n\n\t\t// Aquí le indicamos a \"render\" que ya puede comenzar a mostrar la aplicación\n\t\tthis.setState({loading: false});\n\t}\n\n\trender() {\n\t\tif (this.state.loading){\n\t\t\treturn ( <View/> )\n\t\t}\n\n\t\tif (this.state.testsFulfilled){\n\t\t\treturn (\n\t\t\t\t<AppStackContainer \n\t\t\t\t\tscreenProps = {{\n\t\t\t\t\t\tlanguage:              this.props.language,\n\t\t\t\t\t\theaderTintColor:       this.props.headerTintColor, \n\t\t\t\t\t\theaderBackgroundColor: this.props.headerBackgroundColor,\n\n\t\t\t\t\t\t/* Esta función sirve para aplicarla en la cabecera de una vista. Recuérdese que en las cabeceras sólo\n\t\t\t\t\t\t   tenemos acceso a \"screenProps\", \"navigation\" y \"navigationOptions\", por lo que en una vista respectiva\n\t\t\t\t\t\t   la cabecera no tendrá acceso a ninguno de sus métodos a través de \"this\". Así que la despachamos con Redux\n\n\t\t\t\t\t\t   Ahora bien, esta variable en realidad almacena un objeto JavaScript con una propiedad 'ref' en la cual es que\n\t\t\t\t\t\t   realmente estará la función, ya que si la almacenara a ella directamente, la aplicación consideraría que \n\t\t\t\t\t\t   constantemente se está actualizando el estado de la tienda Redux*/\n\t\t\t\t\t\tfunction: this.props.function, \n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)\n\t\t}\n\t\t// Caso en que no fueron satisfechas todas las pruebas\n\t\treturn(\n\t\t\t<View style = {{flex: 1, justifyContent: 'center', alignItems: 'center'}}>\n\t\t\t\t<Text style = {{textAlign: 'center'}}>Not all the tests were fulfilled</Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\n// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tlanguage:              state.appPreferencesReducer.language, \n\t\theaderTintColor:       state.appPreferencesReducer.headerTintColor, \n\t\theaderBackgroundColor: state.appPreferencesReducer.headerBackgroundColor, \n\t\tfunction:              state.popUpReducer.stackScreenPropsFunction,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchChangeLanguage: (language) => dispatch(changeLanguage(language)),\n\t\tdispatchUser:           (user_id)  => dispatch(changeUser(user_id)),\n\t\tdispatchProfileImage:   (image) => dispatch(changeUserProfileImage(image)),\n\t\tdispatchUserPrivileges: (privileges) => dispatch(changeUserPrivileges(privileges)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RootComponent);"]},"metadata":{},"sourceType":"module"}