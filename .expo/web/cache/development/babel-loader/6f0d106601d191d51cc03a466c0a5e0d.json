{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\Ronald\\\\Documents\\\\Universidad\\\\Miniproyecto\\\\Proyecto final - geolog\\xEDa\\\\Versiones de la aplicaci\\xF3n\\\\lithodex\\\\src\\\\screens\\\\contactUsers\\\\ContactUsersRootComponent.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { Button as ButtonWithIcon } from 'react-native-elements';\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { connect } from 'react-redux';\nimport { changeStackScreenPropsFunction } from \"../../redux/actions/popUpActions\";\nimport { createAppContainer } from 'react-navigation';\nimport { createDrawerNavigator, DrawerItems } from 'react-navigation-drawer';\nimport { ContactUsersRootComponent_Texts } from \"../../languages/screens/contactUsers/ContactUsersRootComponent\";\nimport ShowProfileImageDrawer from \"./ShowProfileImageDrawer\";\nimport ListOfAllUsers from \"./ListOfAllUsers\";\nimport ListOfFriends from \"./ListOfFriends\";\nimport ListOfUsersRequesting from \"./ListOfUsersRequesting\";\nimport { genericStyles } from \"../../constants/genericStyles\";\nvar ContactUsersNavigator = createDrawerNavigator({\n  ListOfAllUsers: {\n    screen: ListOfAllUsers\n  },\n  ListOfFriends: {\n    screen: ListOfFriends\n  },\n  ListOfUsersRequesting: {\n    screen: ListOfUsersRequesting\n  }\n}, {\n  unmountInactiveRoutes: true,\n  drawerPosition: 'right',\n  contentComponent: function contentComponent(props) {\n    return React.createElement(SafeAreaView, {\n      style: {\n        flex: 1\n      },\n      forceInset: {\n        top: 'always',\n        horizontal: 'never'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      }\n    }, React.createElement(ShowProfileImageDrawer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      }\n    }), React.createElement(ScrollView, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      }\n    }, React.createElement(DrawerItems, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      }\n    }))));\n  }\n});\nvar ContactUsersContainer = createAppContainer(ContactUsersNavigator);\n\nvar ContactUsersRootComponent = function (_Component) {\n  _inherits(ContactUsersRootComponent, _Component);\n\n  function ContactUsersRootComponent(props) {\n    _classCallCheck(this, ContactUsersRootComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ContactUsersRootComponent).call(this, props));\n  }\n\n  _createClass(ContactUsersRootComponent, [{\n    key: \"componentWillUnMount\",\n    value: function componentWillUnMount() {\n      this.props.dispatchStackScreenPropsFunction(function () {});\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        }\n      }, React.createElement(ContactUsersContainer, {\n        screenProps: {\n          stackNavigation: this.props.navigation\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        }\n      }));\n    }\n  }]);\n\n  return ContactUsersRootComponent;\n}(Component);\n\nContactUsersRootComponent.navigationOptions = function (_ref) {\n  var screenProps = _ref.screenProps;\n  return {\n    title: ContactUsersRootComponent_Texts[screenProps.language][0],\n    headerTintColor: screenProps.headerTintColor,\n    headerStyle: _objectSpread({\n      backgroundColor: screenProps.headerBackgroundColor\n    }, genericStyles.navigationHeader),\n    headerRight: React.createElement(View, {\n      style: {\n        paddingRight: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      }\n    }, React.createElement(ButtonWithIcon, {\n      onPress: function onPress() {\n        return screenProps.function.ref();\n      },\n      icon: React.createElement(Icon, {\n        name: \"navicon\",\n        size: 25,\n        color: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }),\n      type: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      }\n    }))\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    openDrawer: state.popUpReducer.loadView\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatchStackScreenPropsFunction: function dispatchStackScreenPropsFunction(globalFunction) {\n      return dispatch(changeStackScreenPropsFunction(globalFunction));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactUsersRootComponent);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/screens/contactUsers/ContactUsersRootComponent.js"],"names":["React","Component","Button","ButtonWithIcon","Icon","connect","changeStackScreenPropsFunction","createAppContainer","createDrawerNavigator","DrawerItems","ContactUsersRootComponent_Texts","ShowProfileImageDrawer","ListOfAllUsers","ListOfFriends","ListOfUsersRequesting","genericStyles","ContactUsersNavigator","screen","unmountInactiveRoutes","drawerPosition","contentComponent","props","flex","top","horizontal","ContactUsersContainer","ContactUsersRootComponent","dispatchStackScreenPropsFunction","stackNavigation","navigation","navigationOptions","screenProps","title","language","headerTintColor","headerStyle","backgroundColor","headerBackgroundColor","navigationHeader","headerRight","paddingRight","function","ref","mapStateToProps","state","openDrawer","popUpReducer","loadView","mapDispatchToProps","dispatch","globalFunction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, ScrollView, SafeAreaView} from 'react-native'\n\nimport { Button as ButtonWithIcon } from 'react-native-elements'\n\nimport Icon from 'react-native-vector-icons/FontAwesome'\n\nimport { connect } from 'react-redux'\nimport { changeStackScreenPropsFunction } from '../../redux/actions/popUpActions'\nimport { createAppContainer } from 'react-navigation'\nimport { createDrawerNavigator, DrawerItems } from 'react-navigation-drawer'\n\nimport { ContactUsersRootComponent_Texts } from '../../languages/screens/contactUsers/ContactUsersRootComponent'\nimport ShowProfileImageDrawer from './ShowProfileImageDrawer'\n\nimport ListOfAllUsers from './ListOfAllUsers'\nimport ListOfFriends from './ListOfFriends'\nimport ListOfUsersRequesting from './ListOfUsersRequesting'\n\nimport { genericStyles } from '../../constants/genericStyles'\n\n\n/* El propósito de esta vista es crear el Drawer Navigator que contendrá las demás vistas relacionadas\n   con contactar a otros usuarios. Además, muestra la imagen de perfil del usuario */ \n\n// Aquí establecemos cuáles serán las ventanas que tendrá este módulo\nconst ContactUsersNavigator = createDrawerNavigator(\n\t// Rutas a las distintas ventanas de este navegador\n\t{\n\t\tListOfAllUsers:        {screen: ListOfAllUsers},\n\t\tListOfFriends:         {screen: ListOfFriends},\n\t\tListOfUsersRequesting: {screen: ListOfUsersRequesting},\n\t},\n\n\t// Opciones del navegador. Ver: https://reactnavigation.org/docs/4.x/drawer-navigator/  y   \n\t// https://www.codota.com/code/javascript/classes/react-navigation/DrawerItems\n\t{\n\t\t// Esto evita que se sigan activando las funciones de cargar desde base de datos en las vistas que abandonamos cuando la variable \"loadView\"\n\t\t// que está en la Tienda Redux se haga verdadera\n\t\tunmountInactiveRoutes: true, \n\n\t\t// Es necesario ubicarlo a la derecha para que esté justo debajo del botón que permite abrirlo. Dicho botón no se puede\n\t\t// colocar a la izquierda porque de lo contrario ocultamos el botón del StackNavigator de regresar a la vista anterior.\n\t\tdrawerPosition: 'right',\n\n\t\tcontentComponent: props => {\n\t\t\treturn(\n\t\t\t\t<SafeAreaView  style={{flex: 1}}  forceInset={{ top: 'always', horizontal: 'never' }}>\n\t\t\t\t\t{/*En esta parte se muestra la imagen de perfil del usuario*/}\n\t\t\t\t\t<ShowProfileImageDrawer/>\n\n\t\t\t\t\t{/*En esta parte vemos los botones para navegar a otras pestañas*/}\n\t\t\t\t\t<ScrollView>\n\t\t\t\t\t\t<DrawerItems {...props} />\t\n\t\t\t\t\t</ScrollView>\n\t\t\t\t</SafeAreaView>\n\t\t\t)\n\t\t}\n\t}\n);\n\nconst ContactUsersContainer = createAppContainer(ContactUsersNavigator);\n\n\nclass ContactUsersRootComponent extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props) \n\t}\n\n\t// Formato de la cabecera de la vista\n\tstatic navigationOptions = ({ screenProps }) => ({\n\t\ttitle:           ContactUsersRootComponent_Texts[screenProps.language][0],\n\t\theaderTintColor: screenProps.headerTintColor,\n\t\theaderStyle: {\n\t\t\tbackgroundColor: screenProps.headerBackgroundColor,\n\t\t\t...genericStyles.navigationHeader,\n\t\t},\n\t\t// Aquí colocamos el botón que permite abrir el Drawer Navigator. Las vistas de dicho navegador son las que se encargan,\n\t\t// a través de Redux, de hacer que \"screenProps.function.ref\" almacene la función que hace eso.\n\t\theaderRight: (\n\t\t\t<View style = {{paddingRight: 5}}>\n\t\t\t\t<ButtonWithIcon\n\t\t\t\t\tonPress = {() => screenProps.function.ref()}\n\t\t\t\t\ticon    = {<Icon  name=\"navicon\"  size={25}  color=\"white\"/>}\n\t\t\t\t\ttype    = 'clear'\n\t\t\t\t/>\n\t\t\t</View>\n\t\t),\n\t});\n\n\t/// Al salir de esta ventana liberamos la función global de ScreenProps del StackNavigator\n\tcomponentWillUnMount(){\n\t\tthis.props.dispatchStackScreenPropsFunction(() => {});\n\t}\n\n\t// Aquí mostramos el Drawer Navigator\n\trender() {\n\t\treturn (\n\t\t\t<View style = {{flex:1}}>\n\t\t\t\t<ContactUsersContainer\n\t\t\t\t\tscreenProps = {{\n\t\t\t\t\t\t/* Esto sirve para que las vistas de este nuevo navegador puedan llamar a las del navegador de pila.\n\t\t\t\t\t\t   Además, dichas vistas pueden acceder al screenProps del de pila a través de \"this.props.screenProps.stackNavigation.getScreenProps()\".\n\t\t\t\t\t\t */\n\t\t\t\t\t\tstackNavigation: this.props.navigation,                                     \n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</View>\t\n\t\t)\n\t}\n}\n\n/// Función para obtener las variables deseadas desde el estado global de la tienda Redux\nconst mapStateToProps = (state) => {\n\treturn ({\n\t\topenDrawer: state.popUpReducer.loadView,\n\t})\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tdispatchStackScreenPropsFunction: (globalFunction) => dispatch(changeStackScreenPropsFunction(globalFunction)),\n\t}\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactUsersRootComponent);"]},"metadata":{},"sourceType":"module"}