{"ast":null,"code":"export var REGULAR_EXPRESSION_1 = RegExp(\"^(([0-9]+)(\\\\.[0-9]*)?)$\");\nexport var REGULAR_EXPRESSION_2 = RegExp(\"^(-?([0-9]+)(\\\\.[0-9]*)?)$\");\nexport var REGULAR_EXPRESSION_3 = RegExp(\"^-$\");\nexport var REGULAR_EXPRESSION_4 = RegExp(\"[^\\W_]\");\nexport var REGULAR_EXPRESSION_5 = RegExp(/\\s+/);\nexport var REGULAR_EXPRESSION_6 = RegExp(/[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}/);","map":{"version":3,"sources":["C:/Users/Ronald/Documents/Universidad/Miniproyecto/Proyecto final - geología/Versiones de la aplicación/lithodex/src/constants/regularExpressions.js"],"names":["REGULAR_EXPRESSION_1","RegExp","REGULAR_EXPRESSION_2","REGULAR_EXPRESSION_3","REGULAR_EXPRESSION_4","REGULAR_EXPRESSION_5","REGULAR_EXPRESSION_6"],"mappings":"AAyBA,OAAO,IAAIA,oBAAoB,GAAGC,MAAM,CAAC,0BAAD,CAAjC;AAGP,OAAO,IAAIC,oBAAoB,GAAGD,MAAM,CAAC,4BAAD,CAAjC;AAGP,OAAO,IAAIE,oBAAoB,GAAGF,MAAM,CAAC,KAAD,CAAjC;AAGP,OAAO,IAAIG,oBAAoB,GAAGH,MAAM,CAAC,QAAD,CAAjC;AAGP,OAAO,IAAII,oBAAoB,GAAGJ,MAAM,CAAC,KAAD,CAAjC;AAKP,OAAO,IAAIK,oBAAoB,GAAGL,MAAM,CAAC,gCAAD,CAAjC","sourcesContent":["/* Expresiones regulares\n===========================\n\n   - El símbolo ^ indica que empieza la expresión regular, y el símbolo $, que termina.\n     Si no se coloca $ al final, puede aceptar cualquier cosa a la derecha de la primera parte si dicha \n     primera parte es correcta.\n\n   - El ([0-9]) es para que lea dígitos.\n\n   - El asterisco (*) es para indicar que el objeto anterior puede tener cero o más elementos. \n     En cambio, con el \"más\" (+), el objeto debe tener uno o más elementos, nunca cero.\n\n   - El punto (.) es un metacarácter que acepta casi cualquier otro carácter, por lo que para aceptar sólo exactamente al punto\n     debemos escaparlo, y como además nuestra expresión regular es un string, debe ir doblemente escapado (\\\\).\n\n   - El signo de interrogación indica que el objeto anterior puede bien aparecer o no.\n\n   - Los paréntesis son para agrupar expresiones. Habría que escaparlos para indicar que se quiere aceptar específicamente un paréntesis.\n\n   - Si se dejan espacios entre los caracteres, esos espacios formarán parte de la expresión regular. \n     Así que no debemos dejar espacios si no es lo que realmente se está buscando.\n*/\n\n\n// Sólo números positivos\nexport var REGULAR_EXPRESSION_1 = RegExp(\"^(([0-9]+)(\\\\.[0-9]*)?)$\");\n\n// Cualquier número entero o decimal\nexport var REGULAR_EXPRESSION_2 = RegExp(\"^(-?([0-9]+)(\\\\.[0-9]*)?)$\");\n\n// Signo de menos, para que se reconozca como expresión válida cuando el usuario apenas ha escrito el signo menos\nexport var REGULAR_EXPRESSION_3 = RegExp(\"^-$\");\n\n// Expresión para aceptar sólo letras o números, ningún otro carácter adicional. \nexport var REGULAR_EXPRESSION_4 = RegExp(\"[^\\W_]\"); \n\n// Uno o más espacios seguidos\nexport var REGULAR_EXPRESSION_5 = RegExp(/\\s+/);\n\n// Correo electrónico. \n// Obtenida de: https://regexr.com/3e48o\n// También hay otra en: https://emailregex.com/\nexport var REGULAR_EXPRESSION_6 = RegExp(/[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}/);\n"]},"metadata":{},"sourceType":"module"}